[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d Typee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-F14-3/main[image:https://travis-ci.org/AY1920S1-CS2103T-F14-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-F14-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-F14-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "https://ci.appveyor.com/project/lyskevin/main/branch/master[image:https://ci.appveyor.com/api/projects/status/jnpgt16m0c8ob36q/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* It is an appointment manager for secretaries and receptionists to better schedule and manage appointments."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* Ever wanted a comprehensive appointment manager? Well, look no further! Typee includes a built-in spell checker, calendar view, typing game, and much more!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* Based on the AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 7,
      "-": 27
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "mainClassName \u003d \u0027com.typee.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    implementation group: \u0027org.apache.pdfbox\u0027, name: \u0027pdfbox\u0027, version: \u00272.0.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    implementation group: \u0027com.itextpdf\u0027, name: \u0027itextpdf\u0027, version: \u00275.5.11\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    archiveName \u003d \u0027typee.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "nordic96": 4,
      "-": 152
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Kevin Lim"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "image::lyskevin.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "{empty}[https://github.com/lyskevin[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Responsibilities: Code Quality"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Ko Gi Hun"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "image::nordic96.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "{empty}[http://github.com/nordic96[github]] [\u003c\u003cgihunk#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Responsibilities: In charge of `Storage`, `UI`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003d\u003d\u003d Sudharshan Madhavan"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "image::uggi121.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "{empty}[http://github.com/uggi121[github]] [\u003c\u003cSudharshanMadhavan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d\u003d Hu Yuchen"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::brebeek.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "{empty}[http://github.com/brebeek[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Responsibilities: In charge of functionality"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d Ng Jun Hao"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::jun-ha0.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "{empty}[https://github.com/jun-ha0[github]] [\u003c\u003cjunhao#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Responsibilities: Typing game"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 4,
      "uggi121": 4,
      "nordic96": 5,
      "brebeek": 4,
      "lyskevin": 5,
      "-": 35
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F14-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *Email us* : You can also reach us at `lyskevin@gmail.com` (Kevin), `e0318604@u.nus.edu` (Gi Hun), `yuchen_hu@u.nus.edu` (Yuchen), `e0341290@u.nus.edu` (Sudharshan), `e0309667@u.nus.edu` (Jun Hao)"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Typee - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "By: `SC09-F14-3`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::Typee_highlevel_architecture_diagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ", `StartWindow`, `GameWindow`, `PlayerInformation`, `GameBody`, `MovingWords` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Tab Switch Feature"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Tab switch feature is a type of Command that allows users to switch to respective windows for using different features in the system. System UI structure is generally divided into 2 parts;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation Structure"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".TabCommand Implementation Class Diagram"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nordic96"
        },
        "content": "image::TabCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1. `MainWindow` which contains necessary text input for `Command` inputs and output display for displaying the `CommandResult`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1. Window component, which is a type of `VBox`, that acts as a container for other different UI windows."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1. Tab Menu List, which displays the name of the tab/menus, which has respective separate UI windows. User has to use a specific `Command`; `TabCommand` in order to switch the window to another window."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* Upon first startup of the system, by system default, system will display the `EngagementList` window."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1. New Ui Model class `Tab` is implemented to contain the respective fxml controller classes in a OOP manner. Below is the class diagram for `Tab` class"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".Tab Class Diagram"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nordic96"
        },
        "content": "image::TabClassDiagram.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nordic96"
        },
        "content": "From figure 9, MainWindow will have an additional method `fetchTabInformation(tabName)`. After the parser executes the `TabCommand`, it will return a CommandResult with `Tab` property."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nordic96"
        },
        "content": "The method will compare the `Tab` in `CommandResult` and once there is a matching result, the method will load the respective fxml file in the MainWindow to display the respective feature window."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Below is the basic activity diagram of fetchTabInformation method"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".fetchTabInformation method Activity Diagram"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nordic96"
        },
        "content": "image::fetchTabInformationActivityDiagram.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Engagement Report Generation"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "This feature allows user to generate a pre-selected engagement in to a report and save it as a document file. The document file will be created in a .pdf format."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation Structure"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".PdfCommand Implementation Class Diagram"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nordic96"
        },
        "content": "image::PdfCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nordic96"
        },
        "content": "The feature will be implemented as an additional type of Command; `PdfCommand`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* Proposed syntax of the PdfCommand is as follow: `pdf i/[engagementList_index] to/[Person] from/[Person]`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Util class `PdfUtil` will be implemented for handling all pdf document creation related methods."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".PdfUtil Class Diagram"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nordic96"
        },
        "content": "image::PdfUtilClassDiagram.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfUtil class will be implemented under `util` package and it will be able to deliver few essential features"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nordic96"
        },
        "content": "that are necessary for document creation."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nordic96"
        },
        "content": "** Able to generate a full report document based on the `Engagement` as input."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nordic96"
        },
        "content": "** Use different templates for each other types of `Engagement` such as `Appointment`, `Interview` and `Meeting`. Document template will follow general email format:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Receiver, Content contained in a table, Sender and signature with address and company logo (Refer to Figure 12)."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nordic96"
        },
        "content": "To fulfill the document format, `Report` class needs to be implemented in order to model all necessary properties that has to be in the document. It 3 following properties;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nordic96"
        },
        "content": "***  `engagement`: specific engagement information to include in the document"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nordic96"
        },
        "content": "*** `to`: A `Person` who is receiving the document"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nordic96"
        },
        "content": "*** `from`: A `Person` who is either a receptionist or a secretary who is sending the document."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d UI Design"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nordic96"
        },
        "content": "`ReportWindow` will be the UI container which helps the user to interact using `PdfCommand`. UI will consist of 2 main scrollable panes; Engagement list with index numbers,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nordic96"
        },
        "content": "and the directory explorer for `reports/` as a item list."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d UI Components \u0026 Features"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Table below explains the components that are included in the `ReportWindow` with its purpose and features."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".Report Window UI Components"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[%header, cols\u003d4*]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|UI Component Type"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|Feature"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|Purpose"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nordic96"
        },
        "content": "| `EngagementList`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nordic96"
        },
        "content": "| Scrollable Stack Pane"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nordic96"
        },
        "content": "| Displays the sorted engagement list"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nordic96"
        },
        "content": "| To guide user to help recognize the list index number that the user wants to generate document from."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nordic96"
        },
        "content": "| `File_Explorer`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nordic96"
        },
        "content": "| Scrollable Stack Pane"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1. Displays the list of document generated previously and stored under the directory `reports/`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nordic96"
        },
        "content": "2. Each list item is clickable with a MouseClick action of opening the document."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nordic96"
        },
        "content": "| To allow user to manage documents more time efficiently."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Calendar Window"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "The calendar window provides a visual representation of stored engagements over a monthly period."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Users can choose to change the month being displayed and also open scrolling text windows which"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "show more detailed descriptions of the stored engagements for a particular day."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation Structure"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ".Structure of the Calendar Window"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "image::CalendarWindowClassDiagram.png[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "The `CalendarWindow` is part of the `MainWindow`. Specifically, it is one possible `Tab` which can be"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "displayed. The `CalendarWindow` class and any of its associated UI components can be found under the `com.typee.ui.calendar` package."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ".CalendarWindow Initialization Sequence Diagram"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "image::CalendarWindowSequenceDiagram.png[]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "The controller is set after constructing the `CalendarWindow` because there were some issues with"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "using constructors containing at least one argument."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d Game Window"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ".Structure of the Game Window"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::GameWindowClassDiagram.png[]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "The game window provides a simple typing game where there are moving words that users can type in order to score points."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Once users correctly type the specified word, the word disappears and the increase in points is reflected in the player"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "information panel in the game window. When the user fails to type the word before the moving word reaches the bottom of"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "screen, the decrease in health points is reflected in the player information panel in the game window. After the health"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "points reaches zero, `GAME OVER` is displayed."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//Updated by Ko Gi Hun 30/09/19"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* receptionists / secretaries in corporations."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* requires submitting large amount of structured reports or documents"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*Value proposition*: manage appointments and contacts faster than a typical mouse/ GUI driven app"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |secretary |add an appointment |organise and schedule meetings/appointments"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |secretary |request ro edit a specific appointment |fix any misinformation that I typed wrongly"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "|`* * *` |secretary under a busy manager |find specific appointments fast |schedule appointments efficiently"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |secretary |have the option to clear the appointment list |restart from scratch"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |secretary |undo my previous commands |recall commands made by mistake"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |secretary |redo recalled commands |retrieve the commands undone by mistake"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |secretary |select and delete a specific appointment from the list |manage inactive or cancelled appointments"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |busy secretary |able to see the appointments in calendar view |enjoy better convenience"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |user |save and load data from a local file |keep the appointment list locally"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* *` |secretary under a busy manager |sort all appointments |see them in the order I want"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* *` |user |have a command to terminate the application |"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* *` |advanced user |be able to execute compound statements |improve efficiency"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`*` |bored secretary |have a built-in game feature |keep myself entertained"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`*` |highly driven secretary |have a way to practice typing |improve my efficiency during work"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`*` |fast-typer |have a way to amend trivial spelling errors |improve typing efficiency"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`*` |secretary |generate a PDF file of a selected appointment |make a distributable copy of the appointment"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "nordic96"
        },
        "content": "(For all use cases below, the *System* is the `Typee` and the *Actor* is the `user`,"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "nordic96"
        },
        "content": "unless specified otherwise)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "uggi121"
        },
        "content": "// Updated by Sudharshan"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC01) Add appointment"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "uggi121"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "uggi121"
        },
        "content": "1. User requests to add an appointment."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "uggi121"
        },
        "content": "2. System adds the appointment to the existing appointment list."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "uggi121"
        },
        "content": "3. System displays the updated appointment list"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "uggi121"
        },
        "content": "and notifies the user."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "uggi121"
        },
        "content": "+"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "uggi121"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "uggi121"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "uggi121"
        },
        "content": "* 1a. User supplies the necessary information."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "uggi121"
        },
        "content": "+"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "uggi121"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "uggi121"
        },
        "content": "* 1b. User supplies invalid information."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "uggi121"
        },
        "content": "** 1b1. System notifies user about the invalid information."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "uggi121"
        },
        "content": "+"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "uggi121"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "uggi121"
        },
        "content": "* 1c. Appointment clashes with an existing appointment."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "uggi121"
        },
        "content": "** 1c1. System notifies user about the conflict."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "uggi121"
        },
        "content": "+"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "uggi121"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//Updated by Yu Chen"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC02) List appointments"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nordic96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1.  User requests to list appointments"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "nordic96"
        },
        "content": "2.  System displays the list of appointments in chronological order"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* 1a. User specifies ordering method"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** 1a1. System displays the list of appointments in specified order"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//Jun Hao"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC03) Find appointment"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1.  User requests to find appointments"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "nordic96"
        },
        "content": "2.  User provides fields that the user wants to use to find appointments"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "3.  System finds and displays the list of relevant appointments"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "nordic96"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC04) Delete appointment"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "1.  User requests to list appointments"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "2.  System displays the list of appointments"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "3.  User requests to delete a specific appointment in the list"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "uggi121"
        },
        "content": "4.  System deletes the appointment"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Use case: (UC05) Exit application"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "1. User requests to exit the application"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "2. System displays exit message"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "3. System exits"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "+"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC06) Request help information"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: (UC07) Save updated Appointment data"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "1. User make changes in the appointment list, or a specific appointment via CRUD."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "2. System saves the updated data"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "3. System displays the updated appointment data"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//updated by Ko Gi Hun 7/10/19"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC08) Edit selected appointment"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "nordic96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1. User requests to list appointments"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "nordic96"
        },
        "content": "2. System displays the list of appointments"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "nordic96"
        },
        "content": "3. User keys in index and provide fields that the user wants to edit"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "nordic96"
        },
        "content": "4. System edits the selected appointment accordingly"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "nordic96"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* 3a. User keys in invalid index"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "nordic96"
        },
        "content": "** 3a1. System shows error message."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* 3b. User does not provide any field to edit."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "nordic96"
        },
        "content": "** 3b1. System shows error message."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC09) Undo previous command"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "brebeek"
        },
        "content": "1.  User requests to undo command"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "brebeek"
        },
        "content": "2.  System reverts the appointment list to its previous state"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* 2a. There is no previous command"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC10) Redo previous command"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "brebeek"
        },
        "content": "1.  User requests to redo command"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "brebeek"
        },
        "content": "2.  System reverts the appointment list to its previous undone state"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* 2a. There is no previous undone command"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "// Updated by Kevin"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Use case: (UC11) Switch tabs"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "1. User requests to switch to a specified tab."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "2. System switches to the appropriate tab."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "+"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* 1a. Requested tab is invalid."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "** 1a1. System shows error message."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "+"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Use case: (UC12) Calendar mode"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "1. User specifies a date to view engagements for."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "2. System shows the engagements for the specified date."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* 1a. User specifies an invalid date."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "** 1a1. System shows error message."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "+"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Use case: (UC13) Calendar mode month switching"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "1. User specifies a month to switch the display to."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "2. System updates the calendar view to display appointments for the specified month."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* 1a. User specifies an invalid month."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "** 1a1. System shows error message."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "+"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//Updated by Jun Hao"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Use case: (UC14) Typing game"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1.  User requests to start the typing game"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "2.  System shows typing game window which displays the specific word(s) to type."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "3.  User plays the game by typing the word(s)."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "4.  Typing game updates the User\u0027s score and health points accordingly."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Steps 2-4 are repeated for as many rounds as required until User runs out of health points."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "nordic96"
        },
        "content": "5.  Typing game shows the final score of the User"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "+"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* 2a. User exits game"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//Updated by Ko Gi Hun 30/09/19"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d Use case: (UC15) Generate appointment document in PDF format"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "1. System displays the list of appointments"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests for generating PDF of an engagement for a selected engagement."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "1. System generates a PDF file in a specific external directory"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "1. System shows successful message"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "+"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. System fails to generate PDF"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. System shows error message."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "+"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ".  Should come with automated unit tests and open source code."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ".  Should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ".  Application should not exceed 100MB in size."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[[secretary]] Secretary::"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "brebeek"
        },
        "content": "A person employed by an individual or in an office to assist with correspondence, make appointments,"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "brebeek"
        },
        "content": "and carry out administrative tasks."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[[manager]] Manager::"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "The person that the secretary is assigned to work for."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[[appointment]] Appointment::"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "brebeek"
        },
        "content": "An arrangement, managed and maintained by a secretary, for the manager to meet someone at a particular time and place."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 43,
      "uggi121": 24,
      "nordic96": 164,
      "brebeek": 76,
      "lyskevin": 82,
      "-": 424
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F14-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Typee is a Command Line Interface (CLI) application for managing appointments. It is designed for secretaries and receptionists who prefer to work with a CLI while still enjoying the benefits of a Graphical User Interface (GUI). Head over to \u003c\u003cQuick Start\u003e\u003e to see how to get the application running!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "2.  Download the latest `typee.jar` (coming soon)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "3.  Copy the file to the folder that you want to use as the home folder for your Typee application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "4.  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "5. Type a command in the text box and press `Enter` to execute it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *`list`* : lists all appointments."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* **`add`** `d/Meeting on Monday` : adds an appointment with the description `Meeting on Monday` to the appointment manager."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* **`delete`** `3` : deletes the 3rd appointment shown in the current list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *`exit`* : exits the app."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Adding an appointment: `add`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Adds an appointment to the appointment manager. +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Format: `add d/DESCRIPTION`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* `add d/Meeting on Monday`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Adds an appointment with the description `Meeting on Monday` to the appointment manager."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Sorting all appointments : `sort`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Sorts the list of all appointments in the appointment list by the order specified by user. +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Orders supported: `type_ascending`, `type_descending`, `start_ascending`, `start_descending` +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "`end_ascending`, `end_descending`, `priority_ascending`, `priority_descending` +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `sort ORDER` +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* `sort start_ascending` +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Sorts the list displayed in ascending order of start time."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Editing an appointment : `edit`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Edits an existing appointment in the appointment manager. +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Format: `edit INDEX [d/DESCRIPTION]`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* Edits the appointment at the specified `INDEX`. The index refers to the index number shown in the displayed appointment list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* `edit 1 d/Meeting on Tuesday` +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Edits the description of the 1st person to be `Meeting on Tuesday`."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Locating appointments by name: `find`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Finds appointments whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* The order of the keywords does not matter. e.g. `noon time` will match `time noon`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* Appointments matching at least one keyword will be returned (i.e. `OR` search). e.g. `team time` will return `team meeting`, `meeting time`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* `find presentation` +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Returns `team presentation` and `investor presentation`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* `find meeting presentation conference` +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Returns any appointment containing the keywords `meeting`, `presentation`, or `conference` in its description"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Deleting an appointment : `delete`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Deletes the specified appointment from the address book. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* The index refers to the index number shown in the displayed appointment list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Deletes the 2nd appointment in the appointment manager."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* `find meeting` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Deletes the 1st appointment in the results of the `find` command."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Clears all appointments from the appointment manager. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Undoing the previous command : `undo`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Undos the previous command, provided that it exists. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* `add d/Meeting on Monday` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Undos the add command, i.e. the appointment with the description `Meeting on Monday` will no longer be in the appointment manager."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Redoing the previous command \" `redo`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Redos the previous `undo` command. There must be a valid undo command to redo, otherwise this command does nothing. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* `add d/Meeting on Monday` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "`redo`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Redos the previous undo command, i.e. the appointment with the description `Meeting on Monday` will reappear in the appointment manager."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d Changing to calendar view : `tab calendar`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Changes the current view to the calendar view, which displays appointments inside a calendar."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d Typing game : `tab typinggame`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Opens a simple typing game which helps you to improve your typing speed. There are moving words that users can type in"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "order to score points. Once users correctly type the specified word, the word disappears and the increase in points is"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "reflected in the player information panel in the game window. When the user fails to type the word before the moving"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "word reaches the bottom of screen, the decrease in health points is reflected in the player information panel in the game"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "window. After the health points reaches zero, `GAME OVER` is displayed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Generating a PDF file of appointments : `pdf`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Generates a PDF file based on the data saved in the hard disk."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//Updated by Ko Gi Hun 30/09/19"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Saving and loading the data"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "The appointment manager\u0027s data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Relevant data will be loaded from the external file when the application starts."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//Updated by Ko Gi Hun 30/09/19"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Generating a PDF file of a selected appointment: `[coming in v2.0]`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Typee folder."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *Add* `add d/DESCRIPTION` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "e.g. `add d/Team lunch outing on Friday`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "* *Calendar* : `tab calendar`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *Edit* : `edit INDEX [d/DESCRIPTION]` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "e.g. `edit 2 d/Team lunch outing on Thursday`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "e.g. `find team outing`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "* *Game* : `tab typinggame`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *PDF* : `pdf`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 9,
      "nordic96": 5,
      "lyskevin": 77,
      "-": 114
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(engagementList)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 1,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/CalendarWindowClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package CalendarWindow \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class Tab UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class CalendarWindow UI_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class CalendarTitleBar UI_COLOR_T2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class PreviousMonthButton UI_COLOR_T2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class CalendarTitle UI_COLOR_T2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class NextMonthButton UI_COLOR_T2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class WeekdayDisplayPane UI_COLOR_T3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class Weekday UI_COLOR_T3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class DateDisplayGrid UI_COLOR_T4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class IndividualDatePane UI_COLOR_T4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class Engagement #9D0012"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "HiddenOutside ..\u003e Tab"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Tab *-down-\u003e \"0...1\" CalendarWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow .up.|\u003e UiPart"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow -right-\u003e Logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow *-down-\u003e CalendarTitleBar"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow *-down-\u003e WeekdayDisplayPane"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow *-down-\u003e DateDisplayGrid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarTitleBar *-down-\u003e PreviousMonthButton"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarTitleBar *-down-\u003e CalendarTitle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarTitleBar *-down-\u003e NextMonthButton"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "WeekdayDisplayPane *-down-\u003e \"7\" Weekday"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "DateDisplayGrid *-down-\u003e \"35\" IndividualDatePane"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "IndividualDatePane .up.|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "IndividualDatePane *-down-\u003e \"*\" Engagement"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Engagement .right.\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 52
    }
  },
  {
    "path": "docs/diagrams/CalendarWindowSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "actor User"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "participant \":UI\" as UI UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "participant \":Tab\" as Tab UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "participant \":CalendarWindow\" as CalendarWindow UI_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "participant \":IndividualDatePane\" as IndividualDatePane UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "participant \":Logic\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "User -\u003e UI: \"tab calendar\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "UI -\u003e Logic: execute(\"tab calendar\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate Logic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "create Tab"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Logic -\u003e Tab"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate Tab"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Tab --\u003e Logic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate Tab"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Logic --\u003e UI"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate Logic"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "UI -\u003e UI: fetchTabInformation(tabName)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate UI"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "create CalendarWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "UI -\u003e CalendarWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate CalendarWindow"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow --\u003e UI"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate CalendarWindow"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "UI -\u003e CalendarWindow: setLogic(Logic)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate CalendarWindow"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow --\u003e UI"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate CalendarWindow"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "UI -\u003e CalendarWindow: populateCalendar()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate CalendarWindow"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "loop 35 times"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    create IndividualDatePane"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    CalendarWindow -\u003e IndividualDatePane"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    activate IndividualDatePane"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    IndividualDatePane --\u003e CalendarWindow"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    deactivate IndividualDatePane"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "end"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "loop 35 times"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    CalendarWindow -\u003e IndividualDatePane: add(engagements)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    activate IndividualDatePane"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    IndividualDatePane --\u003e CalendarWindow"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    deactivate IndividualDatePane"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "end"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow --\u003e UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate CalendarWindow"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "UI -\u003e Tab: setController(calendarWindow)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate Tab"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Tab --\u003e UI"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate Tab"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "UI --\u003e User"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate UI"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 83
    }
  },
  {
    "path": "docs/diagrams/GenerateDocumentSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "box Logic"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "participant \":LogicManager\" as LogicManager"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "participant \":TypeeParser\" as TypeeParser"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "participant \":PdfCommandParser\" as PdfCommandParser"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "participant \"p:PdfCommand\" as PdfCommand"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "participant \":CommandResult\" as CommandResult"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "box PdfUtil"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "participant \":PdfUtil\" as PdfUtil"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[-\u003e LogicManager : execute(\"pdf i/1 to/Harry from/Ron\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "LogicManager -\u003e TypeeParser : parseCommand(\"pdf i/1 to/Harry from/Ron\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate TypeeParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": "create PdfCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "TypeeParser -\u003e PdfCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate PdfCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommandParser --\u003e TypeeParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate PdfCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "TypeeParser -\u003e PdfCommandParser : parse(\"i/1 to/Harry from/Ron\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate PdfCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "create PdfCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommandParser -\u003e PdfCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate PdfCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommand --\u003e PdfCommandParser : p"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate PdfCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommandParser --\u003e TypeeParser : p"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate PdfCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommandParser -[hidden]-\u003e TypeeParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nordic96"
        },
        "content": "destroy PdfCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nordic96"
        },
        "content": "TypeeParser --\u003e LogicManager : p"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate TypeeParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nordic96"
        },
        "content": "LogicManager -\u003e PdfCommand : execute()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate PdfCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommand -\u003e PdfUtil : generateDocument(engagement)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate PdfUtil"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfUtil --\u003e PdfCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate PdfUtil"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nordic96"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nordic96"
        },
        "content": "CommandResult --\u003e PdfCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate PdfCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nordic96": 68
    }
  },
  {
    "path": "docs/diagrams/PdfCommandClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package ui {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class ReportWindow"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class Tab"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class MainWindow"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    abstract class UiPart\u003cRegion\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package logic.commands {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    abstract class Command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class PdfCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package logic.parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    interface Parser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class PdfCommandParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class TypeeParser"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class Report"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class Person"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class Engagement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package util {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class PdfUtil"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "UiPart \u003c|-- Tab"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "UiPart \u003c|-- MainWindow"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": "UiPart \u003c|-- ReportWindow"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": "MainWindow *-- Tab"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "MainWindow ..\u003e ReportWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "MainWindow ..\u003e TypeeParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Command \u003c|-- PdfCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Report --\u003e Engagement"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Report --\u003e Person"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Engagement -\u003e Person"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Parser \u003c|.. PdfCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommand ..\u003e PdfUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommand -\u003e Report"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nordic96"
        },
        "content": "TypeeParser ..\u003e PdfCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommandParser ..\u003e PdfCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nordic96": 42
    }
  },
  {
    "path": "docs/diagrams/PdfUtilClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package util {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class PdfUtil {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        ~ generateReport(engagement: Engagement): void"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        ~ initDocument(): Document"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        ~ addHeader(document: Document): Document"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        ~ addContent(document: Document, engagement:Engagement): Document"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        ~ addParagraph(document: Document, engagement:Engagement): Document"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nordic96": 11
    }
  },
  {
    "path": "docs/diagrams/TabClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": "class Tab {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    - name: String"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    - url: String"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    - controller: UiPart\u003cRegion\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    Tab(name:String): Tab"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    Tab(name:String, url:String, controller:UiPart\u003cRegion\u003e): Tab"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    getName(): String"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    setName(name: String)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    getController(): UiPart\u003cRegion\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    setController(controller:UiPart\u003cRegion\u003e): void"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nordic96": 13
    }
  },
  {
    "path": "docs/diagrams/TabCommandClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package ui {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class TabPanel"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class MainWindow {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        fetchTabInformation(tabName:String): Tab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class Tab"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    abstract class UiPart\u003cRegion\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package logic.parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class TabCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    interface Parser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class TypeeParser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package logic.commands {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class TabCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    abstract class Command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class CommandResult"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "UiPart \u003c|-- Tab"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "UiPart \u003c|-- TabPanel"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "UiPart \u003c|-- MainWindow"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "MainWindow *-- Tab"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "MainWindow *-- TabPanel"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Parser \u003c|.. TabCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Parser \u003c|.. TypeeParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": "TypeeParser ..\u003e TabCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Command \u003c|-- TabCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "TabCommandParser ..\u003e TabCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "TabCommand ..\u003e CommandResult"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": "MainWindow ..\u003e TypeeParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nordic96"
        },
        "content": "CommandResult .. MainWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nordic96": 36
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Class StartWindow"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Class GameWindow"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Class PlayerInformation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Class GameBody"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Class MovingWords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "MainWindow --\u003e StartWindow"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -down-\u003e PersonCard"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "StartWindow -down-\u003e GameWindow"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameWindow -down-\u003e GameBody"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameWindow -down-\u003e MovingWords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameWindow -down-\u003e PlayerInformation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "HelpWindow -down---|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "StartWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "MovingWords -down---|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameBody -down---|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "PlayerInformation -down---|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard ..\u003e Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 16,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/fetchTabInformationActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": "(*)  --\u003e \"check tab name in the tab list\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "--\u003e \"Fetch Tab Information\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "--\u003e \"setController of matching tab name\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "--\u003e \"Return fetched tab\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "--\u003e(*)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nordic96": 7
    }
  },
  {
    "path": "src/main/java/com/typee/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 4,
      "-": 61
    }
  },
  {
    "path": "src/main/java/com/typee/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/com/typee/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.storage.EngagementListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.storage.JsonEngagementListStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.storage.JsonTypeeStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.storage.TypeeStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Typee ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementListStorage engagementListStorage \u003d new JsonEngagementListStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        TypeeStorage typeeStorage \u003d new JsonTypeeStorage(config.getTabMenuFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        storage \u003d new StorageManager(engagementListStorage, userPrefsStorage, typeeStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s engagement manager and {@code userPrefs}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * \u003cbr\u003e The data from the sample Typee application will be used instead if {@code storage}\u0027s engagement"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * manager is not found, or an empty engagement manager will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * {@code storage}\u0027s engagement manager."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Optional\u003cReadOnlyEngagementList\u003e engagementListOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ReadOnlyEngagementList initialData;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            engagementListOptional \u003d storage.readEngagementList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            if (!engagementListOptional.isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample engagement manager\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            initialData \u003d engagementListOptional.orElseGet(SampleDataUtil::getSampleEngagementList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty engagement manager\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            initialData \u003d new EngagementList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty engagement manager\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            initialData \u003d new EngagementList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty engagement list\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        logger.info(\"Starting Typee \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Typee ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 8,
      "nordic96": 20,
      "lyskevin": 17,
      "-": 143
    }
  },
  {
    "path": "src/main/java/com/typee/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path tabMenuFilePath \u003d Paths.get(\"tabMenus.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getTabMenuFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tabMenuFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/java/com/typee/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 840;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/com/typee/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/com/typee/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_INVALID_ENGAGEMENT_DISPLAYED_INDEX \u003d \"The engagement index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_ENGAGEMENT_LISTED_OVERVIEW \u003d \"%1$d engagements listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "brebeek": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/typee/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/com/typee/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/com/typee/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/typee/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/typee/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/com/typee/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/com/typee/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/typee/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/com/typee/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.type.CollectionType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.type.SimpleType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the deserialized the Json object or {@code Optional.empty()} to a list of specified object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param listClassReference Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not as expected."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cList\u003cT\u003e\u003e readJsonFileIntoList(Path filePath, Class\u003cT\u003e listClassReference)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cT\u003e jsonFile;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d objectMapper.readValue(FileUtil.readFromFile(filePath),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    CollectionType.construct(List.class, SimpleType.construct(Tab.class)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 171
    }
  },
  {
    "path": "src/main/java/com/typee/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/com/typee/game/Player.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.property.SimpleDoubleProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Player of the typing game"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class Player {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final int DEFAULT_SCORE_VALUE \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final int DEFAULT_HEALTH_VALUE \u003d 100;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private int score;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private int health;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private SimpleIntegerProperty scoreProperty \u003d new SimpleIntegerProperty(this, \"score\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private SimpleDoubleProperty healthProperty \u003d new SimpleDoubleProperty(this, \"health\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private SimpleBooleanProperty isGameOver \u003d new SimpleBooleanProperty();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private StringProperty inputText;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Player() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        score \u003d DEFAULT_SCORE_VALUE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        scoreProperty.setValue(score);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        health \u003d DEFAULT_HEALTH_VALUE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        healthProperty.set(health / 100.0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        isGameOver.set(false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void setInputAs(StringProperty inputText) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.inputText \u003d inputText;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns input text by player."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public String getInputText() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return inputText.get().strip();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Increases this player\u0027s score by {@code score}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void incrementScore(int score) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.score +\u003d score;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        scoreProperty.setValue(score);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Decreases this player\u0027s health by {@code health}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void decrementHealth(int health) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (isGameOver.get()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (this.health \u003c\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            isGameOver.set(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            this.health \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.health -\u003d health;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        healthProperty.set((double) this.health / DEFAULT_HEALTH_VALUE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public SimpleIntegerProperty getScoreProperty() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return scoreProperty;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public SimpleDoubleProperty getHealthProperty() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return healthProperty;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public SimpleBooleanProperty getGameOverProperty() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return isGameOver;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 75
    }
  },
  {
    "path": "src/main/java/com/typee/game/Words.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Words being used in typing game. Contains placeholder words for now."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class Words {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final int SIZE \u003d 5;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final String[] words \u003d { \"Lorem\", \"ipsum\", \"is\", \"placeholder\", \"text\" };"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static String get(int index) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return words[index];"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 15
    }
  },
  {
    "path": "src/main/java/com/typee/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns the engagement list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @see Model#getEngagementList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    ReadOnlyEngagementList getEngagementList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of engagements */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    ObservableList\u003cEngagement\u003e getFilteredEngagementList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    /** Returns an unmodifiable view of the sorted list of engagements */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ObservableList\u003cEngagement\u003e getSortedEngagementList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of tabs in Typee */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTab\u003e getTabList() throws DataConversionException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns the user prefs\u0027 engagement list file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    Path getEngagementListFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 6,
      "nordic96": 6,
      "brebeek": 3,
      "lyskevin": 6,
      "-": 39
    }
  },
  {
    "path": "src/main/java/com/typee/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.logic.parser.TypeeParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TypeeParser typeeParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        typeeParser \u003d new TypeeParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d typeeParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            storage.saveEngagementList(model.getEngagementList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public ReadOnlyEngagementList getEngagementList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return model.getEngagementList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public ObservableList\u003cEngagement\u003e getFilteredEngagementList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return model.getFilteredEngagementList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public ObservableList\u003cEngagement\u003e getSortedEngagementList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return model.getSortedEngagementList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTab\u003e getTabList() throws DataConversionException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getTabList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Path getEngagementListFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return model.getEngagementListFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 8,
      "nordic96": 9,
      "brebeek": 5,
      "lyskevin": 6,
      "-": 63
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_ATTENDEES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_ENGAGEMENT_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Adds an engagement to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an engagement to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_ENGAGEMENT_TYPE + \"ENGAGEMENT_TYPE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_START_TIME + \"START TIME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_END_TIME + \"END TIME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_ATTENDEES + \"ATTENDEES \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_ENGAGEMENT_TYPE + \"Meeting \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_START_TIME + \"18/10/2019/1500 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_END_TIME + \"18/10/2019/1800 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_LOCATION + \"COM-2-B1-03 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_ATTENDEES + \"John, Elijah, Sam \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_DESCRIPTION + \"CS2103T Discussion \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_PRIORITY + \"High\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New engagement added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENGAGEMENT \u003d \"This engagement clashes with an already existing one\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final Engagement toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Engagement}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public AddCommand(Engagement engagement) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(engagement);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        toAdd \u003d engagement;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (model.hasEngagement(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.addEngagement(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.saveEngagementList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 34,
      "nordic96": 4,
      "lyskevin": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Engagement list has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        model.setHistoryManager(new EngagementList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.saveEngagementList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 2,
      "brebeek": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should switch tab menu. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean tabCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Tab tab;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tabCommand \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tab \u003d new Tab(\"main\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} specified for tab command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean tabCommand, Tab tab) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tabCommand \u003d tabCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tab \u003d tab;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isTabCommand() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return tabCommand;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tab getTab() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return tab;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 98
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the engagement identified by the index number used in the displayed engagement list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_ENGAGEMENT_SUCCESS \u003d \"Deleted engagement: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        List\u003cEngagement\u003e lastShownList \u003d model.getSortedEngagementList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENGAGEMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Engagement engagementToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.deleteEngagement(engagementToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.saveEngagementList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(DeleteCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .MESSAGE_DELETE_ENGAGEMENT_SUCCESS, engagementToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 5,
      "nordic96": 5,
      "brebeek": 2,
      "-": 44
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Edits the details of an existing engagement in the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the engagement identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            + \"by the index number used in the displayed engagement list. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_EDIT_ENGAGEMENT_SUCCESS \u003d \"Edited engagement: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENGAGEMENT \u003d \"This engagement already exists in the list.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final EditEngagementDescriptor editEngagementDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @param index of the engagement in the filtered engagement list to edit"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @param editPersonDescriptor details to edit the engagement with"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public EditCommand(Index index, EditEngagementDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.editEngagementDescriptor \u003d new EditEngagementDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        List\u003cEngagement\u003e lastShownList \u003d model.getSortedEngagementList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENGAGEMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Engagement engagementToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Engagement editedEngagement \u003d createEditedEngagement(engagementToEdit, editEngagementDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!engagementToEdit.isConflictingWith(editedEngagement) \u0026\u0026 model.hasEngagement(editedEngagement)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.setEngagement(engagementToEdit, editedEngagement);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.updateFilteredEngagementList(Model.PREDICATE_SHOW_ALL_ENGAGEMENTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.saveEngagementList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ENGAGEMENT_SUCCESS, editedEngagement));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Creates and returns a {@code Engagement} with the details of {@code engagementToEdit}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * edited with {@code editEngagementDescriptor}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static Engagement createEditedEngagement(Engagement engagementToEdit,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                                     EditEngagementDescriptor editEngagementDescriptor) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assert engagementToEdit !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        //Name updatedName \u003d editEngagementDescriptor.getName().orElse(engagementToEdit.getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        //return new Person(updatedName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return engagementToEdit;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 editEngagementDescriptor.equals(e.editEngagementDescriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Stores the details to edit the engagement with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static class EditEngagementDescriptor {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        public EditEngagementDescriptor() {}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        public EditEngagementDescriptor(EditEngagementDescriptor toCopy) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            if (!(other instanceof EditEngagementDescriptor)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            EditEngagementDescriptor e \u003d (EditEngagementDescriptor) other;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return getName().equals(e.getName());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 3,
      "uggi121": 25,
      "nordic96": 9,
      "brebeek": 14,
      "-": 101
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Typee as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "brebeek": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.person.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Finds and lists all engagements in engagement list whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all engagements whose descriptions contain any \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            + \"of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" interview\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public FindCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        //model.updateFilteredEngagementList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        //model.updateFilteredEngagementList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                String.format(Messages.MESSAGE_ENGAGEMENT_LISTED_OVERVIEW, model.getFilteredEngagementList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "nordic96": 3,
      "brebeek": 5,
      "lyskevin": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all appointments\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.updateFilteredEngagementList(Model.PREDICATE_SHOW_ALL_ENGAGEMENTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 2,
      "brebeek": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Redos the last undone command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully redone!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No commands to redo!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (model.hasNoRedoableCommand()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.redoEngagementList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.updateFilteredEngagementList(Model.PREDICATE_SHOW_ALL_ENGAGEMENTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "brebeek": 28
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.util.EngagementComparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all appointments\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            + \": Sorts the engagement list displayed in customised order.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: [property] + [_ascending] or [_descending]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" start_ascending\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private Comparator\u003cEngagement\u003e comparator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public SortCommand(EngagementComparator comparator) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        model.updateSortedEngagementList(comparator);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                \u0026\u0026 comparator.equals(((SortCommand) other).comparator)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 41,
      "-": 3
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Undos the last command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully undone!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No commands to undo!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (model.hasNoUndoableCommand()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.undoEngagementList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.updateFilteredEngagementList(Model.PREDICATE_SHOW_ALL_ENGAGEMENTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "brebeek": 28
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/exceptions/NullRedoableActionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Thrown when no previous command to redo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class NullRedoableActionException extends CommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public NullRedoableActionException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        super(\"No command to redo!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 10
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/exceptions/NullUndoableActionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Thrown when no previous command to undo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class NullUndoableActionException extends CommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public NullUndoableActionException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        super(\"No command to undo!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 10
    }
  },
  {
    "path": "src/main/java/com/typee/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_ATTENDEES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_ENGAGEMENT_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.AttendeeList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.EngagementType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Location;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.TimeSlot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArgumentMultimap argMultimap \u003d getArgumentMultimap(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (isInvalidMultimap(argMultimap)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EngagementType engagementType \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_ENGAGEMENT_TYPE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        AttendeeList attendees \u003d parseAttendees(argMultimap.getValue(PREFIX_ATTENDEES).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return makeAddCommand(engagementType, startTime, endTime, attendees, location, description, priority);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Makes a new add command to add an engagement using the given arguments."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param engagementType the type of the engagement."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param startTime start time."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param endTime end time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param attendees list of people attending the engagement."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location location of the engagement."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param description description of the engagement."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param priority priority level of the engagement."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return an {@code AddCommand} to add the engagement."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException if the time arguments are invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private AddCommand makeAddCommand(EngagementType engagementType, LocalDateTime startTime, LocalDateTime endTime,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                      AttendeeList attendees, Location location,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                      String description, Priority priority) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            TimeSlot timeSlot \u003d new TimeSlot(startTime, endTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Engagement engagement \u003d Engagement.of(engagementType, timeSlot,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    attendees, location, description, priority);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new AddCommand(engagement);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the arguments don\u0027t correspond to the add command\u0027s parameters."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param argMultimap user input arguments mapped by their prefixes."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the command entered is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isInvalidMultimap(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return (!arePrefixesPresent(argMultimap, PREFIX_ENGAGEMENT_TYPE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_ATTENDEES, PREFIX_DESCRIPTION, PREFIX_LOCATION, PREFIX_PRIORITY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Maps the user entered arguments to their corresponding prefixes."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param args user input"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return {@code ArgumentMultimap} containing a mapping of prefixes to actual arguments."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private ArgumentMultimap getArgumentMultimap(String args) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return ArgumentTokenizer.tokenize(args, PREFIX_ENGAGEMENT_TYPE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_ATTENDEES, PREFIX_DESCRIPTION, PREFIX_LOCATION, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a {@code String} representing a list of attendees into an {@code AttendeeList}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param attendees string representing list of attendees."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return corresponding {@code AttendeeList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private AttendeeList parseAttendees(String attendees) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPerson\u003e attendeesList \u003d Arrays.stream(attendees.split(\",\"))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .map(name -\u003e name.trim())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .map(name -\u003e new Person(ParserUtil.parseNameDeterministic(name)))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .filter(name -\u003e name !\u003d null)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new AttendeeList(attendeesList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 97,
      "nordic96": 5,
      "-": 29
    }
  },
  {
    "path": "src/main/java/com/typee/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/com/typee/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/com/typee/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_ENGAGEMENT_TYPE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_ATTENDEES \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 7,
      "nordic96": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/com/typee/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 6,
      "-": 22
    }
  },
  {
    "path": "src/main/java/com/typee/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                    EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand.EditEngagementDescriptor editPersonDescriptor \u003d new EditCommand.EditEngagementDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 10,
      "-": 33
    }
  },
  {
    "path": "src/main/java/com/typee/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.person.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return new FindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 5,
      "lyskevin": 2,
      "-": 25
    }
  },
  {
    "path": "src/main/java/com/typee/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/com/typee/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.EngagementType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.util.EngagementComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME_STRING \u003d \"Please stick to the DD/MM/YYYY/HHMM format.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME_FORMAT \u003d \"%s is not a valid date-time \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"in the DD/MM/YYYY/HHMM format.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a {@code String name} into a {@code Name} in a deterministic manner."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns null if the name is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * This method should ONLY be used with streams to avoid exception handling."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param name name of the {@code Person}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return a {@code Name} object representing the name."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Name parseNameDeterministic(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return parseName(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a {@code String engagementType} representing the type of an engagement."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the corresponding {@code EngagementType}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param engagementType {@code String} representing the type of engagement."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return corresponding {@code EngagementType}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException if the given {@code String engagementType} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static EngagementType parseType(String engagementType) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(engagementType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String trimmedType \u003d engagementType.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            EngagementType type \u003d EngagementType.of(trimmedType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return type;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(EngagementType.getMessageConstraints());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a {@code String location} and returns a {@code Location} object representing it."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location location."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return a corresponding {@code Location} object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException if the {@code String location} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!Location.isValid(location)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new Location(location);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a {@code String priority} and returns the corresponding {@code Priority}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param priority {@code String} representing priority."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the corresponding {@code Priority}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException if the {@code String priority} is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String trimmedString \u003d priority.trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Priority parsedPriority \u003d Priority.of(trimmedString);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return parsedPriority;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(Priority.getMessageConstraints());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Parses a {@code String order} and returns a {@code EngagementComparator}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @param order the sorting order."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @return the PersonPropertyComparator representing the comparator for that property."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @throws ParseException if the given {@code personProperty} is invalid."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static EngagementComparator parseComparator(String order) throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return EngagementComparator.getComparator(order);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new ParseException(EngagementComparator.MESSAGE_PROPERTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses the {@code String} input by the user."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a {@code LocalDateTime} object representing the time."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param time time."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException if the {@code String time} is invalid."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static LocalDateTime parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            LocalDateTime localDateTime \u003d convertStringToDateTime(time);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_TIME_FORMAT, time));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_TIME_STRING);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Converts a {@code String} to its corresponding {@code LocalDateTime} object."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param time time."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the corresponding {@code LocalDateTime} object."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static LocalDateTime convertStringToDateTime(String time) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (time.length() \u003e 15) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StringIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        int year \u003d Integer.parseInt(time.substring(6, 10));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Month month \u003d Month.of(Integer.parseInt(time.substring(3, 5)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        int day \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        int hours \u003d Integer.parseInt(time.substring(11, 13));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        int minutes \u003d Integer.parseInt(time.substring(13, 15));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return LocalDateTime.of(year, month, day, hours, minutes);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 117,
      "nordic96": 5,
      "brebeek": 17,
      "-": 39
    }
  },
  {
    "path": "src/main/java/com/typee/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/com/typee/logic/parser/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses a sort command and returns a {@code SortCommand} object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private String trimmedArgs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return new SortCommand(ParserUtil.parseComparator(parseOrder()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user command and returns a formulated ordering method"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return {@code String} of formulated ordering method"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the input format is incorrect"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private String parseOrder() throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            switch (Order.valueOf(trimmedArgs.toUpperCase())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            case START_ASCENDING:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                return \"START_TIME\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            case START_DESCENDING:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                return \"START_TIME_REVERSE\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            case END_ASCENDING:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                return \"END_TIME\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            case END_DESCENDING:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                return \"END_TIME_REVERSE\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            case TYPE_ASCENDING:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                return \"ALPHABETICAL\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            case TYPE_DESCENDING:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                return \"ALPHABETICAL_REVERSE\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            case PRIORITY_ASCENDING:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                return \"PRIORITY\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            case PRIORITY_DESCENDING:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                return \"PRIORITY_REVERSE\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                return \"Not supposed to reach here\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": " * Specifies expected user input format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brebeek"
        },
        "content": "enum Order {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    START_ASCENDING, START_DESCENDING, END_ASCENDING, END_DESCENDING, TYPE_ASCENDING, TYPE_DESCENDING,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    PRIORITY_ASCENDING, PRIORITY_DESCENDING"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 47,
      "-": 25
    }
  },
  {
    "path": "src/main/java/com/typee/logic/parser/TabCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses the given {@code String} of arguments in the context of the TabCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * and returns an Tab Command object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TabCommandParser implements Parser\u003cTabCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public TabCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String tabName \u003d userInput.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tabName.equals(\"\") || userInput \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, TabCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            switch(tabName.toLowerCase()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            //Feel free to modify your tab name and respective Controller class together with your fxml file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            case \"engagement\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                return new TabCommand(new Tab(\"Engagement\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            case \"typinggame\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                return new TabCommand(new Tab(\"TypingGame\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            case \"report\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                return new TabCommand(new Tab(\"Report\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            case \"calendar\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                return new TabCommand(new Tab(\"Calendar\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                        String.format(\"Invalid tab name. Please specify a valid tab menu.\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 2,
      "nordic96": 17,
      "-": 23
    }
  },
  {
    "path": "src/main/java/com/typee/logic/parser/TypeeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypeeParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case TabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new TabCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 14,
      "brebeek": 12,
      "-": 64
    }
  },
  {
    "path": "src/main/java/com/typee/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/com/typee/model/EngagementList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.UniqueEngagementList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Wraps all data at the engagement-list level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Duplicates are not allowed (by .isConflictingWith comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class EngagementList implements ReadOnlyEngagementList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final UniqueEngagementList engagements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        engagements \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementList() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Creates an EngagementList using the Engagements in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementList(ReadOnlyEngagementList toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Replaces the contents of the engagement list with {@code engagements}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * {@code engagements} must not contain duplicate engagements."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setEngagements(List\u003cEngagement\u003e engagements) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.engagements.setEngagements(engagements);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Resets the existing data of this {@code EngagementList} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void resetData(ReadOnlyEngagementList newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        setEngagements(newData.getEngagementList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns true if an engagement with the same identity as {@code engagement}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * exists in the engagement list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean hasEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(engagement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return engagements.contains(engagement);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Adds an engagement to the engagement list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * The engagement must not already exist in the engagement list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void addEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        engagements.add(engagement);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Replaces the given engagement {@code target} in the list with {@code editedEngagement}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * {@code target} must exist in the engagement list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * The engagement identity of {@code editedEngagement} must not be the same"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * as another existing engagement in the engagement list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setEngagement(Engagement target, Engagement editedEngagement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(editedEngagement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        engagements.setEngagement(target, editedEngagement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Removes {@code key} from this {@code EngagementList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * {@code key} must exist in the engagement list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void removeEngagement(Engagement key) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        engagements.remove(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return engagements.asUnmodifiableObservableList().size() + \" engagements\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public ObservableList\u003cEngagement\u003e getEngagementList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return engagements.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                || (other instanceof EngagementList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                \u0026\u0026 engagements.equals(((EngagementList) other).engagements));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return engagements.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 30,
      "nordic96": 1,
      "lyskevin": 18,
      "-": 74
    }
  },
  {
    "path": "src/main/java/com/typee/model/HistoryManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.NullRedoableActionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.NullUndoableActionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * {@code EngagementList} with a list of its previous states."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class HistoryManager extends EngagementList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final List\u003cReadOnlyEngagementList\u003e historyList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private int versionPointer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public HistoryManager(ReadOnlyEngagementList initialList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        super(initialList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        versionPointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        historyList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        historyList.add(new EngagementList(initialList));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Reverts the list to its previous state."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void undo() throws NullUndoableActionException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (!isUndoable()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new NullUndoableActionException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        versionPointer--;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        resetData(historyList.get(versionPointer));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Reverts the list to its previously undone state."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void redo() throws NullRedoableActionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (!isRedoable()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new NullRedoableActionException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        versionPointer++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        resetData(historyList.get(versionPointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return versionPointer \u003e 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean isRedoable() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return versionPointer \u003c historyList.size() - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private void clearUpToNow() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        historyList.subList(versionPointer + 1, historyList.size()).clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Saves the current state of appointmentList and discards previous undone changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void saveState() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        clearUpToNow();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        historyList.add(new EngagementList(this));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        versionPointer++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (!(other instanceof HistoryManager)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        HistoryManager otherStatedAppointmentList \u003d (HistoryManager) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return super.equals(otherStatedAppointmentList)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                \u0026\u0026 versionPointer \u003d\u003d otherStatedAppointmentList.versionPointer;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 71,
      "lyskevin": 11
    }
  },
  {
    "path": "src/main/java/com/typee/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.NullRedoableActionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.NullUndoableActionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    Predicate\u003cEngagement\u003e PREDICATE_SHOW_ALL_ENGAGEMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns the user prefs\u0027 engagement list file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    Path getEngagementListFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets the user prefs\u0027 engagement list file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    void setEngagementListFilePath(Path engagementListFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Replaces engagement list data with the data in {@code typee}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    void setHistoryManager(ReadOnlyEngagementList historyManager);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /** Returns the engagement list */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    ReadOnlyEngagementList getEngagementList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * REDUNDANT."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns true if the engagement is in the engagement list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    boolean hasEngagement(Engagement engagement);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Deletes the given engagement."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * The engagement must exist in the engagement list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void deleteEngagement(Engagement target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Adds the given engagement."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * {@code engagement} must not already exist in the engagement list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void addEngagement(Engagement engagement);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Replaces the given engagement {@code target} with {@code editedEngagement}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * {@code target} must exist in the engagement list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * The engagement identity of {@code editedEngagement} must not be the same as"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * another existing engagement in the engagement list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void setEngagement(Engagement target, Engagement editedEngagement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /** Returns an unmodifiable view of the filtered engagement list */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    ObservableList\u003cEngagement\u003e getFilteredEngagementList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Updates the filter of the filtered engagement list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void updateFilteredEngagementList(Predicate\u003cEngagement\u003e predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    void updateSortedEngagementList(Comparator\u003cEngagement\u003e comparator);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ObservableList\u003cEngagement\u003e getSortedEngagementList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    boolean hasNoUndoableCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void undoEngagementList() throws NullUndoableActionException;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    boolean hasNoRedoableCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void saveEngagementList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void redoEngagementList() throws NullRedoableActionException;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 25,
      "nordic96": 1,
      "brebeek": 14,
      "lyskevin": 14,
      "-": 55
    }
  },
  {
    "path": "src/main/java/com/typee/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.NullRedoableActionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.NullUndoableActionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private final HistoryManager historyManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final FilteredList\u003cEngagement\u003e filteredEngagements;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private final SortedList\u003cEngagement\u003e sortedEngagements;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Initializes a ModelManager with the given engagement list and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public ModelManager(ReadOnlyEngagementList engagementList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CollectionUtil.requireAllNonNull(engagementList, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + engagementList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.historyManager \u003d new HistoryManager(engagementList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        filteredEngagements \u003d new FilteredList\u003c\u003e(this.historyManager.getEngagementList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        sortedEngagements \u003d new SortedList\u003c\u003e(filteredEngagements);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this(new EngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Path getEngagementListFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setEngagementListFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EngagementList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setHistoryManager(ReadOnlyEngagementList historyManager) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.historyManager.resetData(historyManager);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public ReadOnlyEngagementList getEngagementList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return historyManager;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean hasEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(engagement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return historyManager.hasEngagement(engagement);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void deleteEngagement(Engagement target) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        historyManager.removeEngagement(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void addEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        historyManager.addEngagement(engagement);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        updateFilteredEngagementList(PREDICATE_SHOW_ALL_ENGAGEMENTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setEngagement(Engagement target, Engagement editedEngagement) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedEngagement);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        historyManager.setEngagement(target, editedEngagement);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Engagement List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Engagement} backed by the internal list of"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * {@code typee}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public ObservableList\u003cEngagement\u003e getFilteredEngagementList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return filteredEngagements;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void updateFilteredEngagementList(Predicate\u003cEngagement\u003e predicate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        filteredEngagements.setPredicate(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void updateSortedEngagementList(Comparator\u003cEngagement\u003e comparator) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        sortedEngagements.setComparator(comparator);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public ObservableList\u003cEngagement\u003e getSortedEngagementList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return FXCollections.unmodifiableObservableList(sortedEngagements);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean hasNoUndoableCommand() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return !historyManager.isUndoable();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void undoEngagementList() throws NullUndoableActionException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        historyManager.undo();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean hasNoRedoableCommand() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return !historyManager.isRedoable();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void redoEngagementList() throws NullRedoableActionException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        historyManager.redo();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void saveEngagementList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        historyManager.saveState();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return historyManager.equals(other.historyManager)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 filteredEngagements.equals(other.filteredEngagements);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 32,
      "nordic96": 4,
      "brebeek": 45,
      "lyskevin": 14,
      "-": 103
    }
  },
  {
    "path": "src/main/java/com/typee/model/ReadOnlyEngagementList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Unmodifiable view of an engagement list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public interface ReadOnlyEngagementList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns an unmodifiable view of the list of engagements."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * This list will not contain any duplicate engagements."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    ObservableList\u003cEngagement\u003e getEngagementList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 7,
      "nordic96": 1,
      "lyskevin": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/java/com/typee/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/com/typee/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/Appointment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an {@code Appointment}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Appointment extends Engagement {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected Appointment(TimeSlot timeSlot,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                      AttendeeList attendees, Location location, String description, Priority priority) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementType getType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return EngagementType.APPOINTMENT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return String.format(\"Appointment of %s priority from %s to %s at %s.\", priority.toString(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                timeSlot.getStartTime().toString(), timeSlot.getEndTime().toString(), location.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 22,
      "lyskevin": 5
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/AttendeeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a list of people attending an engagement."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class AttendeeList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"AttendeeList should be a list of persons.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final List\u003cPerson\u003e attendees;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructs an {@code AttendeeList} given a {@code List} of attendees."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param attendees list of attendees."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public AttendeeList(List\u003cPerson\u003e attendees) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if a {@code String} represents a valid {@code AttendeeList}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param string {@code String} representing an {@code AttendeeList}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the {@code String} is a valid representation of an {@code AttendeeList}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean isValid(String string) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final String stringWithoutBrackets \u003d string.substring(1, string.length() - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (stringWithoutBrackets.isBlank()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return validateNames(stringWithoutBrackets);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the list of people have valid names."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param stringWithoutBrackets {@code String} representing a list of people."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if all the names are valid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static boolean validateNames(String stringWithoutBrackets) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Arrays.stream(stringWithoutBrackets.split(\",\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .map(person -\u003e person.trim())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .allMatch(name -\u003e Name.isValidName(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns an {@code AttendeeList} made from the given list of attendees."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Assumes that the given {@code String} is a valid representation of attendees."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param attendees {@code String} representation of attendees."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the corresponding {@code AttendeeList}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static AttendeeList getListGivenValidInput(String attendees) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final String stringWithoutBrackets \u003d attendees.substring(1, attendees.length() - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPerson\u003e listOfAttendees \u003d getListOfPeople(stringWithoutBrackets);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new AttendeeList(listOfAttendees);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a list of people given a {@code String} input representing a list of people."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param stringWithoutBrackets {@code String} representation of a list of people."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return List of people."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static List\u003cPerson\u003e getListOfPeople(String stringWithoutBrackets) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Arrays.stream(stringWithoutBrackets.split(\",\"))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    .map(str -\u003e str.trim())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    .map(name -\u003e new Person(new Name(name)))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a copy of the {@code AttendeeList}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return {@code AttendeeList} with the same content."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public AttendeeList copy() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPerson\u003e copyOfAttendees \u003d attendees.stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .map(person -\u003e new Person(person.getName()))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new AttendeeList(copyOfAttendees);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return attendees.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // short-circuit"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (o instanceof AttendeeList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            AttendeeList newAttendeeList \u003d (AttendeeList) o;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return attendees.equals(newAttendeeList.attendees);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return attendees.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 112
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/Engagement.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a generalization of meetings, interviews and appointments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public abstract class Engagement {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"The end time has to occur after the start time.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected TimeSlot timeSlot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected AttendeeList attendees;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected Location location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected Priority priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructs an engagement."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param timeSlot time slot of the engagement."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param attendees list of people attending."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location location of the engagement."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param description description of the engagement."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param priority priority level of the engagement."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected Engagement(TimeSlot timeSlot,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                         AttendeeList attendees, Location location, String description, Priority priority) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a {@code Meeting}, {@code Interview}, or {@code Appointment} with the given fields."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param type type of engagement."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param timeSlot time slot."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param attendees list of people attending."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location location of engagement."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param description description of the engagement."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param priority priority level of the engagement."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return an {@code Engagement} with the corresponding fields."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidTimeException if {@code LocalDateTime startTime} occurs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * after or during {@code LocalDateTime endTime}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Engagement of(EngagementType type,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                TimeSlot timeSlot,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                AttendeeList attendees, Location location, String description,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                Priority priority) throws InvalidTimeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (timeSlot.isStartAfterEnd()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidTimeException(MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return makeEngagement(type, timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a {@code Meeting}, {@code Interview}, or {@code Appointment} with the given fields."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param type type of engagement."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param timeSlot {@code TimeSlot} of the engagement."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param attendees list of people attending."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location location of engagement."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param description description of the engagement."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param priority priority level of the engagement."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return an {@code Engagement} with the corresponding fields."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static Engagement makeEngagement(EngagementType type, TimeSlot timeSlot,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                             AttendeeList attendees, Location location,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                             String description, Priority priority) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (type.name().equalsIgnoreCase(\"meeting\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Meeting(timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (type.name().equalsIgnoreCase(\"interview\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Interview(timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Appointment(timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the start time occurs after or during the end time."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the start time is during or after the end time."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static boolean isStartAfterEnd(LocalDateTime startTime, LocalDateTime endTime) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return startTime.isAfter(endTime) || startTime.isEqual(endTime);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public TimeSlot getTimeSlot() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return timeSlot;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setTimeSlot(TimeSlot timeSlot) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(timeSlot);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public AttendeeList getAttendees() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return attendees.copy();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setAttendees(AttendeeList attendees) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(attendees);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void setLocation(Location location) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public abstract EngagementType getType();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if this {@code Engagement} clashes with another one."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param engagement the {@code Engagement} to check for a clash."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if there is a clash."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isConflictingWith(Engagement engagement) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return EngagementConflictChecker.areConflicting(this, engagement);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // short-circuit."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (o instanceof Engagement) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // type-cast Object and check for field equality."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Engagement otherEngagement \u003d (Engagement) o;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return isSameEngagement(otherEngagement);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the given {@code Engagement} is logically equal to the caller {@code Engagement}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param otherEngagement {@code Engagement} to check equality with."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the engagements are equal."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean isSameEngagement(Engagement otherEngagement) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (otherEngagement \u003d\u003d this) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return otherEngagement !\u003d null"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                \u0026\u0026 otherEngagement.location.equals(location)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 otherEngagement.attendees.equals(attendees)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 otherEngagement.description.equals(description)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 otherEngagement.timeSlot.equals(timeSlot)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                \u0026\u0026 otherEngagement.priority.equals(priority)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                \u0026\u0026 otherEngagement.getType().equals(this.getType());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Objects.hash(timeSlot, location, description, attendees, priority);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 134,
      "nordic96": 45,
      "lyskevin": 11
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/EngagementConflictChecker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Helper class that helps to check if engagements are conflictingly scheduled."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class EngagementConflictChecker {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the given {@code Engagement firstEngagement} clashes with {@code Engagement secondEngagement}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param firstEngagement first {@code Engagement}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param secondEngagement second {@code Engagement}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the engagements conflict."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean areConflicting(Engagement firstEngagement, Engagement secondEngagement) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (areAtDifferentLocations(firstEngagement, secondEngagement)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return haveTimeOverlap(firstEngagement.getTimeSlot(), secondEngagement.getTimeSlot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if two engagements have a time overlap."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param firstTimeSlot first {@code TimeSlot}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param secondTimeSlot second {@code TimeSlot}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the times overlap."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static boolean haveTimeOverlap(TimeSlot firstTimeSlot, TimeSlot secondTimeSlot) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return firstTimeSlot.overlapsWith(secondTimeSlot);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the given engagements are held at different locations"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param firstEngagement the first {@code Engagement}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param secondEngagement the second {@code Engagement}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the the engagements are held at different locations."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static boolean areAtDifferentLocations(Engagement firstEngagement, Engagement secondEngagement) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return !firstEngagement.getLocation().equals(secondEngagement.getLocation());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 45
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/EngagementType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the different types of {@code Engagements}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public enum EngagementType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    MEETING,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    INTERVIEW,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    APPOINTMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the possible values an {@code EngagementType} can assume."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return a {@code String} containing the permitted conformations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static String getMessageConstraints() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return \"An engagement has to be one of meeting, interview or appointment.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if a {@code String} represents a valid {@code EngagementType}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param string {@code String} to be checked for validity."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if {@String string} is a valid {@code EngagementType}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean isValid(String string) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return string.equalsIgnoreCase(\"meeting\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || string.equalsIgnoreCase(\"interview\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || string.equalsIgnoreCase(\"appointment\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns an {@code EngagementType} constructed from the input string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param engagementType {@code String} representing an {@code EngagementType}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the corresponding {@code EngagementType}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IllegalArgumentException if {@code String engagementType} is not a valid {@code EngagementType}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static EngagementType of(String engagementType) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (engagementType.equalsIgnoreCase(EngagementType.MEETING.name())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return EngagementType.MEETING;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (engagementType.equalsIgnoreCase(EngagementType.INTERVIEW.name())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return EngagementType.INTERVIEW;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (engagementType.equalsIgnoreCase(EngagementType.APPOINTMENT.name())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return EngagementType.APPOINTMENT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 49
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/Interview.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an {@code Interview}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Interview extends Engagement {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected Interview(TimeSlot timeSlot,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                      AttendeeList attendees, Location location, String description, Priority priority) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementType getType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return EngagementType.INTERVIEW;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return String.format(\"Interview of %s priority from %s to %s at %s.\", priority.toString(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                timeSlot.getStartTime().toString(), timeSlot.getEndTime().toString(), location.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 22,
      "lyskevin": 5
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/Location.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the location of an engagement."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Locations cannot be blank.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructs a {@code Location}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Retrieves the location of the engagement."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return location in the form of a {@code String}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Sets the location to the input location."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location a valid location."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setLocation(String location) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the {@code Location} name is valid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param string {@code String} to be checked."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the {@code String} is a valid {@code Location}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean isValid(String string) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return !string.isBlank();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // short-circuit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (o instanceof Location) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // check if objects represent the same locations."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return location.equalsIgnoreCase(((Location) o).location);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Objects.hash(location);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 73
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/Meeting.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a {@code Meeting}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Meeting extends Engagement {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected Meeting(TimeSlot timeSlot,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                      AttendeeList attendees, Location location, String description, Priority priority) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementType getType() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return EngagementType.MEETING;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return String.format(\"Meeting of %s priority from %s to %s at %s.\", priority.toString(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                timeSlot.getStartTime().toString(), timeSlot.getEndTime().toString(), location.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 23,
      "lyskevin": 5
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Enumeration for prioritising the Engagement class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    LOW,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    MEDIUM,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    HIGH,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    NONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Priority can only be low, medium or high!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the corresponding {@code Priority} value from the input {@code String}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param priority {@code String} representing priority."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the corresponding {@code Priority}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IllegalArgumentException if the {@String priority} is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Priority of(String priority) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (priority.equalsIgnoreCase(Priority.LOW.name())) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return Priority.LOW;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (priority.equalsIgnoreCase(Priority.MEDIUM.name())) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return Priority.MEDIUM;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (priority.equalsIgnoreCase(Priority.HIGH.name())) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return Priority.HIGH;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (priority.equalsIgnoreCase(Priority.NONE.name())) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return Priority.NONE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the {@code String string} is a valid priority level."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param string priority level."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the {@code String string} represents a valid priority level."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean isValid(String string) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return string.equalsIgnoreCase(\"low\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || string.equalsIgnoreCase(\"medium\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || string.equalsIgnoreCase(\"high\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || string.equalsIgnoreCase(\"none\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the constraints that a {@code String} representing a {@code Priority} should adhere to."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return constraint message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static String getMessageConstraints() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 55
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/TimeSlot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the time slot during which an engagement is held."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class TimeSlot {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The start and end times should conform to the DD/MM/YYYY HHMM\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" format. The dates and times must be semantically valid and\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" the start time should occur before the end time\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_NON_NULL_CONSTRAINT \u003d \"%s should be non-null.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructs a {@code TimeSlot} from a given {@code LocalDateTime startTime}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * and {@code LocalDateTime endTime}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param startTime starting time of the time slot."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param endTime ending time of the time slot."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public TimeSlot(LocalDateTime startTime, LocalDateTime endTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assert startTime !\u003d null \u0026\u0026 endTime !\u003d null : String.format(MESSAGE_NON_NULL_CONSTRAINT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"The start and end times\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a {@code TimeSlot} constructed from a {@code String}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param timeSlot String representation of the time-slot."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return a {@code TimeSlot}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static TimeSlot of(String timeSlot) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String[] tokens \u003d tokenize(timeSlot);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        TimeSlot newTimeSlot \u003d makeTimeSlotFromTokens(tokens);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return newTimeSlot;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setStartTime(LocalDateTime startTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assert startTime !\u003d null : String.format(MESSAGE_NON_NULL_CONSTRAINT, \"The start time\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public LocalDateTime getEndTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setEndTime(LocalDateTime endTime) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assert endTime !\u003d null : String.format(MESSAGE_NON_NULL_CONSTRAINT, \"The end time\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the start occurs simultaneously with the end, or after the end."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return false if start is before end."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isStartAfterEnd() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return startTime.isAfter(endTime) || startTime.equals(endTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the {@code TimeSlot} overlaps with the input {@code TimeSlot}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param timeSlot timeSlot to check overlap with."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if there is an overlap."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean overlapsWith(TimeSlot timeSlot) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (this.getStartTime().isBefore(timeSlot.getStartTime())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return this.getEndTime().isAfter(timeSlot.getStartTime());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (timeSlot.getStartTime().isBefore(this.getStartTime())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return timeSlot.getEndTime().isAfter(this.getStartTime());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the {@code String} representation of a {@code TimeSlot} is valid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param timeSlot {@code String} representation of a {@code TimeSlot}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the string form is valid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean isValid(String timeSlot) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            String[] tokens \u003d tokenize(timeSlot);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            TimeSlot newTimeSlot \u003d makeTimeSlotFromTokens(tokens);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return !newTimeSlot.startTime.isAfter(newTimeSlot.endTime);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a {@code TimeSlot} constructed from {@code String} tokens."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tokens String tokens containing start and end times."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the corresponding {@code TimeSlot}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws DateTimeException if the times are invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static TimeSlot makeTimeSlotFromTokens(String[] tokens) throws DateTimeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd/HH:mm\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(tokens[0].replace(\"T\", \"/\"), formatter);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime endTime \u003d LocalDateTime.parse(tokens[1].replace(\"T\", \"/\"), formatter);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new TimeSlot(startTime, endTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static String[] tokenize(String timeSlot) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return timeSlot.split(\" - \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return startTime.toString() + \" - \" + endTime.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // short-circuit"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (o instanceof TimeSlot) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            TimeSlot newTimeSlot \u003d (TimeSlot) o;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return newTimeSlot.startTime.equals(startTime) \u0026\u0026 newTimeSlot.endTime.equals(endTime);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Objects.hash(startTime, endTime);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 140
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/UniqueEngagementList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.exceptions.DuplicateEngagementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.exceptions.EngagementNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * A list of engagements that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * An engagement is considered unique by comparing using {@code Engagement#isSameEngagement(Engagement)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * As such, adding and updating of engagements uses {@code Engagement#isSameEngagement(Engagement)}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * for equality so as to ensure that the engagement being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * unique in terms of details in the UniqueEngagementList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * However, the removal of an engagement uses Engagement#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * as to ensure that the engagement with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * @see Engagement#isSameEngagement(Engagement)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class UniqueEngagementList implements Iterable\u003cEngagement\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final ObservableList\u003cEngagement\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final ObservableList\u003cEngagement\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns true if the list contains an equivalent engagement as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean contains(Engagement toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isConflictingWith);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Adds an engagement to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * The engagement must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void add(Engagement toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            throw new DuplicateEngagementException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Replaces the engagement {@code target} in the list with {@code editedEngagement}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * The details of {@code editedEngagement} must not be the same as another existing engagement in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setEngagement(Engagement target, Engagement editedEngagement) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedEngagement);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            throw new EngagementNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!target.isConflictingWith(editedEngagement) \u0026\u0026 contains(editedEngagement)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            throw new DuplicateEngagementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        internalList.set(index, editedEngagement);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Removes the equivalent engagement from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * The engagement must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void remove(Engagement toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            throw new EngagementNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setEngagements(UniqueEngagementList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Replaces the contents of this list with {@code engagements}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * {@code engagements} must not contain duplicate engagements."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setEngagements(List\u003cEngagement\u003e engagements) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        CollectionUtil.requireAllNonNull(engagements);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!engagementsAreUnique(engagements)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            throw new DuplicateEngagementException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        internalList.setAll(engagements);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public ObservableList\u003cEngagement\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Iterator\u003cEngagement\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || (other instanceof UniqueEngagementList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueEngagementList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns true if {@code engagements} contains only unique engagements."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean engagementsAreUnique(List\u003cEngagement\u003e engagements) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        for (int i \u003d 0; i \u003c engagements.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            for (int j \u003d i + 1; j \u003c engagements.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                if (engagements.get(i).isConflictingWith(engagements.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 30,
      "nordic96": 1,
      "lyskevin": 25,
      "-": 83
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/exceptions/DuplicateEngagementException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.model.engagement.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Signals that the operation will result in duplicate Engagements"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * (Engagements are considered duplicates if they have the same fields)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class DuplicateEngagementException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public DuplicateEngagementException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        super(\"Operation would result in duplicate engagements\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 11
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/exceptions/EngagementNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.model.engagement.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Signals that the operation is unable to find the specified engagement."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class EngagementNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 6
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/exceptions/InvalidTimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an exceptional situation in which an engagement\u0027s start time occurs after or during its end time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class InvalidTimeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructs an {@code InvalidTimeException}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param message error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public InvalidTimeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 16
    }
  },
  {
    "path": "src/main/java/com/typee/model/person/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Tests that an {@code Engagement}\u0027s description matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cEngagement\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean test(Engagement engagement) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(engagement.getDescription(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 32
    }
  },
  {
    "path": "src/main/java/com/typee/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Represents a Person\u0027s name in an engagement."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 4,
      "brebeek": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/com/typee/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Represents a Person in an engagement."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Person(Name name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CollectionUtil.requireAllNonNull(name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 5,
      "nordic96": 4,
      "brebeek": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/com/typee/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/typee/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/com/typee/model/report/Report.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Report class which contains the Engagement"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class Report {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 6
    }
  },
  {
    "path": "src/main/java/com/typee/model/util/EngagementComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Specifies and implements comparators for each comparable property of {@code Engagement}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public enum EngagementComparator implements Comparator\u003cEngagement\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    START_TIME {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return o1.getTimeSlot().getStartTime().compareTo(o2.getTimeSlot().getStartTime());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    START_TIME_REVERSE {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return START_TIME.compare(o2, o1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    END_TIME {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return o1.getTimeSlot().getEndTime().compareTo(o2.getTimeSlot().getEndTime());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    END_TIME_REVERSE {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return END_TIME.compare(o2, o1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ALPHABETICAL {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return o1.getDescription().compareTo(o2.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ALPHABETICAL_REVERSE {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return ALPHABETICAL.compare(o2, o1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    PRIORITY {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return o1.getPriority().compareTo(o2.getPriority());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    PRIORITY_REVERSE {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return PRIORITY.compare(o2, o1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PROPERTY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Please enter a proper ordering method. Please try: e.g. sort start_ascending\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static EngagementComparator getComparator(String order)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throws IllegalArgumentException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return EngagementComparator.valueOf(order.toUpperCase());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "brebeek": 60,
      "-": 6
    }
  },
  {
    "path": "src/main/java/com/typee/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.AttendeeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.EngagementType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.TimeSlot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Contains utility methods for populating {@code EngagementList} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Engagement[] getSampleEngagements() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Engagement[]{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    Engagement.of(EngagementType.MEETING,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                            new TimeSlot(LocalDateTime.now(), LocalDateTime.now()),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                            new AttendeeList(Arrays.asList(new Person[]{new Person(new Name(\"Uggi\"))})),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                            new Location(\"SR-10\"), \"Test\", Priority.HIGH)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Engagement[] {};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static ReadOnlyEngagementList getSampleEngagementList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList sampleEngagementList \u003d new EngagementList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        for (Engagement sampleEngagement : getSampleEngagements()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            sampleEngagementList.addEngagement(sampleEngagement);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return sampleEngagementList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 21,
      "nordic96": 3,
      "lyskevin": 7,
      "-": 11
    }
  },
  {
    "path": "src/main/java/com/typee/storage/EngagementListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Represents a storage for {@link EngagementList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public interface EngagementListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    Path getEngagementListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns EngagementList data as a {@link ReadOnlyEngagementList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    Optional\u003cReadOnlyEngagementList\u003e readEngagementList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @see #getEngagementListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    Optional\u003cReadOnlyEngagementList\u003e readEngagementList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Saves the given {@link ReadOnlyEngagementList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param engagementList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    void saveEngagementList(ReadOnlyEngagementList engagementList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @see #saveEngagementList(ReadOnlyEngagementList) (ReadOnlyEngagementList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    void saveEngagementList(ReadOnlyEngagementList engagementList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 46
    }
  },
  {
    "path": "src/main/java/com/typee/storage/JsonAdaptedEngagement.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.AttendeeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.EngagementType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.TimeSlot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Jackson-friendly version of {@link Engagement}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "class JsonAdaptedEngagement {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Engagement\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String EMPTY_LIST \u003d \"[]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final String engagementType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final String timeSlot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final String attendees;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Constructs a {@code JsonAdaptedEngagement} with the given person details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public JsonAdaptedEngagement(@JsonProperty(\"type\") String type, @JsonProperty(\"timeSlot\") String timeSlot,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                 @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                 @JsonProperty(\"attendees\") String attendees,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                 @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                 @JsonProperty(\"priority\") String priority) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.engagementType \u003d type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Converts a given {@code Engagement} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public JsonAdaptedEngagement(Engagement source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        engagementType \u003d source.getClass().getSimpleName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        timeSlot \u003d source.getTimeSlot().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        location \u003d source.getLocation().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        attendees \u003d source.getAttendees().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        priority \u003d source.getPriority().name();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Converts this Jackson-friendly adapted engagement object into the model\u0027s {@code Engagement} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted engagement."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Engagement toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final EngagementType modelType \u003d validateAndGetEngagementType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final TimeSlot modelTimeSlot \u003d validateAndGetTimeSlot();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final Location modelLocation \u003d validateAndGetLocation();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final AttendeeList modelAttendees \u003d validateAndGetAttendees();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final Priority modelPriority \u003d validateAndGetPriority();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final String modelDescription \u003d validateAndGetDescription();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return Engagement.of(modelType, modelTimeSlot,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    modelAttendees, modelLocation, modelDescription, modelPriority);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the description of an {@code Engagement} following validation."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return description."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String validateAndGetDescription() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the {@code Priority} of an {@code Engagement} following validation."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the {@code Priority}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IllegalValueException if the json\u0027s priority field is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Priority validateAndGetPriority() throws IllegalValueException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!Priority.isValid(priority)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(Priority.getMessageConstraints());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Priority.of(priority);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the {@code AttendeeList} of an {@code Engagement} following validation."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the {@code AttendeeList}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IllegalValueException if the json\u0027s attendees field is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private AttendeeList validateAndGetAttendees() throws IllegalValueException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (attendees \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    AttendeeList.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!AttendeeList.isValid(attendees)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    AttendeeList.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return AttendeeList.getListGivenValidInput(attendees);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the {@code Location} of an {@code Engagement} following validation."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the {@code Location} of the {@code Engagement}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IllegalValueException if the json\u0027s location field is invalid."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Location validateAndGetLocation() throws IllegalValueException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!Location.isValid(location)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new Location(location);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the {@code EngagementType} of an {@code Engagement} following validation."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the {@code EngagementType}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IllegalValueException if the json\u0027s engagementType field is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private EngagementType validateAndGetEngagementType() throws IllegalValueException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (engagementType \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    EngagementType.class.getSimpleName()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!EngagementType.isValid(engagementType)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(EngagementType.getMessageConstraints());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return EngagementType.of(engagementType);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the {@code TimeSlot} of an {@code Engagement} following validation."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the {@code TimeSlot}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IllegalValueException if the times are invalid."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private TimeSlot validateAndGetTimeSlot() throws IllegalValueException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (timeSlot \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    TimeSlot.class.getSimpleName()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!TimeSlot.isValid(timeSlot)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(TimeSlot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return TimeSlot.of(timeSlot);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 138,
      "nordic96": 2,
      "brebeek": 7,
      "lyskevin": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/com/typee/storage/JsonEngagementListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * A class to access EngagementList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class JsonEngagementListStorage implements EngagementListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonEngagementListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public JsonEngagementListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Path getEngagementListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Optional\u003cReadOnlyEngagementList\u003e readEngagementList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return readEngagementList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Similar to {@link #readEngagementList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Optional\u003cReadOnlyEngagementList\u003e readEngagementList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Optional\u003cJsonSerializableEngagementList\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                filePath, JsonSerializableEngagementList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void saveEngagementList(ReadOnlyEngagementList engagementList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        saveEngagementList(engagementList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Similar to {@link #saveEngagementList(ReadOnlyEngagementList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void saveEngagementList(ReadOnlyEngagementList engagementList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        requireNonNull(engagementList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableEngagementList(engagementList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 6,
      "lyskevin": 18,
      "-": 56
    }
  },
  {
    "path": "src/main/java/com/typee/storage/JsonSerializableEngagementList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * An Immutable EngagementList that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "class JsonSerializableEngagementList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENGAGEMENT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \"Engagements list contains duplicate engagements(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final List\u003cJsonAdaptedEngagement\u003e engagements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Constructs a {@code JsonSerializableEngagementList} with the given engagements."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public JsonSerializableEngagementList(@JsonProperty(\"engagements\") List\u003cJsonAdaptedEngagement\u003e engagements) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.engagements.addAll(engagements);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Converts a given {@code ReadOnlyEngagementList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableEngagementList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public JsonSerializableEngagementList(ReadOnlyEngagementList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagements.addAll(source.getEngagementList().stream().map(JsonAdaptedEngagement::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Converts this address book into the model\u0027s {@code EngagementList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList engagementList \u003d new EngagementList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        for (JsonAdaptedEngagement jsonAdaptedEngagement : engagements) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            Engagement engagement \u003d jsonAdaptedEngagement.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            if (engagementList.hasEngagement(engagement)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            engagementList.addEngagement(engagement);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagementList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 1,
      "lyskevin": 60
    }
  },
  {
    "path": "src/main/java/com/typee/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/com/typee/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public interface Storage extends EngagementListStorage, TypeeStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    Path getEngagementListFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    Optional\u003cReadOnlyEngagementList\u003e readEngagementList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    void saveEngagementList(ReadOnlyEngagementList engagementList) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTab\u003e getTabList() throws DataConversionException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 4,
      "lyskevin": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/com/typee/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Manages storage of EngagementList data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private EngagementListStorage engagementListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    //Adding TypeeStorage unit"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypeeStorage typeeStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public StorageManager(EngagementListStorage engagementListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.engagementListStorage \u003d engagementListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public StorageManager(EngagementListStorage engagementListStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                          TypeeStorage typeeStorage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.engagementListStorage \u003d engagementListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.typeeStorage \u003d typeeStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EngagementList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Path getEngagementListFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagementListStorage.getEngagementListFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Optional\u003cReadOnlyEngagementList\u003e readEngagementList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return readEngagementList(engagementListStorage.getEngagementListFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Optional\u003cReadOnlyEngagementList\u003e readEngagementList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagementListStorage.readEngagementList(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void saveEngagementList(ReadOnlyEngagementList engagementList) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        saveEngagementList(engagementList, engagementListStorage.getEngagementListFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void saveEngagementList(ReadOnlyEngagementList engagementList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementListStorage.saveEngagementList(engagementList, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TYPEE methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTab\u003e getTabList() throws DataConversionException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Fetching tab list data from text file.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return typeeStorage.getTabList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 5,
      "brebeek": 1,
      "lyskevin": 18,
      "-": 72
    }
  },
  {
    "path": "src/main/java/com/typee/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/com/typee/ui/AppointmentWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": " * Controller class for Appointment Window"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class AppointmentWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public static final String FXML \u003d \"EngagementListPanel.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public AppointmentWindow() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 14
    }
  },
  {
    "path": "src/main/java/com/typee/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nordic96"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 6,
      "-": 75
    }
  },
  {
    "path": "src/main/java/com/typee/ui/EngagementCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class EngagementCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on EngagementList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public final Engagement engagement;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label locationOfEngagement;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label attendees;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public EngagementCard(Engagement engagement, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.engagement \u003d engagement;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        type.setText(engagement.getClass().getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        startTime.setText(engagement.getTimeSlot().getStartTime().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        endTime.setText(engagement.getTimeSlot().getEndTime().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        locationOfEngagement.setText(engagement.getLocation().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        priority.setText(engagement.getPriority().name());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        attendees.setText(engagement.getAttendees().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        description.setText(engagement.getDescription());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        if (!(other instanceof EngagementCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        EngagementCard card \u003d (EngagementCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 engagement.equals(card.engagement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 25,
      "nordic96": 5,
      "lyskevin": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/com/typee/ui/EngagementListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class EngagementListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public static final String FXML \u003d \"EngagementListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EngagementListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private ListView\u003cEngagement\u003e engagementListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public EngagementListPanel(ObservableList\u003cEngagement\u003e engagementList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        engagementListView.setItems(engagementList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        engagementListView.setCellFactory(listView -\u003e new EngagementListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class EngagementListViewCell extends ListCell\u003cEngagement\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        protected void updateItem(Engagement engagement, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            super.updateItem(engagement, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            if (empty || engagement \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                setGraphic(new EngagementCard(engagement, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 8,
      "nordic96": 10,
      "-": 29
    }
  },
  {
    "path": "src/main/java/com/typee/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 100
    }
  },
  {
    "path": "src/main/java/com/typee/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.ui.calendar.CalendarWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.ui.game.StartWindow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private EngagementListPanel engagementListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //Tab related attributes."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private TabPanel tabPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cTab\u003e tabList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //Added tab panel by Ko Gi Hun 8/10/19"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane tabPanelPlaceHolder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //main window VBox"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox mainWindow;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label lblWindowTitle;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure tab list generated from json"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tabList \u003d logic.getTabList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() throws DataConversionException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        lblWindowTitle.setText(\"Engagement Window\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        engagementListPanel \u003d new EngagementListPanel(logic.getSortedEngagementList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        mainWindow.getChildren().add(engagementListPanel.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        //adding tab panel holder"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        tabPanel \u003d new TabPanel(tabList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        tabPanelPlaceHolder.getChildren().add(tabPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getEngagementListFilePath());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Switch the window to the {@code Tab} specified."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleTabSwitch(Tab tabInput) throws IOException, CommandException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Parent root \u003d tabInput.getController().getRoot();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.getChildren().clear();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        mainWindow.getChildren().add(root);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        lblWindowTitle.setText(tabInput.getName() + \" Window\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public EngagementListPanel getEngagementListPanel() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return engagementListPanel;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isTabCommand()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                Tab tab \u003d commandResult.getTab();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                handleTabSwitch(fetchTabInformation(tab.getName()));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Fetches tab information from the tab menu list to the tab retrived after {@code TabCommand}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private Tab fetchTabInformation(String tabName) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Tab tabToReturn \u003d new Tab();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        for (Tab tabInList : tabList) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            if (tabInList.getName().equals(tabName)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                tabToReturn \u003d tabInList;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                logger.info(\"tab matches: \" + tabToReturn);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        switch (tabName) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        case \"Calendar\":"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            CalendarWindow calendarWindow \u003d new CalendarWindow();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            calendarWindow.setLogic(logic);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            calendarWindow.populateCalendar();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            tabToReturn.setController(calendarWindow);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        case \"TypingGame\":"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            tabToReturn.setController(new StartWindow());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        case \"Report\":"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            tabToReturn.setController(new ReportWindow());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        case \"Engagement\":"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            tabToReturn.setController(new EngagementListPanel(logic.getSortedEngagementList()));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        logger.info(\"tab after fetch: \" + tabToReturn);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return tabToReturn;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 2,
      "uggi121": 9,
      "nordic96": 42,
      "brebeek": 2,
      "lyskevin": 6,
      "-": 211
    }
  },
  {
    "path": "src/main/java/com/typee/ui/ReportWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": " * Controller class for Report Window."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class ReportWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public static final String FXML \u003d \"ReportWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private Label lblStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private Button btnTest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public ReportWindow() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private void setTextForLabel(MouseEvent event) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        lblStatus.setText(\"Testing report window\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 34
    }
  },
  {
    "path": "src/main/java/com/typee/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/com/typee/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/com/typee/ui/Tab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Tab component for Typee Ui."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tab {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private String url;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private UiPart\u003cRegion\u003e controller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tab() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tab(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public Tab(String name, String url, UiPart\u003cRegion\u003e controller) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.controller \u003d controller;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUrl() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return url;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUrl(String url) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public UiPart\u003cRegion\u003e getController() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return controller;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void setController(UiPart\u003cRegion\u003e controller) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.controller \u003d controller;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return name + \":(\" + url + \") controller: \" + controller;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 18,
      "-": 36
    }
  },
  {
    "path": "src/main/java/com/typee/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/com/typee/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/typee_icon.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/com/typee/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 87
    }
  },
  {
    "path": "src/main/java/com/typee/ui/calendar/CalendarWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * The calendar window."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Solution below adapted from https://github.com/SirGoose3432/javafx-calendar"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class CalendarWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String FXML \u003d \"CalendarWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final String FIRST_DAY_TO_DISPLAY \u003d \"SUNDAY\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int FIRST_DATE_OF_MONTH \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int MAXIMUM_NUMBER_OF_DAYS_PER_MONTH \u003d 5;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int NUMBER_OF_DAYS_IN_A_WEEK \u003d 7;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private GridPane dateDisplayGrid;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Text calendarTitle;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private List\u003cEngagement\u003e engagementList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private List\u003cStackPane\u003e allCalendarDays;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private YearMonth currentDisplayedYearMonth;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Constructs a calendar window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public CalendarWindow() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        allCalendarDays \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns this calendar window\u0027s logic component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return This calendar window\u0027s logic component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Logic getLogic() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets this calendar window\u0027s logic component to the specified logic instance."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param logic The specified logic instance."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setLogic(Logic logic) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Populates the calendar with the information to be displayed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void populateCalendar() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        for (Engagement engagement : logic.getFilteredEngagementList()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            engagementList.add(engagement);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        currentDisplayedYearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        initializeDateDisplayGrid();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        populateCalendarWithSpecifiedMonth(currentDisplayedYearMonth);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Initializes the date display grid with the current month."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void initializeDateDisplayGrid() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        for (int i \u003d 0; i \u003c MAXIMUM_NUMBER_OF_DAYS_PER_MONTH; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            for (int j \u003d 0; j \u003c NUMBER_OF_DAYS_IN_A_WEEK; j++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                StackPane individualDateStackPane \u003d new IndividualDatePane().getIndividualDateStackPane();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                dateDisplayGrid.add(individualDateStackPane, j, i);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                allCalendarDays.add(individualDateStackPane);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Populates the calendar based on the specified {@code YearMonth}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param yearMonth The specified {@code YearMonth}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void populateCalendarWithSpecifiedMonth(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonth(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                FIRST_DATE_OF_MONTH);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        while (!calendarDate.getDayOfWeek().toString().equals(FIRST_DAY_TO_DISPLAY)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            calendarDate \u003d calendarDate.minusDays(1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        for (StackPane individualDateStackPane : allCalendarDays) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            if (individualDateStackPane.getChildren().size() \u003e 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                individualDateStackPane.getChildren().clear();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            Text dateText \u003d new Text(calendarDate.getDayOfMonth() + \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            StackPane.setAlignment(dateText, Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            individualDateStackPane.getChildren().add(dateText);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            for (Engagement engagement : engagementList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                LocalDateTime startDateTime \u003d engagement.getTimeSlot().getStartTime();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                if (startDateTime.getDayOfMonth() \u003d\u003d calendarDate.getDayOfMonth()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                        \u0026\u0026 startDateTime.getMonth().equals(calendarDate.getMonth())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                        \u0026\u0026 startDateTime.getYear() \u003d\u003d calendarDate.getYear()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    Text appointmentDescription \u003d new Text(engagement.getDescription());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    StackPane.setAlignment(appointmentDescription, Pos.CENTER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    individualDateStackPane.getChildren().add(appointmentDescription);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        calendarTitle.setText(currentDisplayedYearMonth.getMonth().toString() + \" \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                + currentDisplayedYearMonth.getYear());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Populates the calendar with information about the next month."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void populateCalendarWithNextMonth() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        currentDisplayedYearMonth \u003d currentDisplayedYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        populateCalendarWithSpecifiedMonth(currentDisplayedYearMonth);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Populates the calendar with information about the previous month."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void populateCalendarWithPreviousMonth() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        currentDisplayedYearMonth \u003d currentDisplayedYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        populateCalendarWithSpecifiedMonth(currentDisplayedYearMonth);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "lyskevin": 147
    }
  },
  {
    "path": "src/main/java/com/typee/ui/calendar/IndividualDatePane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Represents an individual date pane in the calendar window."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class IndividualDatePane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final String FXML \u003d \"IndividualDatePane.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private StackPane individualDatePane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Constructs an individual date pane for use in the calendar window."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public IndividualDatePane() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns the stackpane that represents this individual date pane."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return The stackpane that represents this individual date pane."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public StackPane getIndividualDateStackPane() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return individualDatePane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 39
    }
  },
  {
    "path": "src/main/java/com/typee/ui/game/GameBody.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.ui.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.game.Player;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.animation.AnimationTimer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Controller class which handles the part of the game window that has moving words which player can type."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class GameBody extends UiPart\u003cPane\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final String FXML \u003d \"GameBody.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private AnimationTimer animationTimer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private double fallingRate \u003d 2.0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public GameBody(Player player) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.player \u003d player;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        loopWords();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Creates a loop of falling words."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void loopWords() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        animationTimer \u003d new AnimationTimer() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            private long lastUpdate \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            public void handle(long now) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                if (now - lastUpdate \u003e\u003d Integer.MAX_VALUE) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    new MovingWord(fallingRate, getRoot(), player);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    lastUpdate \u003d now;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        animationTimer.start();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 41
    }
  },
  {
    "path": "src/main/java/com/typee/ui/game/GameWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.ui.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.game.Player;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Controller class which handles game window."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class GameWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final String FXML \u003d \"GameWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private AnchorPane gamePlay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private TextField playerInputArea;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Label gameOver;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Creates a new game window."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param root Stage that is the root of the window."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param player User that plays the game."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private GameWindow(Stage root, Player player) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        player.setInputAs(playerInputArea.textProperty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        gameOver.visibleProperty().bind(player.getGameOverProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        gamePlay.getChildren().addAll(new PlayerInformation(player).getRoot(), new GameBody(player).getRoot());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        /** TODO: Add CSS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "         *  root.getScene().getStylesheets().addAll(this.getClass().getResource(\".css\").toExternalForm());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Creates a new Window with a new player."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public GameWindow() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this(new Stage(), new Player());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        getRoot().close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void handlePlayerInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        playerInputArea.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Shows the window."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns true if the window is currently being shown."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Focuses on the window."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 82
    }
  },
  {
    "path": "src/main/java/com/typee/ui/game/MovingWord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.ui.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.game.Player;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.game.Words;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.animation.AnimationTimer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Controller class which handles the game\u0027s moving words which player can type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class MovingWord extends UiPart\u003cPane\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final String FXML \u003d \"MovingWord.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final Random random \u003d new Random();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final double LOWER_BOUND \u003d 550;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final int DECREMENT_VALUE \u003d 20;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final int SCORE_MULTIPLIER \u003d 100;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final int WINDOW_BOUNDARY \u003d 700;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Pane parent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private double fallingRate \u003d 1.0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private String word;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private AnimationTimer animationTimer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public MovingWord(Pane parent, Player player) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.parent \u003d parent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.player \u003d player;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        parent.getChildren().add(getRoot());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        continuouslyUpdate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public MovingWord(double fallingRate, Pane parent, Player player) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this(parent, player);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.fallingRate \u003d fallingRate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void stopAnimation() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        animationTimer.stop();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void setup() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        word \u003d Words.get(random.nextInt(Words.SIZE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        getRoot().setLayoutX(random.nextInt(WINDOW_BOUNDARY));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Removes the moving word from the game window."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void disappear() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        parent.getChildren().remove(getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        word \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Updates the player\u0027s score and health according to player\u0027s input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void update() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        getRoot().setLayoutY(getRoot().getLayoutY() + fallingRate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        getRoot().getChildren().clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        getRoot().getChildren().add(TextHighlighter.convertToTextFlowUsing(word));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (getRoot().getLayoutY() \u003e LOWER_BOUND \u0026\u0026 parent.getChildren().contains(getRoot())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            stopAnimation();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            player.decrementHealth(DECREMENT_VALUE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            disappear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        } else if (player.getInputText().equals(word)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            stopAnimation();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            player.incrementScore(word.length() * SCORE_MULTIPLIER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            disappear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Ensures the player\u0027s score and health is updated according to player\u0027s input by continuously updating."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void continuouslyUpdate() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        animationTimer \u003d new AnimationTimer() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            public void handle(long now) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                update();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        };"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        animationTimer.start();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 90
    }
  },
  {
    "path": "src/main/java/com/typee/ui/game/PlayerInformation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.ui.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.game.Player;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Controller class which handles the part of the game window that has the player\u0027s score and health."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class PlayerInformation extends UiPart\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final String FXML \u003d \"PlayerInformation.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Label score;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private ProgressBar health;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public PlayerInformation(Player player) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        initialize(player);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void initialize(Player player) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        health.progressProperty().bind(player.getHealthProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        score.textProperty().bind(Bindings.convert(player.getScoreProperty()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 36
    }
  },
  {
    "path": "src/main/java/com/typee/ui/game/StartWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.ui.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Controller class which handles Start window."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class StartWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String FXML \u003d \"StartWindow.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private AnchorPane startWindow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public StartWindow() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void handleStart() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        GameWindow gameWindow \u003d new GameWindow();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        gameWindow.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 28
    }
  },
  {
    "path": "src/main/java/com/typee/ui/game/TextHighlighter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.ui.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Adds highlight to words."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class TextHighlighter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns the TextFlow of {@code word}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param word The word that is to be converted into TextFlow."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static TextFlow convertToTextFlowUsing(String word) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "         * TODO: Add CSS Highlighting"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "         */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return new TextFlow(new Text(word));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 21
    }
  },
  {
    "path": "src/main/resources/view/Calendar.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ".individual-date-pane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    -fx-border-color: black;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    -fx-border-width: 0.5 0.5 0.5 0.5;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 5
    }
  },
  {
    "path": "src/main/resources/view/CalendarWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003cVBox spacing\u003d\"20\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    \u003cHBox alignment\u003d\"BASELINE_CENTER\" spacing\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cButton text\u003d\"\u0026lt;\u0026lt;\" onMouseClicked\u003d\"#populateCalendarWithPreviousMonth\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cText fx:id\u003d\"calendarTitle\" fill\u003d\"white\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cButton text\u003d\"\u0026gt;\u0026gt;\" onMouseClicked\u003d\"#populateCalendarWithNextMonth\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    \u003cGridPane alignment\u003d\"BASELINE_CENTER\" prefWidth\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cText fill\u003d\"white\" text\u003d\"Sunday\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cText fill\u003d\"white\" text\u003d\"Monday\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cText fill\u003d\"white\" text\u003d\"Tuesday\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cText fill\u003d\"white\" text\u003d\"Wednesday\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cText fill\u003d\"white\" text\u003d\"Thursday\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cText fill\u003d\"white\" text\u003d\"Friday\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cText fill\u003d\"white\" text\u003d\"Saturday\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    \u003cGridPane fx:id\u003d\"dateDisplayGrid\" prefHeight\u003d\"400\" prefWidth\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 36,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell .text {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: #ffffff;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#window_title {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 2pt;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "#mainMenu .menu-bar .menu .menu-item{"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".toggle-button {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 364
    }
  },
  {
    "path": "src/main/resources/view/EngagementListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003cVBox id\u003d\"main_window\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    \u003cListView fx:id\u003d\"engagementListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nordic96": 7
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ".individual-date-pane {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    -fx-border-color: black;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    -fx-border-width: 0.5 0.5 0.5 0.5;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 6,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/GameBody.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003cAnchorPane styleClass\u003d\"panel\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            prefHeight\u003d\"600.0\" prefWidth\u003d\"750.0\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 8
    }
  },
  {
    "path": "src/main/resources/view/GameWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "         title\u003d\"TypingGame\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"gamePlay\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"750.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    \u003cTextField fx:id\u003d\"playerInputArea\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" onAction\u003d\"#handlePlayerInput\" opacity\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    \u003cLabel styleClass\u003d\"userOut\" layoutX\u003d\"350.0\" layoutY\u003d\"550\" text\u003d\"${playerInputArea.text}\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    \u003cLabel fx:id\u003d\"gameOver\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" text\u003d\"GAME OVER\" layoutX\u003d\"350.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 19,
      "-": 3
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/resources/view/IndividualDatePane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003cStackPane fx:id\u003d\"individualDatePane\" prefWidth\u003d\"200\" prefHeight\u003d\"200\" styleClass\u003d\"individual-date-pane\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 6
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ToggleButton?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"550\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Typee\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/typee_icon.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar id\u003d\"mainMenu\" fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu id\u003d\"mainMenu\" mnemonicParsing\u003d\"false\" styleClass\u003d\"menu\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem id\u003d\"mainMenu\" styleClass\u003d\"menu-item\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu id\u003d\"mainMenu\" styleClass\u003d\"menu\" mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem id\u003d\"mainMenu\" styleClass\u003d\"menu-item\" fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cHBox styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox maxWidth\u003d\"200.0\" minWidth\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane id\u003d\"main_window\" fx:id\u003d\"tabPanelPlaceHolder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cToggleButton styleClass\u003d\"toggle-button\" mnemonicParsing\u003d\"false\" text\u003d\"Switch Theme\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cFont size\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/ToggleButton\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox id\u003d\"window_title\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cLabel id\u003d\"window_title\" fx:id\u003d\"lblWindowTitle\" text\u003d\"\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"mainWindow\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane id\u003d\"output_screen\" fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"70.0\" prefHeight\u003d\"70.0\" prefWidth\u003d\"340.0\" styleClass\u003d\"result-display\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane id\u003d\"input_screen\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/resources/view/MovingWord.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003cStackPane fx:id\u003d\"movingWord\" styleClass\u003d\"fallingCard\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 9
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" prefHeight\u003d\"105.0\" prefWidth\u003d\"303.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" prefHeight\u003d\"105.0\" prefWidth\u003d\"161.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003cHBox prefHeight\u003d\"15.0\" prefWidth\u003d\"129.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "           \u003cLabel fx:id\u003d\"id\" prefHeight\u003d\"17.0\" prefWidth\u003d\"18.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$id\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "             \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "             \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "           \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "               \u003cLabel fx:id\u003d\"type\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"17.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "               \u003cLabel styleClass\u003d\"cell_big_label\" text\u003d\" at \" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "               \u003cLabel fx:id\u003d\"locationOfEngagement\" prefHeight\u003d\"17.0\" prefWidth\u003d\"123.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$locationOfEngagement\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "           \u003cLabel fx:id\u003d\"startTime\" prefHeight\u003d\"17.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$start\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "               \u003cLabel prefHeight\u003d\"17.0\" prefWidth\u003d\"19.0\" styleClass\u003d\"cell_small_label\" text\u003d\" to \" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "               \u003cLabel fx:id\u003d\"endTime\" prefHeight\u003d\"17.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$end\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003cHBox prefHeight\u003d\"18.0\" prefWidth\u003d\"195.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "               \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Attendees: \" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003cLabel fx:id\u003d\"attendees\" prefHeight\u003d\"17.0\" prefWidth\u003d\"221.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$attendees\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" prefHeight\u003d\"17.0\" prefWidth\u003d\"283.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "               \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Priority: \" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "               \u003cLabel fx:id\u003d\"priority\" prefHeight\u003d\"17.0\" prefWidth\u003d\"49.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "uggi121": 34,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/PlayerInformation.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003cStackPane styleClass\u003d\"player\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "           prefHeight\u003d\"75.0\" prefWidth\u003d\"200.0\" layoutY\u003d\"0\" layoutX\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cLabel text\u003d\"Score\" StackPane.alignment\u003d\"CENTER_LEFT\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cLabel text\u003d\"Health\" StackPane.alignment\u003d\"BOTTOM_LEFT\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cLabel fx:id\u003d\"score\" text\u003d\"\" StackPane.alignment\u003d\"CENTER\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cProgressBar fx:id\u003d\"health\" StackPane.alignment\u003d\"BOTTOM_CENTER\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 18
    }
  },
  {
    "path": "src/main/resources/view/ReportWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        \u003cLabel fx:id\u003d\"lblStatus\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        \u003cButton fx:id\u003d\"btnTest\" onMouseClicked\u003d\"#setTextForLabel\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 4,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StartWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003cVBox id\u003d\"startWindow\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#handleStart\" styleClass\u003d\"button\" text\u003d\"Start\" translateX\u003d\"150.0\" translateY\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 7
    }
  },
  {
    "path": "src/test/java/com/typee/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/com/typee/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/com/typee/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/com/typee/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/com/typee/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/typee_icon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/com/typee/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/com/typee/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/com/typee/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/com/typee/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/com/typee/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 4,
      "-": 140
    }
  },
  {
    "path": "src/test/java/com/typee/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.storage.JsonEngagementListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.storage.JsonTypeeStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    //private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonEngagementListStorage engagementListStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                new JsonEngagementListStorage(temporaryFolder.resolve(\"engagementList.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonTypeeStorage typeeStorage \u003d new JsonTypeeStorage(temporaryFolder.resolve(\"tabMenus.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        StorageManager storage \u003d new StorageManager(engagementListStorage, userPrefsStorage, typeeStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertParseException(invalidCommand, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, Messages.MESSAGE_INVALID_ENGAGEMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // Setup LogicManager with JsonEngagementListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonEngagementListStorage engagementListStorage \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                new JsonEngagementListIoExceptionThrowingStub(temporaryFolder"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                        .resolve(\"ioExceptionEngagementList.json\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                );"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonTypeeStorage typeeStorage \u003d new JsonTypeeStorage(temporaryFolder.resolve(\"tabMenus.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        StorageManager storage \u003d new StorageManager(engagementListStorage, userPrefsStorage, typeeStorage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.addEngagement(expectedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandBehavior(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredEngagementList().remove(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @see #assertCommandBehavior(String, Class, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandBehavior(inputCommand, null, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @see #assertCommandBehavior(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @see #assertCommandBehavior(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @see #assertCommandBehavior(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private void assertCommandBehavior(String inputCommand, Class\u003c?\u003e expectedException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                                       String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static class JsonEngagementListIoExceptionThrowingStub extends JsonEngagementListStorage {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        private JsonEngagementListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void saveEngagementList(ReadOnlyEngagementList engagementList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 1,
      "uggi121": 5,
      "nordic96": 8,
      "brebeek": 15,
      "lyskevin": 41,
      "-": 100
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.testutil.EngagementBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_newAppointment_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validAppointment \u003d new EngagementBuilder().buildAsAppointment();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.addEngagement(validAppointment);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandSuccess(new AddCommand(validAppointment), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validAppointment), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_newInterview_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validInterview \u003d new EngagementBuilder().buildAsInterview();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.addEngagement(validInterview);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandSuccess(new AddCommand(validInterview), model,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validInterview), expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_newMeeting_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validMeeting \u003d new EngagementBuilder().buildAsMeeting();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.addEngagement(validMeeting);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandSuccess(new AddCommand(validMeeting), model,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validMeeting), expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_duplicateAppointment_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement appointmentInList \u003d model.getEngagementList().getEngagementList().get(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandFailure(new AddCommand(appointmentInList), model, AddCommand.MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_duplicateInterview_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement interviewInList \u003d model.getEngagementList().getEngagementList().get(1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandFailure(new AddCommand(interviewInList), model, AddCommand.MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_duplicateMeeting_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement meetingInList \u003d model.getEngagementList().getEngagementList().get(2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandFailure(new AddCommand(meetingInList), model, AddCommand.MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "lyskevin": 60,
      "-": 20
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.NullRedoableActionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.NullUndoableActionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.testutil.EngagementBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void constructor_nullEngagement_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelStubAcceptingEngagementAdded modelStub \u003d new ModelStubAcceptingEngagementAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validAppointment \u003d new EngagementBuilder().buildAsAppointment();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validAppointment).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validAppointment),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(Arrays.asList(validAppointment), modelStub.engagementsAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_interviewAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelStubAcceptingEngagementAdded modelStub \u003d new ModelStubAcceptingEngagementAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validInterview \u003d new EngagementBuilder().buildAsInterview();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validInterview).execute(modelStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validInterview),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(Arrays.asList(validInterview), modelStub.engagementsAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_meetingAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelStubAcceptingEngagementAdded modelStub \u003d new ModelStubAcceptingEngagementAdded();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validMeeting \u003d new EngagementBuilder().buildAsMeeting();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validMeeting).execute(modelStub);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validMeeting),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(Arrays.asList(validMeeting), modelStub.engagementsAdded);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_duplicateAppointment_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validAppointment \u003d new EngagementBuilder().buildAsAppointment();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validAppointment);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEngagement(validAppointment);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e addCommand.execute(modelStub),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_duplicateInterview_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validInterview \u003d new EngagementBuilder().buildAsInterview();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validInterview);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEngagement(validInterview);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e addCommand.execute(modelStub),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_duplicateMeeting_throwsCommandException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validMeeting \u003d new EngagementBuilder().buildAsMeeting();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validMeeting);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEngagement(validMeeting);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e addCommand.execute(modelStub),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void appointmentEquals() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement appointment \u003d new EngagementBuilder().buildAsAppointment();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement differentAppointment \u003d new EngagementBuilder()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(\"date\").buildAsAppointment();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addAppointmentCommand \u003d new AddCommand(appointment);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addDifferentAppointmentCommand \u003d new AddCommand(differentAppointment);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(addAppointmentCommand.equals(addAppointmentCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addAppointmentCommandCopy \u003d new AddCommand(appointment);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(addAppointmentCommand.equals(addAppointmentCommandCopy));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addAppointmentCommand.equals(1));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addAppointmentCommand.equals(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different appointment -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addAppointmentCommand.equals(addDifferentAppointmentCommand));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void interviewEquals() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement interview \u003d new EngagementBuilder().buildAsInterview();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement differentInterview \u003d new EngagementBuilder()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(\"date\").buildAsInterview();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addInterviewCommand \u003d new AddCommand(interview);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addDifferentInterviewCommand \u003d new AddCommand(differentInterview);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(addInterviewCommand.equals(addInterviewCommand));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addInterviewCommandCopy \u003d new AddCommand(interview);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(addInterviewCommand.equals(addInterviewCommandCopy));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addInterviewCommand.equals(1));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addInterviewCommand.equals(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different appointment -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addInterviewCommand.equals(addDifferentInterviewCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void meetingEquals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement meeting \u003d new EngagementBuilder().buildAsMeeting();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement differentMeeting \u003d new EngagementBuilder()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(\"date\").buildAsMeeting();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addMeetingCommand \u003d new AddCommand(meeting);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addDifferentMeetingCommand \u003d new AddCommand(differentMeeting);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(addMeetingCommand.equals(addMeetingCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addMeetingCommandCopy \u003d new AddCommand(meeting);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(addMeetingCommand.equals(addMeetingCommandCopy));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addMeetingCommand.equals(1));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addMeetingCommand.equals(null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different appointment -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addMeetingCommand.equals(addDifferentMeetingCommand));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void differentEngagementTypesEquals() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement appointment \u003d new EngagementBuilder().buildAsAppointment();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement interview \u003d new EngagementBuilder().buildAsInterview();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement meeting \u003d new EngagementBuilder().buildAsMeeting();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addAppointmentCommand \u003d new AddCommand(appointment);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addInterviewCommand \u003d new AddCommand(interview);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addMeetingCommand \u003d new AddCommand(meeting);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different engagement types -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addAppointmentCommand.equals(addInterviewCommand));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addAppointmentCommand.equals(addMeetingCommand));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addInterviewCommand.equals(addMeetingCommand));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public Path getEngagementListFilePath() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void setEngagementListFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void addEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void setHistoryManager(ReadOnlyEngagementList newData) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public ReadOnlyEngagementList getEngagementList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public boolean hasEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void deleteEngagement(Engagement target) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void setEngagement(Engagement target, Engagement editedEngagement) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public ObservableList\u003cEngagement\u003e getFilteredEngagementList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void updateFilteredEngagementList(Predicate\u003cEngagement\u003e predicate) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public boolean hasNoUndoableCommand() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        public void undoEngagementList() throws NullUndoableActionException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public boolean hasNoRedoableCommand() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        public void redoEngagementList() throws NullRedoableActionException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        public void saveEngagementList() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateSortedEngagementList(Comparator\u003cEngagement\u003e comparator) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cEngagement\u003e getSortedEngagementList() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * A Model stub that contains a single engagement."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private class ModelStubWithEngagement extends ModelStub {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        private final Engagement engagement;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelStubWithEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            requireNonNull(engagement);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            this.engagement \u003d engagement;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public boolean hasEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            requireNonNull(engagement);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return this.engagement.isSameEngagement(engagement);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * A Model stub that always accepts the engagement being added."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private class ModelStubAcceptingEngagementAdded extends ModelStub {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        final ArrayList\u003cEngagement\u003e engagementsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public boolean hasEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            requireNonNull(engagement);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return engagementsAdded.stream().anyMatch(engagement::isSameEngagement);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void addEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            requireNonNull(engagement);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            engagementsAdded.add(engagement);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public ReadOnlyEngagementList getEngagementList() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return new EngagementList();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 3,
      "nordic96": 1,
      "brebeek": 21,
      "lyskevin": 210,
      "-": 113
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_emptyEngagementList_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_nonEmptyEngagementList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.setHistoryManager(new EngagementList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "nordic96": 1,
      "lyskevin": 14,
      "-": 17
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.person.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String VALID_DESCRIPTION_LUNCH_APPOINTMENT \u003d \"Lunch\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String VALID_DESCRIPTION_GOOGLE_INTERVIEW \u003d \"Googs\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String VALID_DESCRIPTION_TEAM_MEETING \u003d \"Team Project Meeting\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"Like skiing.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Favourite pastime: Eating\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final EditCommand.EditEngagementDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final EditCommand.EditEngagementDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Convenience wrapper to"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList expectedEngagementList \u003d new EngagementList(actualModel.getEngagementList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        List\u003cEngagement\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEngagementList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(expectedEngagementList, actualModel.getEngagementList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredEngagementList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the engagement at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * {@code model}\u0027s engagement list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static void showEngagementAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEngagementList().size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement engagement \u003d model.getFilteredEngagementList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        final String[] splitDescription \u003d engagement.getDescription().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        model.updateFilteredEngagementList(new DescriptionContainsKeywordsPredicate(("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                Arrays.asList(splitDescription[0]))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(1, model.getFilteredEngagementList().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 4,
      "uggi121": 8,
      "nordic96": 2,
      "lyskevin": 32,
      "-": 71
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalIndexes.INDEX_FIRST_ENGAGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalIndexes.INDEX_SECOND_ENGAGEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement engagementToDelete \u003d model.getFilteredEngagementList().get(INDEX_FIRST_ENGAGEMENT.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ENGAGEMENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ENGAGEMENT_SUCCESS, engagementToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.deleteEngagement(engagementToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEngagementList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ENGAGEMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CommandTestUtil.showEngagementAtIndex(model, INDEX_FIRST_ENGAGEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement engagementToDelete \u003d model.getFilteredEngagementList().get(INDEX_FIRST_ENGAGEMENT.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ENGAGEMENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ENGAGEMENT_SUCCESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                engagementToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.deleteEngagement(engagementToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        showNoEngagement(expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CommandTestUtil.showEngagementAtIndex(model, INDEX_FIRST_ENGAGEMENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ENGAGEMENT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEngagementList().getEngagementList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ENGAGEMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ENGAGEMENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ENGAGEMENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ENGAGEMENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no engagements."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void showNoEngagement(Model model) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.updateFilteredEngagementList(p -\u003e false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertTrue(model.getFilteredEngagementList().isEmpty());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 6,
      "nordic96": 1,
      "lyskevin": 34,
      "-": 66
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "//import static com.typee.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand.EditEngagementDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EngagementList(model.getHistoryManager()), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.setEngagement(model.getFilteredEngagementList().get(0), editedPerson);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredEngagementList().size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Person lastPerson \u003d model.getFilteredEngagementList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Person editedPerson \u003d personInList.withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand.EditEngagementDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_BOB)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EngagementList(model.getHistoryManager()), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.setEngagement(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditCommand.EditEngagementDescriptor());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Person editedPerson \u003d model.getFilteredEngagementList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EngagementList(model.getHistoryManager()), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredEngagementList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EngagementList(model.getHistoryManager()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.setEngagement(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Person firstPerson \u003d model.getFilteredEngagementList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditEngagementDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Person personInList \u003d model.getHistoryManager().getEngagementList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEngagementList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand.EditEngagementDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_BOB)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getHistoryManager().getEngagementList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand.EditEngagementDescriptor copyDescriptor \u003d new EditCommand"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .EditEngagementDescriptor(CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, CommandTestUtil.DESC_AMY)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, CommandTestUtil.DESC_BOB)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 34,
      "nordic96": 17,
      "lyskevin": 4,
      "-": 108
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditEngagementDescriptor descriptorWithSameValues \u003d new EditCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .EditEngagementDescriptor(CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertTrue(CommandTestUtil.DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertTrue(CommandTestUtil.DESC_AMY.equals(CommandTestUtil.DESC_AMY));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(CommandTestUtil.DESC_BOB));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand.EditEngagementDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 6,
      "nordic96": 27
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 1,
      "lyskevin": 4,
      "-": 15
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.updateFilteredEngagementList(predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredEngagementList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.updateFilteredEngagementList(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredEngagementList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 13,
      "nordic96": 7,
      "-": 57
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 1,
      "lyskevin": 4,
      "-": 15
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalIndexes.INDEX_FIRST_ENGAGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CommandTestUtil.showEngagementAtIndex(model, INDEX_FIRST_ENGAGEMENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 1,
      "lyskevin": 9,
      "-": 28
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagements;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.NullRedoableActionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.NullUndoableActionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void setUp() throws NullUndoableActionException, NullRedoableActionException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        model.deleteEngagement(getTypicalEngagements().get(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.saveEngagementList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.undoEngagementList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.deleteEngagement(getTypicalEngagements().get(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.undoEngagementList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.redoEngagementList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_single_redoableState() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            setUp();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (NullUndoableActionException | NullRedoableActionException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError(\"Error in initialising\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 7,
      "brebeek": 22,
      "lyskevin": 16
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/TabCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": " * Unit Test for {@code TabCommand}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class TabCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void execute_valid_tabCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        TabCommand tabCommand \u003d new TabCommand(new Tab(\"Generate Report\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertCommandSuccess(tabCommand, model, TabCommand.MESSAGE_SUCCESS + \"Generate Report\", model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        TabCommand tabCommandGame \u003d new TabCommand(new Tab(\"Typing Game\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertCommandSuccess(tabCommandGame, model,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                TabCommand.MESSAGE_SUCCESS + \"Typing Game\", model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        TabCommand tabCommandAppointment \u003d new TabCommand(new Tab(\"Calendar View\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertCommandSuccess(tabCommandAppointment, model,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                TabCommand.MESSAGE_SUCCESS + \"Calendar View\", model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        TabCommand tabCommandCalendar \u003d new TabCommand(new Tab(\"Add Engagement\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertCommandSuccess(tabCommandCalendar, model,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                TabCommand.MESSAGE_SUCCESS + \"Add Engagement\", model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 26,
      "lyskevin": 10
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagements;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.NullUndoableActionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        model.deleteEngagement(getTypicalEngagements().get(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.saveEngagementList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.deleteEngagement(getTypicalEngagements().get(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_single_undoableState() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            expectedModel.undoEngagementList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (NullUndoableActionException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError(\"Wrong null undoable command\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 4,
      "brebeek": 24,
      "lyskevin": 15
    }
  },
  {
    "path": "src/test/java/com/typee/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "//import static com.typee.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "//import static com.typee.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                + CommandTestUtil.NAME_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.NAME_DESC_AMY"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                + CommandTestUtil.NAME_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.NAME_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.NAME_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.NAME_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.NAME_DESC_BOB,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.NAME_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_NAME_BOB, expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.PREAMBLE_NON_EMPTY"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                        + CommandTestUtil.NAME_DESC_BOB,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 5,
      "nordic96": 62
    }
  },
  {
    "path": "src/test/java/com/typee/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/com/typee/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/com/typee/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalIndexes.INDEX_FIRST_ENGAGEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ENGAGEMENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 5,
      "lyskevin": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/com/typee/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-5\" + CommandTestUtil.NAME_DESC_AMY,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"0\" + CommandTestUtil.NAME_DESC_AMY,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + CommandTestUtil.INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + CommandTestUtil.INVALID_NAME_DESC"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                        + CommandTestUtil.VALID_ADDRESS_AMY + CommandTestUtil.VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand.EditEngagementDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_AMY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand.EditEngagementDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 7,
      "nordic96": 71
    }
  },
  {
    "path": "src/test/java/com/typee/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.person.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                new FindCommand(new DescriptionContainsKeywordsPredicate((Arrays.asList(\"Alice\", \"Bob\"))));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 8,
      "lyskevin": 6,
      "-": 26
    }
  },
  {
    "path": "src/test/java/com/typee/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalIndexes.INDEX_FIRST_ENGAGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                MESSAGE_INVALID_INDEX, () -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(INDEX_FIRST_ENGAGEMENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(INDEX_FIRST_ENGAGEMENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 2,
      "nordic96": 6,
      "lyskevin": 3,
      "-": 60
    }
  },
  {
    "path": "src/test/java/com/typee/logic/parser/TypeeParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalIndexes.INDEX_FIRST_ENGAGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.person.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypeeParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TypeeParser parser \u003d new TypeeParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement engagement \u003d new EngagementBuilder().buildAsAppointment();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(engagement));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(new AddCommand(engagement), command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENGAGEMENT.getOneBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_ENGAGEMENT), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand.EditEngagementDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                + INDEX_FIRST_ENGAGEMENT.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_ENGAGEMENT, descriptor), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(new FindCommand(new DescriptionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertThrows(ParseException.class, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                Messages.MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 2,
      "uggi121": 2,
      "nordic96": 3,
      "lyskevin": 23,
      "-": 69
    }
  },
  {
    "path": "src/test/java/com/typee/model/EngagementListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TYPICAL_APPOINTMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TYPICAL_INTERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TYPICAL_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.exceptions.DuplicateEngagementException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.testutil.EngagementBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class EngagementListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final EngagementList engagementList \u003d new HistoryManager(new EngagementList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(Collections.emptyList(), engagementList.getEngagementList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e engagementList.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void resetData_withValidReadOnlyEngagementList_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList newData \u003d getTypicalEngagementList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(newData, engagementList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void resetData_withDuplicateAppointments_throwsDuplicateEngagementException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // Two engagements with the same details"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedAppointment \u003d new EngagementBuilder(TYPICAL_APPOINTMENT).buildAsAppointment();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        List\u003cEngagement\u003e newEngagements \u003d Arrays.asList(TYPICAL_APPOINTMENT, editedAppointment);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementListStub newData \u003d new EngagementListStub(newEngagements);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(DuplicateEngagementException.class, () -\u003e engagementList.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasEngagement_nullEngagement_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e engagementList.hasEngagement(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasAppointment_appointmentNotInEngagementList_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(engagementList.hasEngagement(TYPICAL_APPOINTMENT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasInterview_interviewNotInEngagementList_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(engagementList.hasEngagement(TYPICAL_INTERVIEW));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasMeeting_meetingNotInEngagementList_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(engagementList.hasEngagement(TYPICAL_MEETING));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasAppointment_appointmentInEngagementList_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.addEngagement(TYPICAL_APPOINTMENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(engagementList.hasEngagement(TYPICAL_APPOINTMENT));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasInterview_interviewInEngagementList_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.addEngagement(TYPICAL_INTERVIEW);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(engagementList.hasEngagement(TYPICAL_INTERVIEW));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasMeeting_meetingInEngagementList_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.addEngagement(TYPICAL_MEETING);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(engagementList.hasEngagement(TYPICAL_MEETING));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasAppointment_appointmentWithSameDetailsInEngagementList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.addEngagement(TYPICAL_APPOINTMENT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedAppointment \u003d new EngagementBuilder(TYPICAL_APPOINTMENT).buildAsAppointment();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(engagementList.hasEngagement(editedAppointment));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasInterview_interviewWithSameDetailsInEngagementList_returnsTrue() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.addEngagement(TYPICAL_INTERVIEW);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedInterview \u003d new EngagementBuilder(TYPICAL_INTERVIEW).buildAsInterview();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(engagementList.hasEngagement(editedInterview));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasMeeting_meetingWithSameDetailsInEngagementList_returnsTrue() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.addEngagement(TYPICAL_MEETING);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedMeeting \u003d new EngagementBuilder(TYPICAL_MEETING).buildAsMeeting();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(engagementList.hasEngagement(editedMeeting));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getEngagementList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e engagementList.getEngagementList().remove(0));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * A stub ReadOnlyEngagementList whose engagement list can violate interface constraints."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static class EngagementListStub implements ReadOnlyEngagementList {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        private final ObservableList\u003cEngagement\u003e engagements \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementListStub(Collection\u003cEngagement\u003e engagements) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            this.engagements.setAll(engagements);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public ObservableList\u003cEngagement\u003e getEngagementList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return engagements;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 137
    }
  },
  {
    "path": "src/test/java/com/typee/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "//import static com.typee.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "//import static com.typee.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(new EngagementList(), new EngagementList(modelManager.getHistoryManager()));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasEngagement(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertFalse(modelManager.hasEngagement(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        modelManager.addEngagement(ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertTrue(modelManager.hasEngagement(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredEngagementList().remove(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList differentAddressBook \u003d new EngagementList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        modelManager.updateFilteredEngagementList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        modelManager.updateFilteredEngagementList(PREDICATE_SHOW_ALL_ENGAGEMENTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 11,
      "nordic96": 1,
      "lyskevin": 3,
      "-": 104
    }
  },
  {
    "path": "src/test/java/com/typee/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/com/typee/model/person/AppointmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.VALID_DESCRIPTION_LUNCH_APPOINTMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.LUNCH_APPOINTMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TYPICAL_APPOINTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.testutil.EngagementBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isSameAppointment() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_APPOINTMENT.isSameEngagement(TYPICAL_APPOINTMENT));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_APPOINTMENT.isSameEngagement(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedAppointment \u003d new EngagementBuilder(TYPICAL_APPOINTMENT)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_LUNCH_APPOINTMENT)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .buildAsAppointment();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_APPOINTMENT.isSameEngagement(editedAppointment));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement appointmentCopy \u003d new EngagementBuilder(TYPICAL_APPOINTMENT).buildAsAppointment();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_APPOINTMENT.equals(appointmentCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_APPOINTMENT.equals(TYPICAL_APPOINTMENT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_APPOINTMENT.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_APPOINTMENT.equals(5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different appointment -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_APPOINTMENT.equals(LUNCH_APPOINTMENT));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedAppointment \u003d new EngagementBuilder(TYPICAL_APPOINTMENT)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_LUNCH_APPOINTMENT)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .buildAsAppointment();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_APPOINTMENT.equals(editedAppointment));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 56
    }
  },
  {
    "path": "src/test/java/com/typee/model/person/InterviewTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.VALID_DESCRIPTION_GOOGLE_INTERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.GOOGLE_INTERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TYPICAL_INTERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.testutil.EngagementBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class InterviewTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isSameInterview() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_INTERVIEW.isSameEngagement(TYPICAL_INTERVIEW));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_INTERVIEW.isSameEngagement(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedInterview \u003d new EngagementBuilder(TYPICAL_INTERVIEW)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_GOOGLE_INTERVIEW)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .buildAsInterview();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_INTERVIEW.isSameEngagement(editedInterview));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement interviewCopy \u003d new EngagementBuilder(TYPICAL_INTERVIEW).buildAsInterview();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_INTERVIEW.equals(interviewCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_INTERVIEW.equals(TYPICAL_INTERVIEW));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_INTERVIEW.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_INTERVIEW.equals(5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different interview -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_INTERVIEW.equals(GOOGLE_INTERVIEW));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedInterview \u003d new EngagementBuilder(TYPICAL_INTERVIEW)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_GOOGLE_INTERVIEW)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .buildAsInterview();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_INTERVIEW.equals(editedInterview));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 56
    }
  },
  {
    "path": "src/test/java/com/typee/model/person/MeetingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TEAM_MEETING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TEAM_MEETING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TYPICAL_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.testutil.EngagementBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class MeetingTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isSameMeeting() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_MEETING.isSameEngagement(TYPICAL_MEETING));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_MEETING.isSameEngagement(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedMeeting \u003d new EngagementBuilder(TYPICAL_MEETING)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TEAM_MEETING)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .buildAsMeeting();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_MEETING.isSameEngagement(editedMeeting));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement meetingCopy \u003d new EngagementBuilder(TYPICAL_MEETING).buildAsMeeting();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_MEETING.equals(meetingCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_MEETING.equals(TYPICAL_MEETING));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_MEETING.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_MEETING.equals(5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_MEETING.equals(TEAM_MEETING));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedMeeting \u003d new EngagementBuilder(TYPICAL_MEETING)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TEAM_MEETING)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .buildAsMeeting();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_MEETING.equals(editedMeeting));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 56
    }
  },
  {
    "path": "src/test/java/com/typee/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 1,
      "nordic96": 2,
      "lyskevin": 4,
      "-": 71
    }
  },
  {
    "path": "src/test/java/com/typee/model/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/com/typee/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "//import static com.typee.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "//import static com.typee.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final UniqueEngagementList uniquePersonList \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setEngagement(null, ALICE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setEngagement(ALICE, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setEngagement(ALICE, ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        uniquePersonList.setEngagement(ALICE, ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        UniqueEngagementList expectedUniquePersonList \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        uniquePersonList.setEngagement(ALICE, editedAlice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        UniqueEngagementList expectedUniquePersonList \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        uniquePersonList.setEngagement(ALICE, BOB);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        UniqueEngagementList expectedUniquePersonList \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setEngagement(ALICE, BOB));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        UniqueEngagementList expectedUniquePersonList \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setEngagements((UniqueEngagementList) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        UniqueEngagementList expectedUniquePersonList \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        uniquePersonList.setEngagements(expectedUniquePersonList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        UniqueEngagementList expectedUniquePersonList \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniquePersonList.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                .remove(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 4,
      "uggi121": 21,
      "nordic96": 1,
      "-": 129
    }
  },
  {
    "path": "src/test/java/com/typee/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private static final String VALID_NAME \u003d TypicalPersons.BENSON.getName().toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonAdaptedEngagement engagement \u003d new JsonAdaptedEngagement(TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assertions.assertEquals(TypicalPersons.BENSON, person.toModelType());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonAdaptedEngagement engagement \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                new JsonAdaptedEngagement(INVALID_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 3,
      "nordic96": 4,
      "lyskevin": 3,
      "-": 18
    }
  },
  {
    "path": "src/test/java/com/typee/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private java.util.Optional\u003cReadOnlyEngagementList\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return new JsonEngagementListStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList original \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonEngagementListStorage jsonAddressBookStorage \u003d new JsonEngagementListStorage(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ReadOnlyEngagementList readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(original, new HistoryManager(new EngagementList(readBack)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        original.addEngagement(TypicalPersons.HOON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        original.removeEngagement(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        //assertEquals(original, new HistoryManager(new EngagementList(readBack)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        original.addEngagement(TypicalPersons.IDA);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        //assertEquals(original, new HistoryManager(new EngagementList(readBack)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void saveAddressBook(ReadOnlyEngagementList addressBook, String filePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            new JsonEngagementListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new EngagementList(), null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 2,
      "uggi121": 10,
      "nordic96": 5,
      "lyskevin": 11,
      "-": 72
    }
  },
  {
    "path": "src/test/java/com/typee/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonSerializableEngagementList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                JsonSerializableEngagementList.class).get();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonSerializableEngagementList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                JsonSerializableEngagementList.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonSerializableEngagementList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                JsonSerializableEngagementList.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, JsonSerializableEngagementList.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 2,
      "uggi121": 5,
      "nordic96": 1,
      "lyskevin": 9,
      "-": 24
    }
  },
  {
    "path": "src/test/java/com/typee/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 9,
      "-": 114
    }
  },
  {
    "path": "src/test/java/com/typee/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "//import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "//import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "//import com.typee.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonEngagementListStorage engagementListStorage \u003d new JsonEngagementListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        storageManager \u003d new StorageManager(engagementListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ////    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ////        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ////         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    ////         * {@link JsonEngagementListStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ////         * More extensive testing of UserPref saving/reading done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ////         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    ////        EngagementList original \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ////        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    ////        ReadOnlyEngagementList retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    ////        assertEquals(original, new EngagementList(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ////    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getEngagementListFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertNotNull(storageManager.getEngagementListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "nordic96": 2,
      "brebeek": 9,
      "lyskevin": 10,
      "-": 46
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * {@code EngagementList ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private EngagementList engagementList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList \u003d new EngagementList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public AddressBookBuilder(EngagementList engagementList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.engagementList \u003d engagementList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Adds a new {@code Person} to the {@code EngagementList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public AddressBookBuilder withPerson(Engagement engagement) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.addEngagement(engagement);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagementList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "nordic96": 1,
      "lyskevin": 10,
      "-": 21
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * A utility class to help with building EditEngagementDescriptor objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private EditCommand.EditEngagementDescriptor descriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        descriptor \u003d new EditCommand.EditEngagementDescriptor();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public EditPersonDescriptorBuilder(EditCommand.EditEngagementDescriptor descriptor) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditEngagementDescriptor(descriptor);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns an {@code EditEngagementDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        descriptor \u003d new EditCommand.EditEngagementDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Sets the {@code Name} of the {@code EditEngagementDescriptor} that we are building."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public EditCommand.EditEngagementDescriptor build() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 9,
      "nordic96": 4,
      "-": 28
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/EngagementBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.AttendeeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.EngagementType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.TimeSlot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * A utility class to help with building Engagement objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class EngagementBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_START_YEAR \u003d 2020;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_START_MONTH \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_START_DAY \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_START_HOUR \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_START_MINUTE \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_END_YEAR \u003d 2020;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_END_MONTH \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_END_DAY \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_END_HOUR \u003d 2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_END_MINUTE \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final String DEFAULT_LOCATION_NAME \u003d \"University Town\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final String DEFAULT_DESCRIPTION \u003d \"Tea party\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final Priority DEFAULT_PRIORITY \u003d Priority.LOW;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected TimeSlot timeSlot;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    protected AttendeeList attendees;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    protected Location location;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    protected Priority priority;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Constructs the EngagementBuilder with default details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementBuilder() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.of(DEFAULT_START_YEAR,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                DEFAULT_START_MONTH, DEFAULT_START_DAY, DEFAULT_START_HOUR, DEFAULT_START_MINUTE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime endTime \u003d LocalDateTime.of(DEFAULT_END_YEAR,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                DEFAULT_END_MONTH, DEFAULT_END_DAY, DEFAULT_END_HOUR, DEFAULT_END_MINUTE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        timeSlot \u003d new TimeSlot(startTime, endTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        List\u003cPerson\u003e defaultAttendees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        PersonBuilder personBuilder \u003d new PersonBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        defaultAttendees.add(personBuilder.build());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        attendees \u003d new AttendeeList(defaultAttendees);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION_NAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        priority \u003d DEFAULT_PRIORITY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Initializes the EngagementBuilder with the data of {@code engagementToCopy}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementBuilder(Engagement engagementToCopy) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        timeSlot \u003d engagementToCopy.getTimeSlot();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        attendees \u003d engagementToCopy.getAttendees();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        location \u003d engagementToCopy.getLocation();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        description \u003d engagementToCopy.getDescription();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        priority \u003d engagementToCopy.getPriority();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns an appointment, which is a type of engagement, with default the details."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return An appointment with the default details."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Engagement buildAsAppointment() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement engagement \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            engagement \u003d Engagement.of(EngagementType.APPOINTMENT, timeSlot, attendees, location,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    description, priority);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // Exception should not be thrown when using the default times."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagement;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns an appointment, which is a type of engagement, with default the details."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return An interview with the default details."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Engagement buildAsInterview() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement engagement \u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            engagement \u003d Engagement.of(EngagementType.INTERVIEW, timeSlot, attendees, location,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    description, priority);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // Exception should not be thrown when using the default times."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagement;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns an appointment, which is a type of engagement, with default details."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return A meeting with the default details."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Engagement buildAsMeeting() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement engagement \u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            engagement \u003d Engagement.of(EngagementType.MEETING, timeSlot, attendees, location,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    description, priority);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // Exception should not be thrown when using the default times."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagement;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets the {@code description} of the {@code Engagement} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets the {@code startTime} and {@code endTime} of the {@code Engagement} that we are building."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementBuilder withStartAndEndTime(LocalDateTime startTime, LocalDateTime endTime) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        requireNonNull(startTime);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        requireNonNull(endTime);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assert startTime.compareTo(endTime) \u003c 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.timeSlot \u003d new TimeSlot(startTime, endTime);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets the {@code attendees} of the {@code Engagement} that we are building."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementBuilder withAttendees(AttendeeList attendees) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets the {@code location} of the {@code Engagement} that we are building."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementBuilder withLocation(Location location) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets the {@code priority} of the {@code Engagement} that we are building."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementBuilder withPriority(Priority priority) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 10,
      "lyskevin": 150
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return new Person(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 1,
      "nordic96": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        sb.append(CliSyntax.PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the part of command string for the given {@code EditEngagementDescriptor}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditCommand.EditEngagementDescriptor descriptor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(CliSyntax.PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "nordic96": 7,
      "-": 28
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEngagementList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEngagementList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Engagement getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return model.getFilteredEngagementList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 5,
      "nordic96": 3,
      "-": 47
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/TypicalEngagements.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.HistoryManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * A utility class containing a list of {@code Engagement} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class TypicalEngagements {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Engagement TYPICAL_APPOINTMENT \u003d new EngagementBuilder().withDescription(\"Appointment\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .withStartAndEndTime(LocalDateTime.of(2019, 10, 20, 10, 0),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    LocalDateTime.of(2019, 10, 20, 11, 0))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .buildAsAppointment();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Engagement TYPICAL_INTERVIEW \u003d new EngagementBuilder().withDescription(\"Interview\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .withStartAndEndTime(LocalDateTime.of(2019, 10, 20, 12, 0),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    LocalDateTime.of(2019, 10, 20, 13, 0))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .buildAsInterview();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Engagement TYPICAL_MEETING \u003d new EngagementBuilder().withDescription(\"Meeting\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .withStartAndEndTime(LocalDateTime.of(2019, 10, 20, 17, 0),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    LocalDateTime.of(2019, 10, 20, 21, 0))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .buildAsMeeting();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Engagement LUNCH_APPOINTMENT \u003d new EngagementBuilder().withDescription(\"Lunch\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .withStartAndEndTime(LocalDateTime.of(2019, 11, 20, 10, 0),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    LocalDateTime.of(2019, 11, 20, 11, 0))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .buildAsAppointment();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Engagement GOOGLE_INTERVIEW \u003d new EngagementBuilder().withDescription(\"Googs\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .withStartAndEndTime(LocalDateTime.of(2019, 11, 20, 12, 0),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    LocalDateTime.of(2019, 11, 20, 13, 0))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .buildAsInterview();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Engagement TEAM_MEETING \u003d new EngagementBuilder().withDescription(\"Team Project Meeting\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .withStartAndEndTime(LocalDateTime.of(2019, 11, 20, 17, 0),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    LocalDateTime.of(2019, 11, 20, 21, 0))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .buildAsMeeting();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private TypicalEngagements() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns an {@code EngagementList} with all the typical persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static HistoryManager getTypicalEngagementList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList engagementList \u003d new EngagementList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        for (Engagement engagement : getTypicalEngagements()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            engagementList.addEngagement(engagement);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        HistoryManager hm \u003d new HistoryManager(engagementList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return hm;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static List\u003cEngagement\u003e getTypicalEngagements() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TYPICAL_APPOINTMENT, TYPICAL_INTERVIEW, TYPICAL_MEETING));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 61
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Index INDEX_FIRST_ENGAGEMENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Index INDEX_SECOND_ENGAGEMENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Index INDEX_THIRD_ENGAGEMENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "lyskevin": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").build();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").build();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(CommandTestUtil.VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns an {@code EngagementList} with all the typical persons."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static HistoryManager getTypicalAddressBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList ab \u003d new EngagementList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ab.addEngagement(person);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        HistoryManager hm \u003d new HistoryManager(ab);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return hm;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 9,
      "uggi121": 7,
      "nordic96": 5,
      "brebeek": 3,
      "lyskevin": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/com/typee/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/com/typee/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 112
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003c?import com.typee.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import com.typee.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003cfx:root type\u003d\"com.typee.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 6
    }
  }
]
