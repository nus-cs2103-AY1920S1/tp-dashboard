[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d Alfred: The Hackathon Butler"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "https://travis-ci.com/AY1920S1-CS2103T-F11-1/main[image:https://travis-ci.com/AY1920S1-CS2103T-F11-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "https://app.netlify.com/sites/alfred-the-hackathon-butler/deploys[image:https://api.netlify.com/api/v1/badges/fa789a98-6a94-45b4-80c6-ea8807ad74b1/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "**Alfred isn\u0027t just for Batman. He\u0027s for all you Hackathon Organisers out there, too!**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "[quote, Alfred Pennyworth, The Dark Knight]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Will you be wanting the Batpod, sir?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Targeting the Human Resource Managers tasked with organising and managing Hackathons, Alfred is a Desktop application meant to make the job easier."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* The application provides a quick, simple and intuitive interface to manage the logistics and administrative details behind Hackathons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* The application has a Graphical User Interface, but most of the user interactions happen using a CLI (Command Line Interface)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* The origin of this codebase is the AddressBook-Level3 project, created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Some parts of this sample application for AddressBook-Level3 were in turn inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 11,
      "-": 25,
      "john0227": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    jcenter()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    compile \"org.mockito:mockito-core:2.+\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    implementation \"de.jensd:fontawesomefx-fontawesome:4.7.0-11\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    compile \u0027com.jfoenix:jfoenix:9.0.8\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    compile \u0027com.jfoenix:jfoenix:8.0.8\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        \u0027site-name\u0027: \u0027Alfred\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F11-1/main\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 4,
      "-": 153,
      "hcwong": 3,
      "Joanna-YJA": 3
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "git grep -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "hcwong": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "AddressBook3 (AB3) was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "AB3 is to be morphed into Alfred - an app that is to be used by Hackathon HR managers to manage"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "their events. This project was developed by group F11 of CS2103T. Our team repo can be found"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F11-1/main[here]. +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d Abhiman Yadav"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "image::abhiman2211.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "{empty}[http://github.com/Abhiman2211[github]] [\u003c\u003cabhimanyadav#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "Role: Product Design +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "Responsibilities: Parser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d Brian Yen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "image::brianyenna.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "{empty}[http://github.com/brianyenna[github]] [\u003c\u003cbrianyen#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d Joanna Yap"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "image::joanna-yja.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "{empty}[http://github.com/Joanna-YJA[github]] [\u003c\u003cjoannayap#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "Role: Quality Assurance +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d John Min"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "image::john0227.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "{empty}[http://github.com/john0227[github]] [\u003c\u003cjohnmin#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "Responsibilities: Command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d Joshua Wong"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "image::hcwong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "{empty}[http://github.com/hcwong[github]] [\u003c\u003cjoshuawong#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "Role: Project Management + Git Master +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "Responsibilities: Model + Entity"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "john0227": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F11-1/main/issues[issue tracker]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "   if you noticed bugs or have suggestions on how to improve Alfred."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "* *Email us* : You can also reach us through mailto:kyungho.min@u.nus.edu[this email]"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "john0227": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003d Alfred The Hackathon Butler - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "By: `Team Alfred`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Alfred is a desktop application to help Hackathons\u0027 Human Resource Managers organise a Hackathon event more efficiently and in an organized fashion. Currently, hackathon organizers have to keep track of various different groups of individuals on several different platforms in order to organize this single event. Alfred allows them to ease the  a hackathon\u0027s organization by bringing in all those platforms into a single app, thereby offering them greater orderliness and convenience in organizing their event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Any help on the development of Alfred would be greatly appreciated, and there are a couple of ways in which you could; either by contributing to Alfred\u0027s codebase by expanding its features or, testing and improving it\u0027s current features. This guide seeks to not only kick-start your journey as a contributor to Alfred by quickly getting you up to speed with how Alfred\u0027s codebase and inner workings function, but also hopes serve as a useful reference to current contributors in times or confusion or difficulties."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Image here to the updated in the later milestones."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "UI image and description to be updated with the later milestones."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `EntityListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* Looks at the prefix commandType given in the CommandResult(returned after every Command is executed), as displays the specific EntityListPanel respectively."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Logic Architecture image and description to be updated with the later milestones."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ".  `Logic` uses the `AlfredParser` class to parse the user command."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ".  This can result in one of two possibilities:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* a new `CommandAllocator` object is created to allocate the user input to appropriate entity-specific `Parser`. The `CommandAllocator` \u0027s `allocate` method then returns a new Command object which is executed by the LogicManager, or"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* the appropriate `Parser` is directly called if no specifying is required and returns a new  `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a participant or deleting a team)."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete participant P-1\")` API call."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "NOTE: The lifeline for `DeleteParticipantCommandParser` and `DeleteCommandAllocator` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "image::BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* stores the lists of our various entities."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* Model is the bridge between Logic and Storage and provides an abstraction of how the data is stored in memory."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* It exposes a `ReadableEntityList` which only has the list method to remind Logic that the data given should not be modified."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* The UI can be bound to these lists so that it automatically updates when the contents of the list change."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* At the heart of the model are observable lists which allow for the dynamic updating of the UI."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* The `Model` interface also serves as an API through which controller can edit the data stored in memory."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": "`ModelManager`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* ModelManager implements all the methods exposed by the Model Interface. At its heart, it only contains 3 `EntityLists`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": ", 3 `FilteredLists` and a `UserPrefs` Object and does all the validation logic needed for the application"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".Simple Illustration of ModelManager"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hcwong"
        },
        "content": "image::ModelManagerClassDiagram.png[]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".EntityList simplified structure"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hcwong"
        },
        "content": "image::EntityListClassDiagram.png[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "The Storage component transforms the AB3 implementation in order to support the storage of the 3 main EntityLists (ParticipantList, MentorList and TeamList), as these form the bulk of our data. In future versions, Storage would need to be udpated to support other data for Alfred as well (such as Food and Swag, which are scheduled for release in v2.0)."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "image::AlfredStorageClassDiagram.png[]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/AlfredStorage.java[`AlfredStorage.java`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "The `Storage` component:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* can save the `ParticipantList` data in json format and read it back."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* can save the `MentorList` data in json format and read it back."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* can save the `TeamList` data in json format and read it back."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Details:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Each Entity has a class to deal with it (i.e. for Participant, you have `ParticipantListStorage`, `JsonParticipantListStorage` etc.). Hence, for the rest of this explanation, Entity will be used as a generic term for Participants/Mentors/Teams."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* The class implementing the `EntityListStorage` is `JsonTeamEntityStorage`. This class is responsible for providing the read/save functionality for the entire EntityList to `AlfredStorageManager`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* In order to save the entire `EntityList` in JSON, the class `JsonSerializableEntityList` implements the logic for serialization. This is achieved by converting the `EntityList` to a `List\u003cJsonAdaptedEntity\u003e`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* In order to save each individual Entity, the Entity is in turn converted to a `JsonAdaptedEntity` object, which has methods for converting the serialized object back into an Entity object for `AlfredStorage` to return to `ModelManager`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "The undo/redo mechanism is faciliated by `ModelHistoryManager`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "The `ModelHistoryManager` object keeps track of the state of the data in `ModelManager` at the end of the execution of each command. It keep a deep copy of all the EntityList data."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Whenever the `undo` command is invoked, `ModelHistoryManager` returns a `ModelHistoryRecord` which contains the state of the data prior to the execution of the previous command. The EntityLists contained within `ModelHistoryRecord` are then used by the `ModelManager` for its operations."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//If a command fails its execution, it will not call `Model#commit"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//NOTE: To be updated with the later milestones."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//** Pros: Easy to implement."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates //Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//// end::undoredo[]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003d\u003d\u003d Data Encryption"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* Human Resource Admin In-Charge of School of Computing \u0027Hackathon\u0027 Event"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* has a need to register participants in bulk"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* has a need to classify contacts into Mentor, Participants and Teams"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* has a need to keep track of which member is in which Team"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* has a need to keep track of the seating positions of each Team"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* has a need to keep track of Mentor assignments to Teams"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* has a need to keep track of the competition winners and prizes won"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* has a need to search for specific Mentor, Team or Participant at times"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* can commandType fast"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* keep track of the relationship between Participant, Team and Mentor, such that it can be referenced at times"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* store a significant number of contacts in an organised, readable manner"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[width\u003d\"79%\",cols\u003d\"15%,\u003c20%,\u003c35%,\u003c37%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |find a Entity by name |locate details of Entity without having to go through the entire list"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |delete an Entity by name |remove entries I no longer need"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |add an Entity by name and contact information |update the list of Entities"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |updated an Entity by name and contact information |update the specific entries"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |register individuals en-masse(with provided registration information) | avoid tedious manual registration"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |keep track of winning teams and the prizes won | ensure that the prize-giving ceremony runs smoothly"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |keep track of winning teams and the prizes won | ensure that the prize-giving ceremony runs smoothly"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |make sure that I will be notified on any wrong commands that I commandType | make sure that I do not accidentally clutter up my list of entries"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |have a readable and organised User Interface | understand the output of my commands"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |keep track of participants who signed up late or after the event has filled up into a waitlist | manage them in case available space turns up during the Event"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |manually match Teams to Mentor | know which Mentor is in charge of a team"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |keep track of where each Team or Mentor is seating|usher them to their places during the actual event"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* *` |Admin In-Charge |know my sponsor\u0027s needs and arrival time | adequately cater to their needs and allocate manpower accordingly"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* *` |Admin In-Charge |keep track of inventory of swag | make sure they are adequately catered to all participants"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* *` |Admin In-Charge |keep track of amount of food or catering | make sure they are adequately catered to all participants"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`*` |Admin In-Charge |automatically match Teams to Mentor by their expertise and project commandType of the Team | do not need to perform the matching manually"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`*` |Admin In-Charge |schedule meetings between Teams and Mentors | lets Mentors know when to consult each Team in an organised manner"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "(For all use cases below, the *System* is the `HackathonManager` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003d\u003d\u003d Use case: Delete an Entity Type(Participant, Mentor, Team)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "1.  User requests a list of an entity commandType"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "2.  HackathonManager shows a list of that entity commandType"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "3.  User requests to delete a specific entity in the list by name"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "4.  HackathonManager deletes the person"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* 3a. The given name is invalid."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 3a1. HackathonManager shows an error message."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003d\u003d\u003d Use case: Find an Entity of a specific Entity Type(Participant, Mentor, Team)"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "1.  User requests a find an Entity of a specific Entity Type."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "2.  HackathonManager indicates success and shows the details of the Entity."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* 1a. The Entity is not found in the list of Entities."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a1. HackathonManager shows an error message."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003d\u003d\u003d Use case: Create an Entity of a specific Entity Type(Participant, Mentor, Team)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "1.  User requests to create an Entity by specifying the Entity Type and contact information."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "2.  HackathonManager indicates success and shows the details of the Entity."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003d\u003d\u003d Use case: Update an Entity of a specific Entity Type(Participant, Mentor, Team)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "1. User requests a list of an entity commandType"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "2.  HackathonManager shows a list of that entity commandType"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "3.  User requests to update a specific entity in the list by name or index"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "4.  HackathonManager updates the person"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* 1a. The name is not found it the list of Entities."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a1. HackathonManager shows an error message."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a2. User enters new name."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Steps 1a1-1a2 are repeated until the index or name is found in the list of Entities."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* 1b. The index is not found it the list of Entities."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a1. HackathonManager shows an error message."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a2. User enters new index."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Steps 1a1-1a2 are repeated until the index is found in the list of Entities."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003d\u003d\u003d Use case: Find the top scoring K Teams"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "1. User requests the top scoring K Teams, with K being the user input."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "2. HackathonManager displays the top K teams with their respective scores."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* 1a. The user input K is more than total number of Teams or a negative or invalid integer."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a1. HackathonManager shows an error message."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a2. User re-enters command with new user input of value K."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Steps 1a1-1a2 are repeated until K is within the total number of Teams."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003d\u003d\u003d Use case: Find the ranking of all Teams"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "1. User requests a for the top scorers of a specific category"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "2.  HackathonManager shows the leaderboard of the category, with respective score of each team."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* 1a. The catergory is not found."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a1. HackathonManager shows an error message."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a2. User enters category."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Steps 1a1-1a2 are repeated until the category is found."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The system should not seem sluggish if it contains less than 1500 entities."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  Project is not intended for use on mobile and only should be used on desktop."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The application assumes that the user is comfortable with the concept of the command line."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The application is meant to run offline."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The application is largely a personnel/HR manager, and is not expected to do anything more than that (eg hackathon finances etc)."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The application is to be used for a single hackathon only and not for multiple hackathons."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The application assumes that the hackathon is a short term affair (no longer than 4 days)."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The application assumes that this is an English medium hackathon and that no non-English names are expected."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The GUI should display the result of commands in an intuitive, organized manner that is readable by the laymen(as part of the organization/ affordability of the application)."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[[logging]] Logging::"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Logging uses file(s) containing information about the activity of a computer program for the developers to consult and monitor."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[[entity]] Entity::"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Entities are the main objects Alfred stores. The Entities are Participant, Mentor and Team as described below."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[[participant]] Participant::"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "hcwong"
        },
        "content": "It represents a participant taking part in the hackathon"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[[mentor]] Mentor::"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "hcwong"
        },
        "content": "It represents a mentor available for teams to choose"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[[team]] Team::"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Team is the base unit of this project. It contains references to an associated list of participants and an optional mentor."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "hcwong"
        },
        "content": "*Google Sheets*"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Author: Google"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* This is extremely versatile as Google Sheets come with a list of extremely helpful macros that could help in the storage of participants."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* The display and UI of Google Sheets is extremely intuitive and will come as second nature to anyone using the web."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* Convenient and accessible by multiple HR personnel simultaneously."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* Google Sheets has no concept of objects and thus it cannot accurately depict the relationships between our different entities."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* As above, it is hard to look for relationships between our entities, such as Team/Participant associations."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* Google Sheets may be useful for storing information, but it does not support command line arguments."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* Google Sheets is also unable to perform input validation as it lacks the logic to do so."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "hcwong"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum. +"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "hcwong"
        },
        "content": "   _Note: If you are a OS X user, you might need to run this from your command line instead._"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003d\u003d\u003d Deleting a Participant"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "hcwong"
        },
        "content": ". Deleting a Participant while all participants are listed"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".. Prerequisites: List all participants using the `list participants` command. Multiple participants in the list."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".. Test case: `delete participant P-1` +"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "hcwong"
        },
        "content": "   Expected: Participant with id P-1. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".. Test case: `delete participant P-101212323` +"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "hcwong"
        },
        "content": "   Expected: No participant is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".. Prerequisites: Create a JSON with corrupted data, or any data at all"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".. Test case: Start the application. Logger should  kindly inform you that the storage files"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "hcwong"
        },
        "content": "are corrupted and hence it defaults to using empty lists."
      }
    ],
    "authorContributionMap": {
      "brianyenna": 104,
      "Abhiman2211": 15,
      "-": 291,
      "Joanna-YJA": 156,
      "hcwong": 68
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003d Alfred - The Hackathon Butler User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ":toclevels: 5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ":sectnumlevels: 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-1/main/tree/master"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ":releaseURL: https://github.com/AY1920S1-CS2103T-F11-1/main/releases"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "By: `Team F11-1`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Since: `August 2019`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Licence: `MIT`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Alfred is a desktop application to help Hackathons\u0027 Human Resource Managers organise a Hackathon event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Hackathons are difficult to manage manually as they involve different groups of individuals, each"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "of whom have a different role to play and agenda to fulfill in the Hackathon. Alfred helps streamline"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "this organisation and management process, allowing you to quickly get up to speed with the logistics"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "and administrative details of the Hackathon you are organising."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Furthermore, Alfred is *optimized for those who prefer to work with a Command Line Interface (CLI)*, while"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "maintaining the benefits of having visual responses in a Graphical User Interface."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Interested? Well, head to \u003c\u003cQuick Start\u003e\u003e to get started. We hope Alfred serves you well!"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ".  Download the latest `alfred.jar` link:{releaseURL}[here]."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for Alfred."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ".  Double-click the file to start the app. Alternatively, if you use a Mac, commandType the command `java -jar alfred.jar`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "on terminal in the jar file\u0027s directory to open start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ".  Here are some sample commands you can experiment with:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* *`list teams`* : lists teams in the hackathon"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* *`add participant n/Bartholomew Lim p/97654321 e/barrytheflash@superheros.com`* : adds a new participant named `Bartholomew Lim` to the Hackathon."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* *`delete participant P-1`* : removes the participant with ID P-1 from the hackathon."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "*Prelude - Command Format*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* Words in `UPPER_CASE` are the parameters which you need to supply. For example, in `add mentor n/NAME`,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`NAME` is a parameter which you need to specify as the mentor\u0027s name, for example `add mentor n/John Doe`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* You can commandType the parameters in any order. For instance, if the command specifies `n/NAME p/PHONE_NUMBER`,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "you may input `p/PHONE_NUMBER n/NAME` and Alfred will still deem it as an acceptable command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Words in {curly braces} indicate values for the command that you need to select and provide."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** For example in the case of `add {mentor/participant/list}`, you can choose to commandType `add mentor`, `add participant` or `add team`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "* Words in [brackets] indicate values that are optional for the command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "** For example, in the case of `export [CSV_FILE_PATH]`, you can choose to leave out the file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* Whenever you need to specify an ID, the ID will be prefixed with an alphabet indicating the commandType of the Entity (e.g. M for Mentors, P for Participants, T for Teams)."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* Type your commands in the textbox displayed on the Alfred UI. After you are done typing the command, press ENTER on your keyboard to execute the command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Saving the data:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Data in Alfred is saved to the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "There is no need for you to save the data manually."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help` (Coming in v1.3)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "If at anytime you don\u0027t understand how to do a certain thing on Alfred, use this command to display a"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "help page in a separate pop-up window. Should you require further information,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "the pop-up window also includes links to further references and documentation. +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Adding an Entity: `add {participant/mentor/team}`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Use this command to add a new entity for Alfred to keep track of. +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Creates an Entity as specified by you. Each Entity object will have a unique ID automatically assigned to it."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* As of version 1.1, you must provide all the fields. There are no optional fields."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a Participant: `add participant [PARAMETERS]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Use this command to add a new Participant to Alfred to keep track of for your hackathon."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Participants have the fields \"Name\", \"Phone number\" and \"Email address\" which you must provide."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Format: `add participant n/NAME p/PHONE_NUMBER e/EMAIL_ADDRESS`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* `add participant n/John Doe p/98765432 e/johnd@example.com`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* `add participant n/Betsy Crowe e/betsycrowe@example.com p/1234567`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a Mentor: `add mentor [PARAMETERS]`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Use this command to add a new Mentor to Alfred to keep track of for your hackathon."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Mentors have the fields \"Name\", \"Phone number\" and \"Email address\" which you must provide."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Mentors also have a field called \"Organization\", which refers to the organization for which they work."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Mentors also have a field called \"Specialisation\", which refers which is the field of work they specialise in. The Specialisation must be chosen from the predetermined list of specialisations given in Section (some number)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Format: `add mentor  n/NAME p/PHONE_NUMBER e/EMAIL_ADDRESS o/ORGANIZATION s/SPECIALISATION`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* `add mentor n/Professor Superman p/91236549 e/clarkkent@gmail.com o/Daily Planet s/Artificial Intelligence`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* `add mentor n/Doctor Batman p/91236549 e/bruce@gmail.com o/Google s/Augmented Reality`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a Team: `add team [PARAMETERS]`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Use this command to add a new Team to Alfred to keep track of for your hackathon."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Teams have the fields \"Name\", \"Project name\" and \"Table Number\" which you must provide."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Teams also have a field called \"Subject\", which refers the area the team\u0027s project focuses on, and must be chosen from the predetermined list of subjects given in Section (some number)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Format: `add team n/NAME s/SUBJECT pn/PROJECT_NAME pt/PROJECT_TYPE l/TABLE_NUMBER`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `add team n/Team01 s/Artificial Intelligence pn/EmotionTrain pt/Public Welfare l/12`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `add team n/HackathonWinners4Sure s/Augmented Reality pn/Path-ify pt/Navigation l/23`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003d\u003d\u003d Updating an Entity: `edit {mentor/participant/team} ENTITIY_ID [PARAMETERS]`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Edits an entity based on the parameter values you supply. Use this command in case you want to make changes to an entity you have already created within Alfred."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* Updates the fields of the Entity with the `ENTITY_ID` you specified to the new fields you commandType in as the parameter. The ID is the unique identifier for the particular Entity you wish to edit."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* You must provide at least one of the optional fields."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* The fields you provide must pertain to the specified entity in order for the edit to be successful. For instance, you cannot add a field \"pn/NewProjectName\" for a participant as a participant doesn\u0027t have a project name."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* Existing values will be updated to the input values you provide."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* `edit mentor M-1 n/NewMentorName `"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* `edit team T-1 n/NewTeamName pn/New Project Name`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* `edit participant P-1 n/NewParticipantNAme`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d Listing all Entities : `list {mentors/participants/teams}`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Shows a list of all the entities corresponding to the entity you specified that Alfred keeps track of."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* The fields of the Entity will be displayed on Alfred\u0027s Graphical User Interface."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `list mentors` will list all mentors stored within Alfred."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `list participants` will list all hackathon participants stored within Alfred."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `list teams` will list all hackathon teams stored within Alfred."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d Deleting an Entity: `delete {mentor/participant/team} ID`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "john0227"
        },
        "content": "Deletes an Entity, so that Alfred will no longer keep track of that Entity."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* Deletes the Entity with the ID that you specify."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `delete mentor M-1` will delete the mentor with ID M-1 from Alfred."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `delete participant P-1` will delete the participant with ID P-1 from Alfred."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `delete team T-1` will delete the team with ID T-1 from Alfred."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Finding a Specific Entity: `find {mentor/team/participant} n/NAME`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Searches for Entities by their name, instead of their ID, in case you find that the ID is difficult to keep track of. +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Take note that the `find` command only searches and matches the names of each Entity, and does not search in other fields."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `find mentor n/Joshua Wong` will display a list of all mentors in the Hackathon who are named \"Joshua Wong\", or have \"Joshua Wong\" in their name."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "john0227"
        },
        "content": "* `find participant n/John Doe` will display a list of all participants in the Hackathon who are named \"John Doe\", or have \"John Doe\" in their name."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `find team n/FutureHackathonWinner` will display a list of all teams in the Hackathon that are named \"FutureHackathonWinner\", or have \"FutureHackathonWinner\" in their name."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Show Command History: `history`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Shows you up to the last 50 commands that you executed."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* This command is to facilitate the undo/redo commands, as it becomes easier for you to track what changes were made before."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Above the `\u003d` delimiter are the commands that can be re-done. (see the example below)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Below the `\u003d` delimiter are the commands that can be un-done. (see the example below)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Running `history` could give you the following output in the Graphical User Interface:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "```"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "2. AddParticipantCommand"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "1. AddTeamCommand"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "1. AddParticipantCommand"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "2. AddParticipantCommand"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "3. AddMentorCommand"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "```"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Above the `\u003d` delimiter are the commands that you can re-do, listed in consecutive order. Hence, calling the `redo` command will redo the `1. AddTeamCommand` command. Calling the `redo` command once more will redo the `2. AddParticipantCommand` command."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Below the `\u003d` delimiter are the commands that you can un-do, listed in consecutive order. Hence, calling the `undo` command once will undo the `1. AddParticipantCommand` command. Calling the `undo` command once more will undo the `2. AddTeamCommand` command. Note that it is not possible to undo beyond the last listed command below the `\u003d` delimiter."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "In other words, calling `undo` will undo the command immediately below the `\u003d` delimiter, and calling `redo` will redo the command immediately above the `\u003d` delimiter."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Undo Previous Commands: `undo`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Undoes the previous command you executed."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Undoes the effects of the previous command you executed, and will return Alfred to the previous state (as though you never executed the previous command)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* All commands that can be undone can be found in the output of the `history` command."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* To be certain which command you are actually undo-ing, first run the `history` command and examine the output."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Only the commands that actually change the data in Alfred will be undo-able. Commands that perform read operations (such as `find` and `list`) will not be found in the output of the `history` command. (Coming in v1.4)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Redo Previous Commands: `redo`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Redoes the previous command you executed."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Redoes the effects of the previous command you executed, and will return Alfred to the previous state (as though you never executed the previous command)."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* All commands that can be redone can be found in the output of the `history` command."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* To be certain which command you are actually redo-ing, first run the `history` command and examine the output."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Only the commands that actually change the data in Alfred will be redo-able. Commands that perform read operations (such as `find` and `list`) will not be found in the output of the `history` command. (Coming in v1.4)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Judging and Leaderboard Features"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d List Team Ranking: `leaderboard`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Use this command to display the ranking of the teams in the hackathon in descending order of their points."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Once you run this command, Alfred\u0027s UI will display a list of all the teams stored within Alfred sorted in descending order of their points."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003d\u003d\u003d\u003d Get the top k teams: `getTop NUMBER`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Use this command to list the top k teams in the leaderboard, where k is a number (NUMBER) which you specify."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* This command will show you a cropped version of the leaderboard."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Alfed\u0027s UI will display a list of top \"k\" teams based on their current score."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* If you input \"k\" as a number more than the number of teams in the hackathon, Alfred will simply display all the teams in the Hackathon."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "****"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* If you input `NUMBER` as a number more than the number of teams in the hackathon, Alfred will simply display all the teams in the Hackathon in descending order of their points."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "****"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "****"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* If you input `NUMBER` as a number more than the number of teams in the hackathon, Alfred will simply display all the teams in the Hackathon in descending order of their points."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "****"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `getTop 5` will display the top 5 teams with the highest points in the hackathon."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `getTop 20` will display the top 20 teams with the highest points in the hackathon."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003d\u003d\u003d\u003d Add points: `score add TEAM_ID POINTS`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Adds the value of POINTS to the current score of the team with ID TEAM_ID."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "****"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Use this command when you want to award a particular team a certain amount of points."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* If you try to award more than the maximum amount of points (which is set to 100 points as default), Alfred will not allow it and will display an error message."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* If the addition of points makes the team\u0027s total exceed the maximum, the score will simply be set to the maximum score."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "****"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `score add T-1 20` will add 20 points to the score of the team with ID T-1."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `score add T-5 60` will add 60 points to the score of the team with ID T-5."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003d\u003d\u003d\u003d Subtract points: `score sub TEAM_ID NEW_POINTS`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Deducts the value of POINTS from the current score of the team with ID TEAM_ID."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "****"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Use this command when you want to take away a certain amount of points from a particular team."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* If you try to subtract more than the maximum amount of points (which is set to 100 as default), Alfred will not allow it and will display an error message. If the subtraction of points makes the team\u0027s total go below the minimum (which is set to 0 points), the score will simply be set to 0."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "****"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `score sub T-1 15` will subtract 20 points from the score of the team with ID T-1."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `score sub T-5 10` will subtract 10 points from the score of the team with ID T-5."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003d\u003d\u003d\u003d Set points: `score set TEAM_ID NEW_POINTS`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Sets the score of the team with ID TEAM_ID to a new score NEW_POINTS, regardless of the team\u0027s current score."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "****"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Use this command when you want to set a team\u0027s score to an exact score, rather than adding or subtracting points from their current score."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* If you try to set more than the maximum amount of points (which is set to 100 as default), Alfred will not allow it and will display an error message."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "****"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `score set T-1 15` will set the score of the team with ID T-1 as 15."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `score set T-5 10` will set the score of the team with ID T-5 as 10."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "john0227"
        },
        "content": "Do note that if you try to subtract more than the maximum amount of points (which is set to 100 as default), Alfred will not allow it and will display an error message. If the subtraction of points makes the team\u0027s total go below the minimum (which is set to 0 points), the score will simply be set to 0."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d Bulk Registration: `import fp/PATH_TO_CSV_FILE`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "john0227"
        },
        "content": "You may import multiple entities at once into Alfred through the specification of a CSV file."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "john0227"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "john0227"
        },
        "content": "* `import fp/C:/User/Hackathon2019/participant.csv` will import data from the participant.csv file into Alfred."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "john0227"
        },
        "content": "* `import fp/Hackathon2019/participant.csv` will look for the CSV file in your current directory (or the folder where alfred.jar is downloaded)."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d\u003d CSV File Formatting"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "john0227"
        },
        "content": "In order for the contents of the CSV file to be correctly loaded into Alfred, the file has to be in the correct format."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "john0227"
        },
        "content": "****"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "`EntityType` - single capital letter representing the entity commandType"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "john0227"
        },
        "content": "* **Mentor:** M"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "john0227"
        },
        "content": "* **Participant:** P"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "john0227"
        },
        "content": "* **Team:** T"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "john0227"
        },
        "content": "`ID` - the ID of the entity (optional)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "john0227"
        },
        "content": "* **Mentor:** M-`d`, where `d` can be any positive integer"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "john0227"
        },
        "content": "* **Participant:** P-`d`, where `d` can be any positive integer"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "john0227"
        },
        "content": "* **Team:** T-`d`, where `d` can be any positive integer"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "john0227"
        },
        "content": "** You can also express `ID` as only a positive integer."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "john0227"
        },
        "content": "`Name`, `Organization`, `ProjectName` - can be any combination of spaces, letters, and these special characters (,.-\u0027)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "john0227"
        },
        "content": "`Phone` - can be any combination of numbers and country code may be included"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "john0227"
        },
        "content": "`Email` - must include an address and an email domain"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "john0227"
        },
        "content": "`SubjectName` - the subject a mentor or team will be focusing on in the Hackathon +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "john0227"
        },
        "content": "Must be one of the values below:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "john0227"
        },
        "content": "* Environmental"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "john0227"
        },
        "content": "* Social"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "john0227"
        },
        "content": "* Health"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "john0227"
        },
        "content": "* Education"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "john0227"
        },
        "content": "`Score` - must be an integer ranging from 0 to 100"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "john0227"
        },
        "content": "`Location` - must be an integer ranging from 0 to 1000"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "john0227"
        },
        "content": "****"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Mentor Data"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "john0227"
        },
        "content": "Header: `EntityType,ID,Name,Phone,Email,Organization,SubjectName`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "john0227"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "john0227"
        },
        "content": "* M,M-1,Alfred the Mentor,12345678,alfred@batcave.com,Batcave Corp.,Education"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "john0227"
        },
        "content": "* M,1,Alfred the Mentor,+6512345678,alfred@batcave.com,Batcave Corp.,EDUCATION"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "john0227"
        },
        "content": "* M,,Alfred the Mentor,+65 12345678,alfred@batcave.com,Batcave Corp.,Education"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Participant Data"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "john0227"
        },
        "content": "Header: `EntityType,ID,Name,Phone,Email`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "john0227"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "john0227"
        },
        "content": "* P,P-1,Bruce Wayne,23456789,wbruce@wayne.ent,Wayne Ent.,Health"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "john0227"
        },
        "content": "* P,1,Bruce Wayne,+6523456789,wbruce@wayne.ent,Wayne Ent.,HEALTH"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "john0227"
        },
        "content": "* P,,Bruce Wayne,+65 23456789,wbruce@wayne.ent,Wayne Ent.,Health"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Team Data"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "john0227"
        },
        "content": "Header: `EntityType,ID,Name,Participants,Mentor,SubjectName,Score,ProjectName,Location`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "john0227"
        },
        "content": "`Participants` - A list of participant IDs in the team. +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "john0227"
        },
        "content": "This field is optional, but if it is included, participants with given ID must exist in Alfred."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "john0227"
        },
        "content": "`Mentor` - An ID of the mentor associated with the team. +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "john0227"
        },
        "content": "This field is also optional, but if it is included, mentor with given ID must exist in Alfred."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "john0227"
        },
        "content": "If you are importing multiple entity data at once, don\u0027t worry! Alfred will make sure Participant and Mentor data are loaded before Team data."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "john0227"
        },
        "content": "See example usage down below."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "john0227"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "john0227"
        },
        "content": "* T,T-1,Justice League,,,Social,100,Save the Earth,1"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "john0227"
        },
        "content": "* T,1,Justice League,[P-1|P-2|P-3],M-1,Social,100,Save the Earth,1"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "john0227"
        },
        "content": "* T,,Justice League,[P-1|P-2|P-3],M-1,Social,100,Save the Earth,1"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d Export Data: `export [{mentor/participant/team}] [fp/DESIRED_CSV_FILE_PATH]`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "john0227"
        },
        "content": "You may export Alfred data to an external CSV file. If the desired CSV file path is left empty, Alfred will create a CSV file at the default location (`./AlfredData/Alfred_Data.csv`)."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "john0227"
        },
        "content": "* `export` will export all entities\u0027 data in Alfred to `/AlfredData/Alfred_Data.csv`."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "john0227"
        },
        "content": "* `export mentor fp/data/Alfred.csv` will export all mentor data in Alfred to `/data/Alfred.csv`. If the any folders do not happen to exist, Alfred will create them for you."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hcwong"
        },
        "content": "\u003d\u003d\u003d Help command (Coming in v1.3)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hcwong"
        },
        "content": "The help command will list down all the commands you need to use this"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hcwong"
        },
        "content": "application properly!"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Simply run `help`."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003d\u003d\u003d Seating: `locate {PARTICIPANT/TEAM}` (Coming in v2.0)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Find where a particular participant or team is seated."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `locate n/Brian` will tell you where the participant Brian is seated."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `locate n/GenericTeamName` will tell you where the team GenericTeamName is seated."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Swag (Coming in v2.0)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Add Swag: `add swag DESCRIPTION QUANTITY`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Add swag to inventory"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Examples: `add swag Android Plushie 5`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Track inventory of available swags: `list swag`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "List the currently available swag"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Schedule (Coming in v2.0)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Add schedule: `addSchedule TIME TEAM_ID MENTOR_ID`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Add a schedule for a team"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Update schedule: `updateSchedule SCHEDULE_ID TIME TEAM_ID MENTOR_ID`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Update a schedule for a team"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Delete schedule: `deleteSchedule SCHEDULE_ID`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Delete a Schedule for a Team"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Food (Coming in v2.0)"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Add Food Company and Inventory: `addFoodCompany COMPANY_NAME INVENTORY QUANTITY`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Add a Food Company and it associated food item inventory"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Mark Food as Received: `receiveFood COMPANY_NAME INVENTORY QUANTITY`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Mark the inventory as received"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d List Food Inventory: `list food`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "List the food inventory and its current status (e.g. delivering, received)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Waitlist (Coming in v2.0)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Add to waitlist: `addToWaitList PARTICIPANT_ID`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Add a participant to a waitlist when the number of participants exceeds a stipulated capacity."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Remove from waitlist: `removeFromWaitList PARTICIPANT_ID`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Remove a participant from the waitlist."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d List by Registration Time: `listWaitList`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Go through the waitlist and list the participants in the waitlist in ascending orger of registration time."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* This helps fulfill a first-come-first-serve policy."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"2%,\u003c50%,\u003c50%,\u003c90%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Command |Function |Format|Example"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Add an Entity|Add an Entity for Alfred to keep track |`add participant n/NAME p/PHONE_NUMBER e/EMAIL_ADDRESS`| *Participant:* `add participant n/NAME p/PHONE_NUMBER e/EMAIL_ADDRESS`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Update an Entity|Edits an entity based on the supplied parameter values |`edit {mentor/participant/team} ID [PARAMETERS]` | *Participant:* `edit participant P01 n/NewParticipantName` *Team:* `edit team T01 n/NewTeamName pn/New Project Name` *Mentor:* `edit participant P01 n/NewMentorName`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|List all Entities |Shows a list of all the entities corresponding to the entity commandType |`list {mentors/teams/participants}`| *Participant:* `list participants` *Team:* `list teams` *Mentor:* `list mentors`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Deleting an Entity |Deletes an Entity, so that Alfred will no longer keep track of that Entity | `delete {participant/mentor/team} ID` | *Participant:* `delete participant P-1` *Team:* `delete team T-1` *Mentor:* `delete mentor M-1`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Finding an Entity |Searches for Entities by their name|`find {mentor/team/participant} NAME` | *Participant:* `find participant n/John Doe` *Team:* `find team n/FutureHackathonWinner` *Mentor:* `find mentor n/Joshua Wong`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|List Team rankings|Displays the ranking of the teams in the Hackathon in descending order of their points |`leaderboard`| *Team:* `leaderboard`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Get the top k teams |List the top k teams in the leaderboard, where k is a number (NUMBER) which you specify |`getTop NUMBER` | *Team:* `getTop 5`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Add points to a Team |Adds the value of POINTS to the current score of the team with TEAM_ID|`score add TEAM_ID POINTS` | *Team:* `score add T-1 20`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Subtracts points from a Team |Deducts the value of POINTS from the current score of the team with TEAM_ID |`score sub TEAM_ID NEW_POINTS`| *Team:* `score sub T-1 15`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Sets points of a Team |Sets the score of the team with TEAM_ID to a new score NEW_POINT |`score sub TEAM_ID NEW_POINTS` | *Team:* `score set T-1 15`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Bulk registration|Adds multiple participants at once into Alfred through the specification of a .csv file | `addBulk PATH_TO_CSV_FILE`| `addBulk C:\\User\\Hackathon2019\\participant.csv` will import data from the participant.csv file into Alfred"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Add a schedule for a Team |Adds a time slot where the Team of TEAM_ID meets with Mentor of MENTOR_ID |`addSchedule TIME TEAM_ID MENTOR_ID` | `addSchedule 1/2/2019 1400 T-1 M-1` the specified Mentor will meet with Team on 1st February 2019 2pm"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Update schedule of a Team |Updates the existing schedule of SCHEDULE_ID of a Team of  TEAM_ID. New schedule will be added if the Team does not have an existing schedule of SCHEDULE_ID | `updateSchedule SCHEDULE_ID TIME TEAM_ID MENTOR_ID` | `updateSchedule S01 1/2/2019 1400 T-1 M-1` Schedule S01 of T-1 will be updated to meet with Mentor M-1 at 1st February 2pm"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Delete a schedule for a Team |Deletes a time slot where the of SCHEDULE_ID |`deleteSchedule SCHEDULE_ID` | `deleteSchedule S-1`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Add addFoodCompany and Inventory|Adds a Food with COMPANY_NAME, INVENTORY_QUANTITY and CATERING_TIME|`addFoodCompany cn/COMPANY_NAME pax/INVENTORY QUANTITY t/CATERING_TIME`| `addFood cn/Neo\u0027s Garden pax/100 t/1/2/2019 1400`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Marked Food as received|Marks a Food with COMPANY_NAME and CATERING_TIME as received| `receivedFood cn/COMPANY_NAME pax/INVENTORY_QUANTITY` | `receiveFood cn/Neo\u0027s Garden pax/100`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|List all Food |Lists the inventory of Food |`list food`| `list food`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Add User to WaitList |Adds a prospective Participant by USER_ID to Waitlist | `addToWaitList USER_ID` | `addToWaitList U-1`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|Remove a User from WaitList |Removes a prospective Participant by USER_ID from Waitlist | `removeFromWaitList USER_ID` | `removeFromWaitList U-1`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|List all User in WaitList |Lists all prospective Participant in Waitlist | `listWaitList` | `listWaitList`"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 173,
      "Abhiman2211": 109,
      "-": 108,
      "Joanna-YJA": 47,
      "john0227": 89,
      "hcwong": 9
    }
  },
  {
    "path": "docs/diagrams/AlfredStorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u0027Declaration of Classes"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Package \" \"\u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Interface AlfredStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Interface ParticipantListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Interface MentorListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Interface TeamListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Class AlfredStorageManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Class JsonParticipantListStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Class JsonMentorListStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Class JsonTeamListStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Class JsonSerializableParticipantList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Class JsonSerializableMentorList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Class JsonSerializableTeamList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Class JsonAdaptedParticipant"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Class JsonAdaptedMentor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Class JsonAdaptedTeam"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Class ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "ModelManager -right-\u003e AlfredStorage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "AlfredStorageManager .up.|\u003e AlfredStorage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "AlfredStorageManager o--\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "AlfredStorageManager o--\u003e ParticipantListStorage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "AlfredStorageManager o--\u003e MentorListStorage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "AlfredStorageManager o--\u003e TeamListStorage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "JsonParticipantListStorage .up.|\u003e ParticipantListStorage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "JsonMentorListStorage .up.|\u003e MentorListStorage"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "JsonTeamListStorage .up.|\u003e TeamListStorage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "JsonUserPrefsStorage .up.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "JsonParticipantListStorage .down.\u003e JsonSerializableParticipantList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "JsonMentorListStorage .down.\u003e JsonSerializableMentorList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "JsonTeamListStorage .down.\u003e JsonSerializableTeamList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "JsonSerializableParticipantList .down.\u003e JsonAdaptedParticipant"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "JsonSerializableMentorList .down.\u003e JsonAdaptedMentor"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "JsonSerializableTeamList .down.\u003e JsonAdaptedTeam"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "JsonAdaptedTeam -right-\u003e JsonAdaptedMentor"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 53
    }
  },
  {
    "path": "docs/diagrams/ArchitectureDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Concepts/globe_internet\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Concepts/documents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Users/user\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package \" \"\u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    Class UI UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Main MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Commons LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Class \"Log Center\" as Logs UI_COLOR_T2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Hidden #FFFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Class HiddenUI #FFFFFF"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"\u003c$user\u003e\" as User MODEL_COLOR_T2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"\u003c$documents\u003e\" as File UI_COLOR_T1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Main -up-\u003e UI"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Main -left-\u003e Model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "UI -\u003e Logic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "UI -right-\u003e Model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Logic -\u003e Storage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Logic -down-\u003e Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Logs -right- Commons"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Hidden .down.\u003e Commons"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Hidden .down.\u003e Commons"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Hidden .down.\u003e Commons"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Storage .right.\u003eFile"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "User --\u003e UI"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Main --\u003e Hidden"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "hcwong": 2
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete Participant P-1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete Participant P-1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteParticipant(P-1)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "model -[MODEL_COLOR]\u003e storage : saveParticipantList(ParticipantList)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 3,
      "-": 33,
      "hcwong": 1
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "abstract Entity"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "abstract EntityList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "interface ReadableEntityList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Model *-right-\u003e \"1\" ParticipantList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Model *-right-\u003e \"1\" MentorList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Model *-right-\u003e \"1\" TeamList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "EntityList .down.|\u003e ParticipantList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "EntityList .down.|\u003e TeamList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "EntityList .down.|\u003e MentorList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "ReadableEntityList .down.|\u003e ParticipantList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "ReadableEntityList .down.|\u003e TeamList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "ReadableEntityList .down.|\u003e MentorList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "ParticipantList *-down-\u003e \"*\" Participant"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "MentorList *-down-\u003e \"*\" Mentor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "TeamList *-down-\u003e \"*\" Team"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Entity *--\u003e Name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Entity *--\u003e Id"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Participant .up.|\u003e Entity"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Team .up.|\u003e Entity"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Mentor .up.|\u003e Entity"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Participant *-down-\u003e Phone"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Participant *-down-\u003e Email"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Team *-down-\u003e \"*\" Participant"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Team *-down-\u003e \"0..1\" Mentor"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Team *-down-\u003e \"1\" SubjectName"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Team *-down-\u003e \"1\" Score"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Team *-down-\u003e \"1\" Name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Team *-down-\u003e \"1\" Location"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Mentor *-down-\u003e \"1\" Phone"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Mentor *-down-\u003e \"1\" Email"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Mentor *-down-\u003e \"1\" Name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Mentor *-down-\u003e \"1\" Name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Mentor *-down-\u003e \"1\" SubjectName"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "hcwong": 38
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "participant \":AlfredParser\" as AlfredParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "participant \":DeleteCommandAllocator\" as DeleteCommandAllocator LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "participant \":DeleteParticipantCommandParser\" as DeleteParticipantCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "participant \"d:DeleteParticipantCommand\" as DeleteParticipantCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "[-\u003e LogicManager : execute(\"delete participant P-1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "LogicManager -\u003e AlfredParser : parseCommand(\"delete participant P-1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "activate AlfredParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "create DeleteCommandAllocator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "AlfredParser -\u003e DeleteCommandAllocator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "activate DeleteCommandAllocator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "DeleteCommandAllocator --\u003e AlfredParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "deactivate DeleteCommandAllocator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "AlfredParser -\u003e DeleteCommandAllocator : allocate(\"participant P-1\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "activate DeleteCommandAllocator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "create DeleteParticipantCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "DeleteCommandAllocator -\u003e DeleteParticipantCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "activate DeleteParticipantCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "DeleteParticipantCommandParser --\u003e DeleteCommandAllocator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "deactivate DeleteParticipantCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "DeleteCommandAllocator -\u003e DeleteParticipantCommandParser : parse(\"P-1\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "activate DeleteParticipantCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "create DeleteParticipantCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "DeleteParticipantCommandParser -\u003e DeleteParticipantCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "activate DeleteParticipantCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "DeleteParticipantCommand --\u003e DeleteParticipantCommandParser : d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "deactivate DeleteParticipantCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "DeleteParticipantCommandParser --\u003e DeleteCommandAllocator : d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "deactivate DeleteParticipantCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "DeleteParticipantCommandParser -[hidden]-\u003e DeleteCommandAllocator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "destroy DeleteParticipantCommandParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "DeleteCommandAllocator --\u003e AlfredParser : d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "deactivate DeleteCommandAllocator"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "DeleteCommandAllocator -[hidden]-\u003e DeleteParticipantCommandParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "destroy DeleteCommandAllocator"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "AlfredParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "deactivate AlfredParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "LogicManager -\u003e DeleteParticipantCommand : execute()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "activate DeleteParticipantCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "DeleteParticipantCommand -\u003e Model : deleteParticipant(P-1)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Model --\u003e DeleteParticipantCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "DeleteParticipantCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "CommandResult --\u003e DeleteParticipantCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "DeleteParticipantCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "deactivate DeleteParticipantCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 48,
      "-": 37
    }
  },
  {
    "path": "docs/diagrams/EntityListClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Package EntityList \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    class EntityList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    EntityList *-down-\u003e \"1\" ObservableList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    EntityList *-down-\u003e \"1\" UnmodifiableObservableList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hcwong": 13
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Interface CommandAllocator \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Class AlfredParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Class AlfredParserUtil"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Class XYZCommandAllocator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Class \"{abstract}\\nABCCommand\" as ABCCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Class EntityCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "LogicManager --\u003e\"1\" AlfredParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "AlfredParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "XYZCommandAllocator .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "AlfredParser .right.\u003e XYZCommandAllocator: creates \u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser  ..|\u003e Parser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "XYZCommandAllocator ..|\u003e CommandAllocator"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "XYZCommandParser ..\u003e AlfredParserUtil"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "AlfredParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "note left of ABCCommand: ABCCommand \u003d Commands which extend Abstract Command\\n class directly, such as AddCommand, ViewCommand etc. \\nand are themselves declared abstract"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "note left of EntityCommand: EntityCommand \u003d Specific Entity commands, \\nsuch as AddParticipantCommand or DeleteTeamCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "note left of XYZCommand: XYZCommand \u003d Commands which extend Abstract Command\\n class directly, such as SetScoreCommand \\nand which no other classes extend from"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "ABCCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "EntityCommand -up-|\u003e ABCCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 19,
      "-": 55
    }
  },
  {
    "path": "docs/diagrams/ModelManagerClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Package ModelManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    class ModelManager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    class FilteredList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    class EntityList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    class UserPrefs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ModelManager -down-\u003e \"3\" FilteredList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ModelManager -down-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ModelManager -down-\u003e \"3\" EntityList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hcwong": 19
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Class EntityListPanel"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "MainWindow *-down-\u003e EntityListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "ParticipantListPanel -up-|\u003e EntityListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "TeamListPanel-up-|\u003e EntityListPanel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "MentorListPanel-up-|\u003e EntityListPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "EntityListPanel -right[hidden] StatusBarFooter"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "ParticipantListPanel -down-\u003e EntityCard"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "TeamListPanel -down-\u003e EntityCard"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "MentorListPanel -down-\u003e EntityCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "EntityCard ..\u003e Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "StatusBarFooter -|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "EntityListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "EntityCard-|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "Joanna-YJA": 17
    }
  },
  {
    "path": "docs/team/abhimanyadav.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d Abhiman Yadav - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "john0227": 1
    }
  },
  {
    "path": "docs/team/brianyen.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d Brian Yen - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "john0227": 1
    }
  },
  {
    "path": "docs/team/joannayap.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d Joanna Yap - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "john0227": 1
    }
  },
  {
    "path": "docs/team/johnmin.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d John (Kyungho) Min - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "john0227": 1
    }
  },
  {
    "path": "docs/team/joshuawong.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d Joshua Wong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "john0227": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.storage.AlfredStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.storage.AlfredStorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.storage.JsonMentorListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.storage.JsonParticipantListStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.storage.JsonTeamListStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.storage.MentorListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.storage.ParticipantListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.storage.TeamListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    protected AlfredStorage alfredStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        ParticipantListStorage pStore \u003d new JsonParticipantListStorage(userPrefs.getParticipantListFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        MentorListStorage mStore \u003d new JsonMentorListStorage(userPrefs.getMentorListFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        TeamListStorage tStore \u003d new JsonTeamListStorage(userPrefs.getTeamListFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        alfredStorage \u003d new AlfredStorageManager(pStore, mStore, tStore, userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        model \u003d new ModelManager(alfredStorage, userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        model.initialize();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            alfredStorage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 145,
      "hcwong": 13,
      "Joanna-YJA": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/Paths.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an enumeration of all the Paths needed by Alfred."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class Paths {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String STUDENT_ICON \u003d \"/images/student_icon.png\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MENTOR_ICON \u003d \"/images/mentor_icon.png\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String TEAM_ICON \u003d \"/images/team_icon.png\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/Predicates.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * This is a helper class which contains all the Predicates that will be used."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * by the find command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Predicates {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static Predicate\u003cParticipant\u003e getPredicateFindParticipantByName(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return (participant) -\u003e participant.getName().toString().contains(name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static Predicate\u003cTeam\u003e getPredicateFindTeamByName(String name) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return (team) -\u003e team.getName().toString().contains(name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static Predicate\u003cMentor\u003e getPredicateFindMentorByName(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return (mentor) -\u003e mentor.getName().toString().contains(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static Predicate\u003cTeam\u003e getPredicateFindTeamByProjectName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return (team) -\u003e team.getName().toString().contains(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static Predicate\u003cParticipant\u003e getPredicateFindParticipantByEmail(String email) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return (participant) -\u003e participant.getEmail().toString().contains(email);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static Predicate\u003cMentor\u003e getPredicateFindMentorByEmail(String email) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return (mentor) -\u003e mentor.getEmail().toString().contains(email);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static Predicate\u003cParticipant\u003e getPredicateFindParticipantByPhone(String phone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return (participant) -\u003e participant.getPhone().toString().contains(phone);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static Predicate\u003cMentor\u003e getPredicateFindMentorByPhone(String phone) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return (mentor) -\u003e mentor.getPhone().toString().contains(phone);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static Predicate\u003cMentor\u003e getPredicateFindMentorByOrganization(String org) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return (mentor) -\u003e mentor.getOrganization().toString().contains(org);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static \u003cT\u003e Predicate\u003cT\u003e predicateReducer(List\u003cPredicate\u003cT\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return predicates.stream().reduce(predicate -\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static Predicate\u003cEntity\u003e viewSpecifiedEntity(Entity entityToView) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return (entity) -\u003e entity.equals(entityToView);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 54,
      "john0227": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_TYPE \u003d \"Unknown entity type\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_INPUT \u003d \"User input is incomplete\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The entity index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // to set restrictions as some operations can only be applied to some entity"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_INVALID_TYPE \u003d \"The type of entity is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_INVALID_TEAM_DISPLAYED_INDEX \u003d \"The team index provided is invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 2,
      "-": 12,
      "Joanna-YJA": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/AlfredException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an error thrown by the system."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * {@code AlfredException} is the superclass of the following exception:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * IllegalValueException, DataConversionException, AlfredRuntimeException."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public abstract class AlfredException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an instance of {@code AlfredException}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param message should contain relevant information on the cause of exception."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an instance of {@code AlfredException}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param message should contain relevant information on the cause of exception."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param cause {@code Throwable} contain the type of error or exception thrown."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an instance of {@code AlfredException}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param cause {@code Throwable} contain the type of error or exception thrown."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredException(Exception cause) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hcwong": 1,
      "Joanna-YJA": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/AlfredModelException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Wrapper class for Model Exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class AlfredModelException extends AlfredException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor for AlfredModelException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public AlfredModelException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/AlfredModelHistoryException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An exception class for all exceptions thrown by ModelHistory"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class AlfredModelHistoryException extends AlfredException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructor for AlfredModelHistoryException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public AlfredModelHistoryException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/AlfredRuntimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an error during the runtime of the system."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Superclass of DuplicateEntityException."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class AlfredRuntimeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /** Constructs an instance of {@code AlfredRuntimeException}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @paraa message should contain relevant information on the cause of runtime exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredRuntimeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 1,
      "Joanna-YJA": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/AlfredStorageException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Wrapper Exception for Storage Exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class AlfredStorageException extends AlfredException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public AlfredStorageException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor which takes an exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param cause"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public AlfredStorageException(Exception cause) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an error during conversion of data from one format to another."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class DataConversionException extends AlfredStorageException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /** Constructs an instance of DataConversionException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param cause Can have one of two main causes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * 1) IOException from error reading from JSON file"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * 2) Illegal value exception, thrown when there are illegal values in json file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "Joanna-YJA": 5,
      "hcwong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an exception thrown to signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class IllegalValueException extends AlfredException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "Joanna-YJA": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/MissingEntityException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * MissingEntityException is thrown when a CRUD operation targets a missing entity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class MissingEntityException extends AlfredModelException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public MissingEntityException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/ModelValidationException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * This error is thrown when the model lists are not in sync."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class ModelValidationException extends AlfredModelException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ModelValidationException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String, String...)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "john0227": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/PrefixUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.ReadOnlyEntityList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Facilitates retrieving of different items based on {@code PrefixType} of {@code Entity}s."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class PrefixUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static String getStringBasedOnPrefixType("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "            PrefixType prefixType, String mentorString, String participantString, String teamString) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "        switch (prefixType) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case M:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return mentorString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case P:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return participantString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case T:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return teamString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // Should never reach here"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new RuntimeException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static ReadOnlyEntityList getEntityListBasedOnPrefixType(PrefixType prefixType, Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        switch (prefixType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case M:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return model.getMentorList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case P:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return model.getParticipantList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case T:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return model.getTeamList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // Should never reach here"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new RuntimeException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Validates whether {@code score} is a valid integer."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param score the string representation of the score under check."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the score is not a valid integer."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void validateScore(String score) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (score.equals(\"\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            int scoreValue \u003d Integer.parseInt(score);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(Score.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Capitalizes given string and returns it."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * The first letter is capitalized while the rest are lower-cased. \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * e.g."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     \u003cli\u003ecapitalize(\"\") -\u003e \"\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     \u003cli\u003ecapitalize(\"alfred\") -\u003e \"Alfred\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     \u003cli\u003ecapitalize(\"aLFRed\") -\u003e \"Alfred\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param s String to be capitalized."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Capitalized string."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static String capitalize(String s) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (s.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 22,
      "-": 67,
      "john0227": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/Tuple.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Tuples are a helper class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Tuple\u003cT\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final T zero;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final T one;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Tuple(T zero, T one) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.zero \u003d zero;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.one \u003d one;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public T getZero() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return zero;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public T getOne() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return one;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelHistoryException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.CommandRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, AlfredModelHistoryException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of Participants */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    ObservableList\u003cParticipant\u003e getFilteredParticipantList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of Teams */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    ObservableList\u003cTeam\u003e getFilteredTeamList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of Mentors */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    ObservableList\u003cMentor\u003e getFilteredMentorList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /** Returns the Record of all Commands entered by User */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    ArrayList\u003cCommandRecord\u003e getCommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the user prefs\u0027 ParticipantList file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    Path getParticipantListFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the user prefs\u0027 TeamList file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    Path getTeamListFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the user prefs\u0027 MentorList file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    Path getMentorListFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a List of Strings describing the commands that can be undone."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    List\u003cString\u003e getUndoCommandHistory();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a List of Strings describing the commands that can be redone."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    List\u003cString\u003e getRedoCommandHistory();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 12,
      "-": 40,
      "Joanna-YJA": 23,
      "hcwong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.CommandRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final AlfredParser alfredParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        alfredParser \u003d new AlfredParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        Command command \u003d alfredParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public ObservableList\u003cParticipant\u003e getFilteredParticipantList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return model.getFilteredParticipantList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public ObservableList\u003cTeam\u003e getFilteredTeamList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return model.getFilteredTeamList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public ObservableList\u003cMentor\u003e getFilteredMentorList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return model.getFilteredMentorList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ArrayList\u003cCommandRecord\u003e getCommandHistory() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return model.getCommandHistory();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //TODO: May update the three methods below to get Alfred file path instead"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public Path getParticipantListFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return model.getParticipantListFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public Path getTeamListFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return model.getTeamListFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public Path getMentorListFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return model.getMentorListFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public List\u003cString\u003e getUndoCommandHistory() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return model.getUndoCommandHistory();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public List\u003cString\u003e getRedoCommandHistory() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return model.getRedoCommandHistory();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 12,
      "Abhiman2211": 1,
      "-": 55,
      "Joanna-YJA": 33,
      "hcwong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Prefix to indicate the CommandType of Entity the command directly affects."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.commandType \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, CommandType commandType) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and {@code PrefixType},"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public CommandResult(String feedbackToUser, CommandType commandType) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this(feedbackToUser, false, false, commandType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.commandType;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 69,
      "Joanna-YJA": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandUtils.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.util.Tuple;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.csvcommand.ExportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.csvcommand.ImportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.historycommand.RedoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.historycommand.UndoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Utils for the commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class CommandUtils {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final List\u003cTuple\u003cString\u003e\u003e ALL_COMMANDS_IN_HELP \u003d new ArrayList\u003cTuple\u003cString\u003e\u003e("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Arrays.asList("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Tuple\u003cString\u003e("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    \"Add Command\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    AddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Tuple\u003cString\u003e("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    \"CSV Import Command\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    ImportCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Tuple\u003cString\u003e("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    \"CSV Export Command\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    ExportCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Tuple\u003cString\u003e("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    \"Delete Command\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Tuple\u003cString\u003e("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    \"Edit Command\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    EditCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Tuple\u003cString\u003e("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    \"Find Command\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    FindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Tuple\u003cString\u003e("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    \"List Command\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    ListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Tuple\u003cString\u003e("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    \"Undo Command\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    UndoCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Tuple\u003cString\u003e("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    \"Redo Command\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    RedoCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Tuple\u003cString\u003e("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    \"Help Command\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            )"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        )"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedTags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 2,
      "-": 189,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // Print out all the add command message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        CommandUtils.ALL_COMMANDS_IN_HELP.stream().forEach(tuple -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            System.out.println(tuple.getZero());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            System.out.println(tuple.getOne());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "hcwong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TrackableState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Marker Interface for commands. This interface is used to mark a command if the command\u0027s execution will"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * mutate the state of the data in Model and should have its state tracked by ModelHistory. This is to facilitate"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * the tracking of state for the undo/redo features."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface TrackableState {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.TrackableState;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Adds an {@link Entity} to Alfred."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public abstract class AddCommand extends Command implements TrackableState {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new entity to Alfred.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Add command must specify the entity being added \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"and its corresponding fields. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: add [entity] [entity fields] \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"For example: add participant n/NAME e/EMAIL p/PHONE_NUMBER\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 2,
      "Abhiman2211": 6,
      "john0227": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Adds a {@link Mentor} to Alfred."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddMentorCommand extends AddCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add mentor\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New mentor added: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MENTOR \u003d \"This mentor already exists in this Hackathon\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a mentor to Alfred.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + CliSyntax.PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + CliSyntax.PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_SUBJECT_NAME + \"SUBJECT_NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + CliSyntax.PREFIX_ORGANISATION + \"ORGANIZATION\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"Bruce Wayne \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_PHONE + \"+6591239123 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_EMAIL + \"customercare@batmail.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_SUBJECT_NAME + \"Artificial Intelligence \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_ORGANISATION + \"Wayne Enterprise, Inc\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Mentor mentor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // private Name mentorName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // private Name teamName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public AddMentorCommand(Mentor mentor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(mentor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * public AddMentorCommand(Name mentorName, Name teamName) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     CollectionUtil.requireAllNonNull(mentorName, teamName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     this.mentorName \u003d mentorName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     this.teamName \u003d teamName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // if (this.teamName !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //     find mentor (or throw Exception) and retrieve ID"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //     find team (or throw Exception)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //     add Mentor to team"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //     return CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "            model.addMentor(this.mentor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            model.resetFilteredLists();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            model.updateHistory(this);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // Should I return new CommandResult(MESSAGE_DUPLICATE_MENTOR) instead?"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MENTOR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.mentor.toString()), CommandType.M);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!(other instanceof AddMentorCommand)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        AddMentorCommand addMentorCommand \u003d (AddMentorCommand) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.mentor.equals(addMentorCommand.mentor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "Abhiman2211": 5,
      "john0227": 69,
      "Joanna-YJA": 10,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Adds a {@link Participant} to Alfred."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddParticipantCommand extends AddCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add participant\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New participant added: %s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PARTICIPANT \u003d \"This participant already exists in this Hackathon\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a participant to Alfred.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_PHONE + \"PHONE\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_EMAIL + \"EMAIL\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"Arthur Fleck \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_EMAIL + \"arthurs@joking.com \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_PHONE + \"+6591239123\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Participant participant;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Id participantId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Id teamId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public AddParticipantCommand(Participant participant) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(participant);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.participant \u003d participant;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public AddParticipantCommand(Id participantId, Id teamId) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        CollectionUtil.requireAllNonNull(participantId, teamId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.participantId \u003d participantId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.teamId \u003d teamId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // if (this.teamName !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //     find participant (or throw Exception) and retrieve ID"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //     find team (or throw Exception)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //     Add participant to team"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //     Return CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "            model.addParticipant(this.participant);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            model.resetFilteredLists();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            model.updateHistory(this);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PARTICIPANT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.participant.toString()), CommandType.P);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                || (other instanceof AddParticipantCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                \u0026\u0026 participant.equals(((AddParticipantCommand) other).participant));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "Abhiman2211": 7,
      "john0227": 57,
      "Joanna-YJA": 9,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Adds a {@link Team} to Alfred."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddTeamCommand extends AddCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add team\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New team added: %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TEAM \u003d \"This team already exists in this Hackathon\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a team to Alfred.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_SUBJECT_NAME + \"SUBJECT_NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_PROJECT_NAME + \"PROJECT_NAME(what the team wish to call their project) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_LOCATION + \"TABLE_NUMBER \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"Justice League \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + CliSyntax.PREFIX_SUBJECT_NAME + \"Social \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_PROJECT_NAME + \"Catwoman Dating App \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_LOCATION + \"1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Team team;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AddTeamCommand.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public AddTeamCommand(Team team) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(team);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.team \u003d team;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        logger.info(\"Adding a new team to Model\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "            model.addTeam(this.team);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            model.resetFilteredLists();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            model.updateHistory(this);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            logger.severe(\"The same team already exist in model\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TEAM);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.team.toString()), CommandType.T);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!(other instanceof AddTeamCommand)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "        AddTeamCommand addTeamCommand \u003d (AddTeamCommand) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.team.equals(addTeamCommand.team);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "Abhiman2211": 4,
      "john0227": 50,
      "Joanna-YJA": 16,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/csvcommand/ExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.csvcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.csvutil.CsvUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Exports Alfred data into an external CSV file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\"; // or any other suggestions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exported all data to %s\"; // %s -\u003e file name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_IO_EXCEPTION \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Something went wrong while accessing your file! Please try again...\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_INVALID_PATH_EXCEPTION \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Invalid file path: %s - Exported all data to %s\"; // %s -\u003e this.csvFilePath"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_EMPTY_DATA \u003d \"No data to export. File was not created.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": exports Alfred data to a CSV file. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"[ENTITY] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + PREFIX_FILE_PATH + \"[FILE_PATH]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"\\tExample 1: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \" (Creates AlfredData/Alfred_Entity_List.csv at current working directory)\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"\\tExample 2 (Windows): \" + COMMAND_WORD + \" \" + PREFIX_FILE_PATH + \"C:/Users/USER\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \" (Creates Alfred_Entity_List.csv at C:/Users/USER)\"; // TODO: Add other examples on different platforms"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String ASSERTION_FAILED_NOT_CSV \u003d \"File given is not a CSV file.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Path DEFAULT_FILE_PATH \u003d Paths.get(\"AlfredData\", \"Alfred_Data.csv\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected Path csvFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected String messageSuccess;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ExportCommand(String csvFilePath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assert csvFilePath.isBlank() || csvFilePath.toLowerCase().endsWith(\".csv\") : ASSERTION_FAILED_NOT_CSV;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // If either filePath was not specified, go with default values"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (csvFilePath.isBlank()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "            csvFilePath \u003d DEFAULT_FILE_PATH.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.csvFilePath \u003d Path.of(csvFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.messageSuccess \u003d String.format(MESSAGE_SUCCESS, csvFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.csvFilePath \u003d DEFAULT_FILE_PATH;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.messageSuccess \u003d String.format(MESSAGE_INVALID_PATH_EXCEPTION, csvFilePath, this.csvFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (model.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_DATA);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "            File csvFile \u003d this.csvFilePath.toFile();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "            FileUtil.createIfMissing(this.csvFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "            CsvUtil.writeToCsv(csvFile, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_IO_EXCEPTION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(this.messageSuccess);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!(other instanceof ExportCommand)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportCommand command \u003d (ExportCommand) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.csvFilePath.equals(command.csvFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/csvcommand/ExportMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.csvcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.csvutil.CsvUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Exports every {@code Mentor} stored inside {@code Alfred} into an external CSV file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ExportMentorCommand extends ExportCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exported all mentors to %s\"; // %s -\u003e file name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ExportMentorCommand(String csvFilePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(csvFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (model.getMentorList().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_DATA);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "            File csvFile \u003d this.csvFilePath.toFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "            FileUtil.createIfMissing(this.csvFilePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "            CsvUtil.writeToCsv(csvFile, model.getMentorList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_IO_EXCEPTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.csvFilePath.toString()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return other instanceof ExportMentorCommand \u0026\u0026 super.equals(other);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/csvcommand/ExportParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.csvcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.csvutil.CsvUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Exports every {@code Participant} stored inside {@code Alfred} into an external CSV file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ExportParticipantCommand extends ExportCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exported all participants to %s\"; // %s -\u003e file name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ExportParticipantCommand(String csvFilePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(csvFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (model.getParticipantList().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_DATA);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "            File csvFile \u003d this.csvFilePath.toFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "            FileUtil.createIfMissing(this.csvFilePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "            CsvUtil.writeToCsv(csvFile, model.getParticipantList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_IO_EXCEPTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.csvFilePath.toString()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return other instanceof ExportParticipantCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \u0026\u0026 super.equals(other);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/csvcommand/ExportTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.csvcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.csvutil.CsvUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Exports every {@code Team} stored inside {@code Alfred} into an external CSV file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ExportTeamCommand extends ExportCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exported all teams to %s\"; // %s -\u003e file name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ExportTeamCommand(String csvFilePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(csvFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (model.getTeamList().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_DATA);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "            File csvFile \u003d this.csvFilePath.toFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "            FileUtil.createIfMissing(this.csvFilePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "            CsvUtil.writeToCsv(csvFile, model.getTeamList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_IO_EXCEPTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.csvFilePath.toString()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return other instanceof ExportTeamCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \u0026\u0026 super.equals(other);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/csvcommand/ImportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.csvcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.MissingEntityException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.TrackableState;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.csvutil.CsvUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.csvutil.ErrorTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.csvutil.ErrorTracker.Error;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Supports bulk registration via a CSV file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": " * This command aims to facilitate registration of entities onto Alfred."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class ImportCommand extends Command implements TrackableState {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully imported CSV file into Alfred\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_PARTIAL_SUCCESS \u003d \"Following line(s) were unable to be imported into Alfred\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "             + \"Possible reasons include incorrect formatting or adding of duplicate Entity:\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"File not found at %s\"; // %s -\u003e this.csvFileName"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_IO_EXCEPTION \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Something went wrong while accessing your file! Please try again...\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_INVALID_DATA \u003d \"CSV file contains invalid data\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_INVALID_FORMAT \u003d \"CSV file must contain Entity data in the following format:\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"\\tMentors: \" + CsvUtil.HEADER_MENTOR + \"\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"\\tParticipants: \" + CsvUtil.HEADER_PARTICIPANT + \"\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"\\tTeams: \" + CsvUtil.HEADER_TEAM;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_ERROR_FILE_CREATED \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"CSV file containing the errors was created at %s.\"; // %s -\u003e file path"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_ERROR_FILE_NOT_CREATED \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"CSV file containing the errors was not able to be created.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String CAUSE_INVALID_DATA \u003d \"Invalid data format\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String CAUSE_DUPLICATE_ENTITY \u003d \"This entity already exists in Alfred\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String ASSERTION_FAILED_NOT_CSV \u003d \"File given is not a CSV file.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String POSTFIX_ERROR_FILE \u003d \"_Error\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Loads data in CSV file into Alfred\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \" Parameters: \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + PREFIX_FILE_PATH + \"CSV_FILE_NAME\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"\\tExample (Windows): \" + COMMAND_WORD"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \" \" + PREFIX_FILE_PATH + \"C:/Users/USER/AlfredData/Alfred.csv\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Path csvFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Path errorFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Queue\u003cString\u003e teamBuffers;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private ErrorTracker errors;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ImportCommand(String csvFilePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assert csvFilePath.toLowerCase().endsWith(\".csv\") : ASSERTION_FAILED_NOT_CSV;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.csvFilePath \u003d Paths.get(csvFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.errorFilePath \u003d Paths.get(this.insertErrorPostfix(csvFilePath));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.teamBuffers \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.errors \u003d new ErrorTracker();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ImportCommand(String csvFilePath, String errorFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assert csvFilePath.toLowerCase().endsWith(\".csv\") : ASSERTION_FAILED_NOT_CSV;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assert errorFilePath.toLowerCase().endsWith(\".csv\") : ASSERTION_FAILED_NOT_CSV;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.csvFilePath \u003d Paths.get(csvFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.errorFilePath \u003d Paths.get(errorFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.teamBuffers \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.errors \u003d new ErrorTracker();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private String insertErrorPostfix(String csvFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // 4 -\u003e length of \".csv\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new StringBuilder(csvFilePath).insert(csvFilePath.length() - 4, POSTFIX_ERROR_FILE).toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Details must not be empty (except for ID)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!FileUtil.isFileExists(this.csvFilePath)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FILE_NOT_FOUND, this.csvFilePath));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File csvFile \u003d this.csvFilePath.toFile();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.parseFile(csvFile, model);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_IO_EXCEPTION);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!errors.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // Create csv file containing all lines unable to be loaded"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "            File errorFile \u003d this.errorFilePath.toFile();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "            String errorFileMessage;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "                FileUtil.createFile(errorFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "                CsvUtil.writeToCsv(errorFile, false, errors.toCsvString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "                errorFileMessage \u003d String.format(MESSAGE_ERROR_FILE_CREATED, this.errorFilePath.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "                errorFileMessage \u003d MESSAGE_ERROR_FILE_NOT_CREATED;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // Return result message"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "            String message \u003d String.join("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \"\\n\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    MESSAGE_PARTIAL_SUCCESS,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    errors.toString(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    errorFileMessage,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    MESSAGE_INVALID_FORMAT"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "            );"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(message);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        model.updateHistory(this);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses a CSV file located at given {@link #csvFilePath} to {@code Entity} objects."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param csvFile The CSV file to parse."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param model {@code Model} to add the {@code Entity} objects."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private void parseFile(File csvFile, Model model) throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "john0227"
        },
        "content": "        BufferedReader csvReader \u003d new BufferedReader(new FileReader(csvFile));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": "        int lineNumber \u003d 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": "        while ((line \u003d csvReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "john0227"
        },
        "content": "            Entity entityToAdd \u003d this.parseLineToEntity(model, lineNumber, line, true);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "john0227"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.addEntity(entityToAdd, model);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": "            } catch (AlfredException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.errors.add(new Error(lineNumber, line, CAUSE_DUPLICATE_ENTITY));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "            lineNumber++;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": "        csvReader.close();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.addBufferedTeams(model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses and adds teams in {@link #teamBuffers} into {@code Alfred}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private void addBufferedTeams(Model model) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": "        while (!this.teamBuffers.isEmpty()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": "            String[] data \u003d this.teamBuffers.poll().split(CsvUtil.CSV_SEPARATOR_REGEX, 2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "            int lineNumber \u003d Integer.parseInt(data[0]);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": "            Entity entityToAdd \u003d this.parseLineToEntity(model, lineNumber, data[1], false);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.addEntity(entityToAdd, model);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "            } catch (AlfredException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.errors.add(new Error(lineNumber, data[1], CAUSE_DUPLICATE_ENTITY));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses given line into the corresponding {@code Entity}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param lineNumber Line number of given line in the CSV file."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param line Line in the CSV file."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Corresponding {@code Entity}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Entity parseLineToEntity(Model model, int lineNumber, String line, boolean shouldBufferTeam) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (CsvUtil.isCsvHeader(line)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] data \u003d line.split(CsvUtil.CSV_SEPARATOR_REGEX);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "john0227"
        },
        "content": "        data[0] \u003d data[0].toUpperCase();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "john0227"
        },
        "content": "            switch (data[0]) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case CliSyntax.PREFIX_ENTITY_MENTOR:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return CsvUtil.parseToMentor(data);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case CliSyntax.PREFIX_ENTITY_PARTICIPANT:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return CsvUtil.parseToParticipant(data);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case CliSyntax.PREFIX_ENTITY_TEAM:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "john0227"
        },
        "content": "                // Buffer teams to add them after Mentors and Participants"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "john0227"
        },
        "content": "                if (shouldBufferTeam) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    this.teamBuffers.offer(lineNumber + CsvUtil.CSV_SEPARATOR + line);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "john0227"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return CsvUtil.parseToTeam(data, model);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "john0227"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                // If Entity CommandType is incorrect"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.errors.add(new Error(lineNumber, line, CAUSE_INVALID_DATA));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.errors.add(new Error(lineNumber, line, CAUSE_INVALID_DATA));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (MissingEntityException mee) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.errors.add(new Error(lineNumber, line, mee.getMessage()));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Adds an {@code Entity} corresponding to given {@code data}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param entityToAdd Entity to add into {@code model}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param model {@code Model} to add {@code Entity} to."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws AlfredException If the parsed Entity is already contained in {@code Model} (i.e. duplicate Entity)."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private void addEntity(Entity entityToAdd, Model model) throws AlfredException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (entityToAdd \u003d\u003d null) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (entityToAdd instanceof Mentor) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "john0227"
        },
        "content": "            model.addMentor((Mentor) entityToAdd);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } else if (entityToAdd instanceof Participant) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "john0227"
        },
        "content": "            model.addParticipant((Participant) entityToAdd);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } else if (entityToAdd instanceof Team) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "john0227"
        },
        "content": "            model.addTeam((Team) entityToAdd);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!(other instanceof ImportCommand)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ImportCommand command \u003d (ImportCommand) other;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.csvFilePath.equals(command.csvFilePath);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 3,
      "john0227": 236,
      "Joanna-YJA": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/csvcommand/csvutil/CsvUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.csvcommand.csvutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.MissingEntityException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.ReadOnlyEntityList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Helper functions to facilitate interactions between {@code Alfred} and a CSV file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Converts {@code Entity} objects to a {@code CSV String} and parses a {@code CSV String}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": " * into an {@code Entity} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class CsvUtil {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Headers to show user which column corresponds to which value."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String HEADER_MENTOR \u003d \"EntityType,ID,Name,Phone,Email,Organization,SubjectName\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String HEADER_PARTICIPANT \u003d \"EntityType,ID,Name,Phone,Email\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String HEADER_TEAM \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"EntityType,ID,Name,Participants,Mentor,SubjectName,Score,ProjectName,Location\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String ASSERTION_FAILED_NOT_CSV \u003d \"File given is not a CSV file.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_INVALID_ENTITY \u003d \"Entity given is invalid\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_MISSING_PARTICIPANT \u003d \"No participant with ID %s in Alfred\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_MISSING_MENTOR \u003d \"No mentor with with ID %s in Alfred\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String CSV_SEPARATOR \u003d \",\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String CSV_SEPARATOR_REGEX \u003d \"\\\\s*,\\\\s*\"; // comma surrounded by arbitrary number of spaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Parser Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses given line of data (split by commas) into relevant fields of a {@code Mentor}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cb\u003ePrecondition: \u003c/b\u003e {@code data} contains attribute data as {@code String}s in the order of"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * {@code EntityType(T), ID, Name, Phone, Email, Organization, SubjectName}. {@code ID} may be left"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * empty, in which Alfred will generate a valid ID for the mentor."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param data Array containing {@code Mentor} attribute data as {@code String}s."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return A valid {@code Mentor} with attributes set corresponding to {@code data}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws IllegalArgumentException If any field does not pass {@link AppUtil#checkArgument(Boolean, String)}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *                                  or if enum constant is invalid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static Mentor parseToMentor(String[] data) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // EntityType (M), ID (may be blank), Name, Phone, Email, Organization, SubjectName"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (data.length !\u003d 7) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!data[0].toUpperCase().equals(\"M\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id mentorId \u003d retrieveId(data[1], PrefixType.M);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Name mentorName \u003d new Name(data[2]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Phone mentorPhone \u003d new Phone(data[3]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Email mentorEmail \u003d new Email(data[4]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Name mentorOrganization \u003d new Name(data[5]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        SubjectName mentorSubject \u003d SubjectName.valueOf(data[6].toUpperCase());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new Mentor(mentorName, mentorId, mentorPhone, mentorEmail, mentorOrganization, mentorSubject);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Retrieves a {@code Mentor} with given {@code strId} from {@code model}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param strId An {@code Id} in a {@code String} form."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param model {@code Model} to retrieve {@code Mentor} from."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Retrieved {@code Mentor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws IllegalArgumentException If given {@code strId} cannot be converted into an {@link Id}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws MissingEntityException   If a {@code Mentor} with given {@code Id} does not exist in {@code model}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static Optional\u003cMentor\u003e parseToMentor(String strId, Model model) throws MissingEntityException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (strId.isBlank()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "        strId \u003d strId.replace(\"[\", \"\").replace(\"]\", \"\").trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (!Id.isValidString(strId)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "                strId \u003d \"M-\" + strId;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "            Id id \u003d Id.toId(strId);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.of(model.getMentor(id));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new MissingEntityException(MESSAGE_MISSING_MENTOR);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses given line of data (split by commas) into relevant fields of a {@code Participant}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cb\u003ePrecondition: \u003c/b\u003e {@code data} contains attribute data as {@code String}s in the order of"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * {@code EntityType(T), ID, Name, Phone, Email}. {@code ID} may be left empty, in which"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Alfred will generate a valid ID for the participant."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param data Array containing {@code Participant} attribute data as {@code String}s."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return A valid {@code Participant} with attributes set corresponding to {@code data}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws IllegalArgumentException If any field does not pass {@link AppUtil#checkArgument(Boolean, String)}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *                                  or if enum constant is invalid"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static Participant parseToParticipant(String[] data) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // EntityType (P), ID, Name, Phone, Email"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (data.length !\u003d 5) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!data[0].toUpperCase().equals(\"P\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id participantId \u003d retrieveId(data[1], PrefixType.P);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Name participantName \u003d new Name(data[2]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Phone participantPhone \u003d new Phone(data[3]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Email participantEmail \u003d new Email(data[4]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new Participant(participantName, participantId, participantEmail, participantPhone);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses given line of data (split by commas) into relevant fields of a {@code Team}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cb\u003ePrecondition: \u003c/b\u003e {@code data} contains attribute data as {@code String}s in the order of"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * {@code EntityType(T), ID, Name, Participants, Mentor, SubjectName, Score, ProjectName, Location}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * {@code ID, Participants} and {@code Mentor} may be left empty. If {@code ID} is left empty, Alfred will"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * generate a valid ID for the team. If {@code Participants} and {@code Mentor} are left empty, the team"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * will not have connections to any {@code Participant}s and {@code Mentor}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param data Array containing {@code Team} attribute data as {@code String}s."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param model {@code Model} to operate on."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return A valid {@code Team} with attributes set corresponding to {@code data}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws IllegalArgumentException If any field does not pass {@link AppUtil#checkArgument(Boolean, String)}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *                                  or if enum constant is invalid"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws MissingEntityException   If any {@code Participant} or {@code Mentor} referenced by this {@code Team}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *                                  is nonexistent."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static Team parseToTeam(String[] data, Model model) throws MissingEntityException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // EntityType (T), ID, Name, Participants, Mentor, SubjectName, Score, ProjectName, Location"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (data.length !\u003d 9) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!data[0].toUpperCase().equals(\"T\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id teamId \u003d retrieveId(data[1], PrefixType.T);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Name teamName \u003d new Name(data[2]);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "        List\u003cParticipant\u003e participants \u003d parseToParticipants(data[3], model);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Optional\u003cMentor\u003e mentor \u003d parseToMentor(data[4], model);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": "        SubjectName teamSubject \u003d SubjectName.valueOf(data[5].toUpperCase());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Score teamScore \u003d new Score(Integer.parseInt(data[6])); // NFException subclass of IAException"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Name teamProjectName \u003d new Name(data[7]);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Location teamLocation \u003d new Location(Integer.parseInt(data[8])); // NFException subclass of IAException"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new Team("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "                teamId,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "                teamName,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": "                participants,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": "                mentor,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "john0227"
        },
        "content": "                teamSubject,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "                teamScore,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": "                teamProjectName,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": "                teamLocation"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given line of data into a {@code List} of {@code Participant}s."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param data A list of {@code Participant Id}s."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param model {@code Model} to retrieve {@code Participant}s with specified {@code Id}s."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return A list of retrieved {@code Participant}s."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws IllegalArgumentException If the {@code String Id} in {@code data} cannot be converted into an"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *                                  {@code Id} or"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws MissingEntityException   If a {@code Participant} with stated {@code Id} does not"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *                                  exist within {@code model}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static List\u003cParticipant\u003e parseToParticipants(String data, Model model) throws MissingEntityException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "john0227"
        },
        "content": "        List\u003cParticipant\u003e participants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (data.isBlank()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return participants;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "john0227"
        },
        "content": "        data \u003d data.replace(\"[\", \"\").replace(\"]\", \"\").trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (String strId : data.split(\"\\\\s*\\\\|\\\\s*\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "john0227"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "john0227"
        },
        "content": "                if (!Id.isValidString(strId)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    strId \u003d \"P-\" + strId;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "john0227"
        },
        "content": "                }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "john0227"
        },
        "content": "                Id id \u003d Id.toId(strId);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "john0227"
        },
        "content": "                participants.add(model.getParticipant(id));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "john0227"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "john0227"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "john0227"
        },
        "content": "            } catch (AlfredException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "john0227"
        },
        "content": "                throw new MissingEntityException(String.format(MESSAGE_MISSING_PARTICIPANT, strId));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return participants;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Retrieves the {@code Id} from give {@code strId}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * If {@code strId} is invalid, generate a valid {@code Id} from respective {@code EntityList}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param strId {@code String Id} to parse into {@code Id}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param prefixType {@code PrefixType} to indicate the {@code Entity} type of the {@code Id} to be generated."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Generated {@code Id}."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static Id retrieveId(String strId, PrefixType prefixType) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // A valid Id can be just a number (i.e. 1, 2, 3) or a String form of an Id (i.e. M-1, P-1, T-1)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id entityId;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (!Id.isValidString(strId)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "john0227"
        },
        "content": "                strId \u003d prefixType.toString() + \"-\" + strId;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "john0227"
        },
        "content": "            entityId \u003d Id.toId(strId);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "john0227"
        },
        "content": "            switch (prefixType) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case M:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "john0227"
        },
        "content": "                entityId \u003d MentorList.generateId();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "john0227"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case P:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "john0227"
        },
        "content": "                entityId \u003d ParticipantList.generateId();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "john0227"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "john0227"
        },
        "content": "            case T:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "john0227"
        },
        "content": "                entityId \u003d TeamList.generateId();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "john0227"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "john0227"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "john0227"
        },
        "content": "                // Should never reach here"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "john0227"
        },
        "content": "                throw new RuntimeException();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return entityId;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Writer Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Converts each {@code Entity} in the given {@code model}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * into a {@code CSV String} and writes it into the CSV file provided."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param csvFile CSV file to write each {@code Entity} to."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param model {@code Model} containing {@code Entity} data to export."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws IOException If something goes wrong while writing to the {@code csvFile}."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static void writeToCsv(File csvFile, Model model) throws IOException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "john0227"
        },
        "content": "        writeToCsv(csvFile, model.getMentorList(), false);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "john0227"
        },
        "content": "        writeToCsv(csvFile, model.getParticipantList(), true);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "john0227"
        },
        "content": "        writeToCsv(csvFile, model.getTeamList(), true);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Converts each {@code Entity} in the given {@code entityList}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * into a {@code CSV String} and writes it into the CSV file provided."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param csvFile CSV file to write each {@code Entity} to."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param entityList A {@code ReadOnlyEntityList} containing {@code Entity} data to export."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws IOException If something goes wrong while writing to the {@code csvFile}."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static void writeToCsv(File csvFile, ReadOnlyEntityList entityList) throws IOException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "john0227"
        },
        "content": "        writeToCsv(csvFile, entityList, false);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Converts each {@code Entity} in the given {@code entityList}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * into a {@code CSV String} and writes it into the CSV file provided."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param csvFile CSV file to write each {@code Entity} to."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param entityList A {@code ReadOnlyEntityList} containing {@code Entity} data to export."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param shouldAppend A {@code boolean} value indicating whether to append to the given file or not."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws IOException If something goes wrong while writing to the {@code csvFile}."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static void writeToCsv(File csvFile,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "john0227"
        },
        "content": "            ReadOnlyEntityList entityList, boolean shouldAppend) throws IOException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assert csvFile.toString().toLowerCase().endsWith(\".csv\") : ASSERTION_FAILED_NOT_CSV;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "john0227"
        },
        "content": "        BufferedWriter csvWriter \u003d new BufferedWriter(new FileWriter(csvFile, shouldAppend));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "john0227"
        },
        "content": "        csvWriter.write(getHeader(entityList.getPrefix()) + \"\\n\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (Entity e : entityList.list()) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "john0227"
        },
        "content": "            String entityToCsvString \u003d toCsvString(e);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "john0227"
        },
        "content": "            csvWriter.write(entityToCsvString + \"\\n\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "john0227"
        },
        "content": "        csvWriter.close();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Writes {@code toWrite} into {@code csvFile}."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static void writeToCsv(File csvFile, boolean shouldAppend, String... toWrite) throws IOException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assert csvFile.toString().toLowerCase().endsWith(\".csv\") : ASSERTION_FAILED_NOT_CSV;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "john0227"
        },
        "content": "        BufferedWriter csvWriter \u003d new BufferedWriter(new FileWriter(csvFile, shouldAppend));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (String s : toWrite) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "john0227"
        },
        "content": "            csvWriter.write(s);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "john0227"
        },
        "content": "        csvWriter.close();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static String getHeader(PrefixType prefixType) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "john0227"
        },
        "content": "        switch (prefixType) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case M:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return HEADER_MENTOR;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case P:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return HEADER_PARTICIPANT;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case T:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return HEADER_TEAM;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "john0227"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // Should never reach here"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new RuntimeException(MESSAGE_INVALID_ENTITY);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Converts the given {@code entity} into a {CSV String}."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param entity {@code Entity} to convert."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return A {@code CSV String} corresponding to {@code entity}."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static String toCsvString(Entity entity) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (entity instanceof Mentor) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return toCsvString((Mentor) entity);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } else if (entity instanceof Participant) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return toCsvString((Participant) entity);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } else if (entity instanceof Team) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return toCsvString((Team) entity);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // Should never reach here"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new RuntimeException(MESSAGE_INVALID_ENTITY);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Converts the given {@code mentor} into a {@code CSV String}."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param mentor {@code Mentor} to convert."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return A {@code CSV String} corresponding to {@code mentor}."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static String toCsvString(Mentor mentor) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new StringBuilder(\"M\").append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(mentor.getId().getNumber()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(mentor.getName().toStorageValue()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(mentor.getPhone().toStorageValue()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(mentor.getEmail().toStorageValue()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(mentor.getOrganization().toStorageValue()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(mentor.getSubject().toStorageValue())"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Converts the given {@code participant} into a {@code CSV String}."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param participant {@code Participant} to convert."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return A {@code CSV String} corresponding to {@code participant}."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static String toCsvString(Participant participant) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new StringBuilder(\"P\").append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(participant.getId().getNumber()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(participant.getName().toStorageValue()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(participant.getPhone().toStorageValue()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(participant.getEmail().toStorageValue())"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Converts the given {@code team} into a {@code CSV String}."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param team {@code Team} to convert."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return A {@code CSV String} corresponding to {@code team}."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static String toCsvString(Team team) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new StringBuilder(\"T\").append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(team.getId().getNumber()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(team.getName().toStorageValue()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(toCsvString(team.getParticipants())).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(toCsvString(team.getMentor())).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(team.getSubject().toStorageValue()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(team.getScore().toStorageValue()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(team.getProjectName().toStorageValue()).append(CSV_SEPARATOR)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(team.getLocation().toStorageValue())"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Converts given {@code participants} into a {@code CSV String}."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static String toCsvString(List\u003cParticipant\u003e participants) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return \"[\" + participants.stream().map(p -\u003e p.getId().toString()).collect(Collectors.joining(\"|\")) + \"]\";"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Converts given {@code mentor} into a {@code CSV String}."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static String toCsvString(Optional\u003cMentor\u003e mentor) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (mentor.isEmpty()) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return mentor.get().getId().toString();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Checks if given {@code line} is a valid CSV header or not.\u003cp\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Valid CSV headers are:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     \u003cli\u003e{@value #HEADER_MENTOR}"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     \u003cli\u003e{@value #HEADER_PARTICIPANT}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     \u003cli\u003e{@value #HEADER_TEAM}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Comparison is case-insensitive and comma separation can include whitespaces."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static boolean isCsvHeader(String line) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "john0227"
        },
        "content": "        line \u003d line.replaceAll(CSV_SEPARATOR_REGEX, CSV_SEPARATOR);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return line.equalsIgnoreCase(String.join(CSV_SEPARATOR, CsvUtil.HEADER_MENTOR))"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "john0227"
        },
        "content": "                || line.equalsIgnoreCase(String.join(CSV_SEPARATOR, CsvUtil.HEADER_PARTICIPANT))"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "john0227"
        },
        "content": "                || line.equalsIgnoreCase(String.join(CSV_SEPARATOR, CsvUtil.HEADER_TEAM));"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 433
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/csvcommand/csvutil/ErrorTracker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.csvcommand.csvutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": " * A tracker to show user which line in the CSV file was not able to be loaded into Alfred."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ErrorTracker {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private PriorityQueue\u003cError\u003e errors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ErrorTracker() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.errors \u003d new PriorityQueue\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ErrorTracker(Error... errors) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.errors \u003d new PriorityQueue\u003c\u003e(Arrays.asList(errors));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void add(Error error) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.errors.add(error);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.errors.isEmpty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Converts {@code errors} into a {@code CSV String}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String toCsvString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        PriorityQueue\u003cError\u003e copy \u003d new PriorityQueue\u003c\u003e(this.errors);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        while (!copy.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "            sb.append(copy.poll().csvLine).append(\"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return sb.toString().stripTrailing();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        PriorityQueue\u003cError\u003e copy \u003d new PriorityQueue\u003c\u003e(this.errors);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        while (!copy.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "            sb.append(copy.poll().toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return sb.toString().stripTrailing();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Encapsulates an error arisen while parsing a CSV file into {@code Entity} objects."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static class Error implements Comparable\u003cError\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private int lineNumber;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private String csvLine;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private String cause;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Error(int lineNumber, String csvLine, String cause) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.lineNumber \u003d lineNumber;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.csvLine \u003d csvLine;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.cause \u003d cause;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public int compareTo(Error other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return this.lineNumber - other.lineNumber;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return String.format(\"\\tLine %d: %s (Cause: %s)\", this.lineNumber, this.csvLine, this.cause);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.TrackableState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Deletes an {@link Entity} in Alfred."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public abstract class DeleteCommand extends Command implements TrackableState {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \": Deletes the specified entity by the ID provided in the input\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Delete command must specify the entity being deleted \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"along with its ID. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: delete [entity] [entity ID] \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"For example: delete participant P-1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected Id id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected DeleteCommand(Id id) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 2,
      "Abhiman2211": 7,
      "john0227": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Deletes a {@link Mentor} in Alfred."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DeleteMentorCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_INVALID_MENTOR_DISPLAYED_INDEX \u003d \"The mentor ID provided is \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"invalid or does not exist.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_DELETE_MENTOR_SUCCESS \u003d \"Deleted Mentor: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" mentor\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \": Deletes the mentor by the ID shown in the list of mentors.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" mentor ID\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" mentor M-1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Name teamName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DeleteMentorCommand(Id id) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DeleteMentorCommand(Id id, Name teamName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(teamName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (this.teamName !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // find team (or throw Exception)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // delete mentor from team"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // return CommandResult"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor mentorToBeDeleted;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "            mentorToBeDeleted \u003d model.deleteMentor(this.id);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            model.updateHistory(this);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MENTOR_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MENTOR_SUCCESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                mentorToBeDeleted.toString()), CommandType.M);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                || (other instanceof DeleteMentorCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                \u0026\u0026 id.equals(((DeleteMentorCommand) other).id));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "Abhiman2211": 11,
      "john0227": 50,
      "Joanna-YJA": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Deletes a {@link Participant} in Alfred."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DeleteParticipantCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX \u003d \"The participant ID provided is \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"invalid or does not exist.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_DELETE_PARTICIPANT_SUCCESS \u003d \"Deleted Participant: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" participant\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \": Deletes a participant by ID shown in the list of participants.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" participant ID\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" participant P-1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Name teamName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DeleteParticipantCommand(Id id) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DeleteParticipantCommand(Id id, Name teamName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(teamName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.teamName \u003d teamName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (this.teamName !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // find Team (or throw Exception)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // delete from team"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // return CommandResult"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant participantToBeDeleted;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "            participantToBeDeleted \u003d model.deleteParticipant(this.id);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            model.updateHistory(this);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // Model checking if index is invalid?"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PARTICIPANT_SUCCESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               participantToBeDeleted.toString()), CommandType.P);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                || (other instanceof DeleteParticipantCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                \u0026\u0026 id.equals(((DeleteParticipantCommand) other).id));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "Abhiman2211": 11,
      "john0227": 52,
      "hcwong": 1,
      "Joanna-YJA": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Deletes a {@link Team} in Alfred and all the {@code Participant}s in it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DeleteTeamCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_INVALID_TEAM_DISPLAYED_INDEX \u003d \"The team ID provided is invalid or\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"does not exist.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_DELETE_TEAM_SUCCESS \u003d \"Deleted Team: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" team\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \": Deletes a team by ID shown in the list of teams.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" team ID\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" team T-1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DeleteTeamCommand(Id id) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team teamToBeDeleted;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "            teamToBeDeleted \u003d model.deleteTeam(this.id);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            model.updateHistory(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TEAM_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                teamToBeDeleted.toString()), CommandType.T);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                || (other instanceof DeleteTeamCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                \u0026\u0026 id.equals(((DeleteTeamCommand) other).id));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "Abhiman2211": 11,
      "john0227": 37,
      "Joanna-YJA": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.TrackableState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Edits an {@link Entity} in Alfred."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public abstract class EditCommand extends Command implements TrackableState {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the specified entity \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"with the specified ID.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Edit command must specify the entity being edited \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"along with its ID and the corresponding fields you wish to edit. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: edit [entity] [entity ID] [entity fields to edit] \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"For example: edit participant P-1 n/NEW_NAME e/NEW_EMAIL\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected Id id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    EditCommand(Id id) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Stores the details to edit the entity with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * corresponding field value of the entity."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static class EditEntityDescriptor {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Do not allow editing of ID"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        protected Name name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditEntityDescriptor() {}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditEntityDescriptor(EditEntityDescriptor toCopy) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setName(toCopy.name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return this.name !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(this.name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Setters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (!(other instanceof EditEntityDescriptor)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "            EditEntityDescriptor e \u003d (EditEntityDescriptor) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return this.getName().equals(e.getName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 2,
      "Abhiman2211": 9,
      "john0227": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Edits a {@link Mentor} in Alfred."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditMentorCommand extends EditCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_EDIT_MENTOR_SUCCESS \u003d \"Edited Mentor: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MENTOR \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_INVALID_MENTOR_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"The mentor index provided is invalid\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" mentor\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \": Edits the details of the mentor by ID.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: \" + \"edit mentor [mentor ID]\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_ORGANISATION + \"ORGANIZATION] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_SUBJECT_NAME + \"SUBJECT_NAME]\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" M-1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_PHONE + \"+6591119111 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_ORGANISATION + \"Gas Mask Supplier Ltd.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditMentorDescriptor editMentorDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditMentorCommand(Id id, EditMentorDescriptor editMentorDescriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(editMentorDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.editMentorDescriptor \u003d editMentorDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor mentorToEdit;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "            mentorToEdit \u003d model.getMentor(this.id);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MENTOR_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor editedMentor \u003d this.createEditedMentor(mentorToEdit,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.editMentorDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            model.updateMentor(this.id, editedMentor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            model.updateHistory(this);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_MENTOR_SUCCESS, editedMentor.toString()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    CommandType.M);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Creates and returns a new {@code Mentor} with the details {@code mentorToEdit}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * edited with {@code editMentorDescriptor}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param mentorToEdit {@code Mentor} that will be updated."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param editMentorDescriptor Descriptor with the details to edit {@code mentorToEdit}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Updated {@code Mentor}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Mentor createEditedMentor(Mentor mentorToEdit,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                                EditMentorDescriptor editMentorDescriptor) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assert mentorToEdit !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Name updatedName \u003d editMentorDescriptor.getName().orElse(mentorToEdit.getName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id id \u003d mentorToEdit.getId();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Phone updatedPhone \u003d editMentorDescriptor.getPhone().orElse(mentorToEdit.getPhone());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Email updatedEmail \u003d editMentorDescriptor.getEmail().orElse(mentorToEdit.getEmail());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Name updatedOrganization \u003d editMentorDescriptor.getOrganization().orElse(mentorToEdit.getOrganization());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "        SubjectName updatedSubject \u003d editMentorDescriptor.getSubject().orElse(mentorToEdit.getSubject());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new Mentor(updatedName, id, updatedPhone, updatedEmail, updatedOrganization, updatedSubject);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!(other instanceof EditMentorCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorCommand e \u003d (EditMentorCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return id.equals(e.id)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \u0026\u0026 editMentorDescriptor.equals(e.editMentorDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Stores the details to edit the {@code Mentor} with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * corresponding field value of the {@code Mentor}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static class EditMentorDescriptor extends EditEntityDescriptor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private Name organization;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private SubjectName subject;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditMentorDescriptor() {}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditMentorDescriptor(EditMentorDescriptor toCopy) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "            super(toCopy);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setEmail(toCopy.email);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setOrganization(toCopy.organization);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setSubject(toCopy.subject);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return super.isAnyFieldEdited()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    || CollectionUtil.isAnyNonNull(this.email, this.phone, this.organization, this.subject);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(this.email);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(this.phone);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cName\u003e getOrganization() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(organization);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cSubjectName\u003e getSubject() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(subject);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Setters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setOrganization(Name organization) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.organization \u003d organization;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setSubject(SubjectName subject) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.subject \u003d subject;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (!(other instanceof EditMentorDescriptor)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "john0227"
        },
        "content": "            EditMentorDescriptor e \u003d (EditMentorDescriptor) other;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return super.equals(other)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 getOrganization().equals(e.getOrganization())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 getSubject().equals(e.getSubject());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "Abhiman2211": 3,
      "john0227": 187,
      "Joanna-YJA": 6,
      "hcwong": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Edits a {@link Participant} in Alfred."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditParticipantCommand extends EditCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_EDIT_PARTICIPANT_SUCCESS \u003d \"Edited Participant: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"The participant index provided is invalid\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" participant\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \": Edits the details of the participant by ID.\\n \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: \" + \"edit participant [participant ID]\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_EMAIL + \"EMAIL]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" P-1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_PHONE + \"+659456 9789 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + CliSyntax.PREFIX_EMAIL + \"alfred@butler.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditParticipantDescriptor editParticipantDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditParticipantCommand(Id id, EditParticipantDescriptor editParticipantDescriptor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(editParticipantDescriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.editParticipantDescriptor \u003d editParticipantDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant participantToEdit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "            participantToEdit \u003d model.getParticipant(this.id);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant editedParticipant \u003d this.createEditedParticipant(participantToEdit,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.editParticipantDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            model.updateParticipant(this.id, editedParticipant);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            model.updateHistory(this);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PARTICIPANT_SUCCESS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    editedParticipant.toString()), CommandType.P);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!(other instanceof EditParticipantCommand)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantCommand e \u003d (EditParticipantCommand) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return id.equals(e.id)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \u0026\u0026 editParticipantDescriptor.equals(e.editParticipantDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Creates and returns a new {@code Participant} with the details {@code participantToEdit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * edited with {@code editParticipantDescriptor}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param participantToEdit         {@code Participant} that will be updated."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param editParticipantDescriptor Descriptor with the details to edit {@code participantToEdit}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Updated {@code Participant}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Participant createEditedParticipant(Participant participantToEdit,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                                EditParticipantDescriptor editParticipantDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assert participantToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Name updatedName \u003d editParticipantDescriptor.getName().orElse(participantToEdit.getName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id id \u003d participantToEdit.getId();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Email updatedEmail \u003d editParticipantDescriptor.getEmail().orElse(participantToEdit.getEmail());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Phone updatedPhone \u003d editParticipantDescriptor.getPhone().orElse(participantToEdit.getPhone());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Reorder parameters as necessary"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new Participant(updatedName, id, updatedEmail, updatedPhone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Stores the details to edit the {@code Participant} with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * corresponding field value of the {@code Participant}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static class EditParticipantDescriptor extends EditEntityDescriptor {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        public EditParticipantDescriptor() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditParticipantDescriptor(EditParticipantDescriptor toCopy) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "            super(toCopy);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setEmail(toCopy.email);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return super.isAnyFieldEdited()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    || CollectionUtil.isAnyNonNull(this.email, this.phone);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(this.email);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(this.phone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Setters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (!(other instanceof EditParticipantDescriptor)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": "            EditParticipantDescriptor e \u003d (EditParticipantDescriptor) other;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return super.equals(other)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "Abhiman2211": 3,
      "john0227": 158,
      "hcwong": 6,
      "Joanna-YJA": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Edits a {@link Team} in Alfred."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditTeamCommand extends EditCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_EDIT_TEAM_SUCCESS \u003d \"Edited Team: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TEAM \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_INVALID_TEAM_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"The team index provided is invalid\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" team\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \": Edits the details of the team by ID.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: \" + \"edit team [team ID]\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_SUBJECT_NAME + \"SUBJECT_NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_PROJECT_NAME + \"PROJECT_NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_LOCATION + \"TABLE_NUMBER] \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" T-1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + CliSyntax.PREFIX_PROJECT_NAME + \"Saving Gotham\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditTeamDescriptor editTeamDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditTeamCommand(Id id, EditTeamDescriptor editTeamDescriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(editTeamDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.editTeamDescriptor \u003d editTeamDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team teamToEdit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "            teamToEdit \u003d model.getTeam(this.id);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team editedTeam \u003d this.createEditedTeam(teamToEdit,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.editTeamDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            model.updateTeam(this.id, editedTeam);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            model.updateHistory(this);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_TEAM_SUCCESS, editedTeam.toString()), CommandType.T);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!(other instanceof EditTeamCommand)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamCommand e \u003d (EditTeamCommand) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return id.equals(e.id)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \u0026\u0026 editTeamDescriptor.equals(e.editTeamDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Creates and returns a new {@code Team} with the details {@code teamToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * edited with {@code editTeamDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param teamToEdit {@code Team} that will be updated."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param editTeamDescriptor Descriptor with the details to edit {@code teamToEdit}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Updated {@code Team}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Team createEditedTeam(Team teamToEdit, EditTeamDescriptor editTeamDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assert teamToEdit !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Name updatedName \u003d editTeamDescriptor.getName().orElse(teamToEdit.getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id id \u003d teamToEdit.getId();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "        List\u003cParticipant\u003e participants \u003d teamToEdit.getParticipants();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Optional\u003cMentor\u003e mentor \u003d teamToEdit.getMentor();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "        SubjectName updatedSubject \u003d editTeamDescriptor.getSubject().orElse(teamToEdit.getSubject());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Score updatedScore \u003d editTeamDescriptor.getScore().orElse(teamToEdit.getScore());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Name updatedProjectName \u003d editTeamDescriptor.getProjectName().orElse(teamToEdit.getProjectName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Location updatedLocation \u003d editTeamDescriptor.getLocation().orElse(teamToEdit.getLocation());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // ID, NAME, PARTICIPANTS, MENTOR (OPTIONAL), SUBJECT, SCORE, PROJECT_NAME, PROJECT_TYPE, LOCATION"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new Team("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "                id,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "                updatedName,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "                participants,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "                mentor,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "                updatedSubject,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "                updatedScore,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "                updatedProjectName,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "                updatedLocation"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Stores the details to edit the {@code Team} with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * corresponding field value of the {@code Team}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static class EditTeamDescriptor extends EditEntityDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Don\u0027t allow user to edit List\u003cParticipant\u003e and Optional\u003cMentor\u003e through Edit command"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Do the above through addToTeam/deleteFromTeam command (something like that)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private SubjectName subject;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private Score score;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private Name projectName;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditTeamDescriptor() {}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditTeamDescriptor(EditTeamDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": "            super(toCopy);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setSubject(toCopy.subject);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setScore(toCopy.score);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setProjectName(toCopy.projectName);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setLocation(toCopy.location);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return super.isAnyFieldEdited()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    || CollectionUtil.isAnyNonNull("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "john0227"
        },
        "content": "                            this.subject,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": "                            this.score,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": "                            this.projectName,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": "                            this.location"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cSubjectName\u003e getSubject() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(subject);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cScore\u003e getScore() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(score);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cName\u003e getProjectName() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(projectName);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Setters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setSubject(SubjectName subject) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.subject \u003d subject;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setScore(Score score) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.score \u003d score;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setProjectName(Name projectName) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (!(other instanceof EditTeamDescriptor)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "john0227"
        },
        "content": "            EditTeamDescriptor e \u003d (EditTeamDescriptor) other;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return super.equals(other)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 getSubject().equals(e.getSubject())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 getScore().equals(e.getScore())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 getProjectName().equals(e.getProjectName())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "Abhiman2211": 4,
      "john0227": 204,
      "Joanna-YJA": 5,
      "hcwong": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * There are 4 main scenario where CommandException is thrown:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 1) Could not store data to file"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 2) Person index is invalid"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 3) Duplicate person with the same identity is added to model"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 4) CommandType of entity(mentor, participant, team) is invalid)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class CommandException extends AlfredException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "hcwong": 1,
      "john0227": 1,
      "Joanna-YJA": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/findcommand/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.logic.commands.findcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.PrefixUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Abstract class for the find commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public abstract class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String HEADER_MENTOR \u003d \"Found Mentors\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String HEADER_PARTICIPANT \u003d \"Found Participants\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String HEADER_TEAM \u003d \"Found Teams\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds entity according to search terms.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            + \"Find command must specify the entity being found \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            + \"and its corresponding fields \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            + \"Format: find [entity] [entity fields] \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            + \"Example: find team n/Teamnamehere\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Lists the results of the found values."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param results"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param type"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void listResults(List\u003c? extends Entity\u003e results, PrefixType type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String header \u003d PrefixUtil.getStringBasedOnPrefixType(type, HEADER_MENTOR, HEADER_PARTICIPANT, HEADER_TEAM);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        header +\u003d String.format(\" (%d results found)\", results.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        System.out.println(header);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (int i \u003d 0; i \u003c results.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Entity result \u003d results.get(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            System.out.println("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    String.format(\"%d. Name: %s, ID: %s\", i, result.getName(), result.getId()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 6,
      "hcwong": 30,
      "john0227": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/findcommand/FindMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.logic.commands.findcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.Predicates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Implements the find command for mentors."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class FindMentorCommand extends FindCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find mentor\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the mentor by the name \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"given. Parameters: name to search for \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"and/or phone and/or email and/or organization to search for \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/John Doe\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully ran the find command.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Predicate\u003cMentor\u003e findPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public FindMentorCommand("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cString\u003e name,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cString\u003e email,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cString\u003e phone,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cString\u003e organization"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cPredicate\u003cMentor\u003e\u003e filterPredicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (name.isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            filterPredicates.add(Predicates.getPredicateFindMentorByName(name.get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (phone.isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            filterPredicates.add(Predicates.getPredicateFindMentorByPhone(phone.get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (email.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            filterPredicates.add(Predicates.getPredicateFindMentorByEmail(email.get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (organization.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            filterPredicates.add("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    Predicates.getPredicateFindMentorByOrganization(organization.get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.findPredicate \u003d Predicates.predicateReducer(filterPredicates);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cMentor\u003e results \u003d model.findMentor(this.findPredicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        listResults(results, PrefixType.P);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        model.updateHistory(this);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandType.M);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "hcwong": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/findcommand/FindParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.logic.commands.findcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.Predicates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Implements the find command for participants."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class FindParticipantCommand extends FindCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find participant\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the participant by the name \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"given. Parameters: name to search for \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"and/or phone and/or email to search for \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/John Doe\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully ran the find command.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Predicate\u003cParticipant\u003e findPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public FindParticipantCommand("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cString\u003e name,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cString\u003e email,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cString\u003e phone"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cPredicate\u003cParticipant\u003e\u003e filterPredicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (name.isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            filterPredicates.add("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    Predicates.getPredicateFindParticipantByName(name.get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (email.isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            filterPredicates.add("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    Predicates.getPredicateFindParticipantByEmail(email.get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (phone.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            filterPredicates.add("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    Predicates.getPredicateFindParticipantByPhone(phone.get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.findPredicate \u003d Predicates.predicateReducer(filterPredicates);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cParticipant\u003e results \u003d model.findParticipant(this.findPredicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        listResults(results, PrefixType.P);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        model.updateHistory(this);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandType.P);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "hcwong": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/findcommand/FindTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.logic.commands.findcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.Predicates;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Implements the find command for teams."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class FindTeamCommand extends FindCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find team\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the team by the name \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"given. Parameters: name to search for \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"and/or project name to search for\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/Team01\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully ran the find command.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Predicate\u003cTeam\u003e findPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public FindTeamCommand("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cString\u003e name,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cString\u003e projectName"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cPredicate\u003cTeam\u003e\u003e filteredParticipants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (name.isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            filteredParticipants.add("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    Predicates.getPredicateFindTeamByName(name.get()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (projectName.isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            filteredParticipants.add("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    Predicates.getPredicateFindTeamByProjectName(projectName.get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.findPredicate \u003d Predicates.predicateReducer(filteredParticipants);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cTeam\u003e results \u003d model.findTeam(this.findPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        listResults(results, PrefixType.P);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        model.updateHistory(this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandType.T);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "hcwong": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/historycommand/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.logic.commands.historycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Command that undoes the effects of the previous command, returning the model to its previous state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing the history of your commands: \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows the history of previously-executed commands\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                            + \"that are undo-able and redo-able\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Executes the command and returns a CommandResult with a message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param model contains the state of the data in memory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return feedback message of the operation result for display."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandType.H);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 26,
      "Joanna-YJA": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/historycommand/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.logic.commands.historycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelHistoryException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Command that redoes the effects of the previous command, returning the model to the state after re-doing the command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Re-did 1 command\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Redoes the previous command\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Executes the command and returns a CommandResult with a message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param model contains the state of the data in memory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return feedback message of the operation result for display."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            model.redo();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, CommandType.H);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (AlfredModelHistoryException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 31,
      "Joanna-YJA": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/historycommand/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.logic.commands.historycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelHistoryException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Command that undoes the effects of the previous command, returning the model to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Un-did 1 command\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Undoes the previous command\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Executes the command and returns a CommandResult with a message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param model contains the state of the data in memory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return feedback message of the operation result for display."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            model.undo();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, CommandType.H);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (AlfredModelHistoryException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 31,
      "Joanna-YJA": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.PrefixUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.ReadOnlyEntityList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Lists every specified {@link Entity} (i.e. mentor, participant, team) in Alfred."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all entities\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_NO_MENTOR \u003d \"There are currently no mentors in Alfred.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_NO_PARTICIPANT \u003d \"There are currently no participants in Alfred.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_NO_TEAM \u003d \"There are currently no teams in Alfred.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all entities of the specified entity type \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"stored within Alfred.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" [entity name] \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"For example: \\\"list mentors\\\" or \\\"list participants\\\" or \\\"list teams\\\"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String MESSAGE_MENTOR_HEADER \u003d \"List of all mentors:\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String MESSAGE_PARTICIPANT_HEADER \u003d \"List of all participants:\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String MESSAGE_TEAM_HEADER \u003d \"List of all teams:\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Displays basic information of entities of specified {@code PrefixType} in {@code Alfred}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void displayEntities(Model model, PrefixType prefixType) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ReadOnlyEntityList entityList \u003d PrefixUtil.getEntityListBasedOnPrefixType(prefixType, model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (entityList.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "            System.out.println(PrefixUtil.getStringBasedOnPrefixType("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    prefixType,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    MESSAGE_NO_MENTOR,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    MESSAGE_NO_PARTICIPANT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    MESSAGE_NO_TEAM"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.out.println(PrefixUtil.getStringBasedOnPrefixType("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "                prefixType,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "                MESSAGE_MENTOR_HEADER,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "                MESSAGE_PARTICIPANT_HEADER,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "                MESSAGE_TEAM_HEADER"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        entityList.list().forEach(this::listEntity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Prints the basic information of given Entity."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param entity Entity to list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private void listEntity(Entity entity) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Map\u003cString, String\u003e fieldMap \u003d entity.viewMinimal();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        StringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (String key : fieldMap.keySet()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "            toPrint.append(\"\\t\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    .append(StringUtil.capitalize(key))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    .append(\": \")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    .append(fieldMap.get(key))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    .append(\"   \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.out.println(toPrint.toString().trim());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 4,
      "john0227": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Lists every {@link Mentor} in Alfred."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListMentorCommand extends ListCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all mentors\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all of the mentors.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.displayEntities(model, PrefixType.M);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        model.resetFilteredLists();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        model.updateHistory(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandType.M);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "john0227": 26,
      "Joanna-YJA": 2,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Lists every {@link Participant} in Alfred."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListParticipantCommand extends ListCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all participants\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all of the participants.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.displayEntities(model, PrefixType.P);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        model.resetFilteredLists();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        model.updateHistory(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandType.P);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "john0227": 26,
      "Joanna-YJA": 2,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Lists every {@link Team} in Alfred."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListTeamCommand extends ListCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all teams\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all of the teams.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.displayEntities(model, PrefixType.T);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        model.resetFilteredLists();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        model.updateHistory(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandType.T);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "john0227": 25,
      "Joanna-YJA": 3,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/scorecommand/AddScoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.commands.scorecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Command for adding a certain score to a team\u0027s current score."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AddScoreCommand extends ScoreCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_SCORE_TEAM_SUCCESS \u003d \"Added %1$s points to %2$s\u0027s score\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"score add\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \": adds the specified score to specified team\u0027s current score. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"If the team\u0027s new score exceeds \" + Score.MAX_SCORE + \" it will be set to \" + Score.MAX_SCORE + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" [teamID] score \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"For example: \" + COMMAND_WORD + \" T-5 25\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AlfredParser.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public AddScoreCommand(Id teamId, Score score) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(teamId, score);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Team teamToScore;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            teamToScore \u003d model.getTeam(id);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (AlfredException ae) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            model.addTeamScore(teamToScore, score);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (AlfredException ae) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new CommandException(ae.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        logger.info(\"Adding \" + this.score + \" to Score of Team \" + this.id);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SCORE_TEAM_SUCCESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                score.toString(), teamToScore.getName().toString()), CommandType.T);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                || (other instanceof SetScoreCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                \u0026\u0026 id.equals(((AddScoreCommand) other).id))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                \u0026\u0026 score.equals(((AddScoreCommand) other).score);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/scorecommand/ScoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.commands.scorecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Changes a {@code Team}\u0027s score in Alfred."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public abstract class ScoreCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"score\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": updates, adds or subtracts the given score \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"to the specified team\u0027s score. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" set/add/sub/reset Team-Id newScore \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"For example: score add T-4 25\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // The reset score command doesn\u0027t need its own command class since it is simply an implementation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // of the set score command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // Since Reset command doesn\u0027t have its own class it\u0027s usage message is defined within the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // the ScoreCommand class itself."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String RESET_MESSAGE_USAGE \u003d COMMAND_WORD + \" reset\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \": resets the specified team\u0027s score to \" + Score.MIN_SCORE + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" reset teamID \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"For example: \" + COMMAND_WORD + \" reset T-5\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_SCORE_NOT_MENTIONED \u003d \"The score to update with or update to \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"must be mentioned.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    protected Id id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    protected Score score;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ScoreCommand(Id teamId, Score score) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(teamId);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(score);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.id \u003d teamId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/scorecommand/SetScoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.commands.scorecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Sets the specified team\u0027s score to match the given score."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class SetScoreCommand extends ScoreCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_SCORE_TEAM_SUCCESS \u003d \"Changed %1$s\u0027s score to : %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"score set\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \": updates the specified team\u0027s score to match the score mentioned. \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" [teamID] [new score] \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"For example: \" + COMMAND_WORD + \" T-5 45\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AlfredParser.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public SetScoreCommand(Id teamId, Score score) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(teamId, score);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Team teamToScore;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            teamToScore \u003d model.getTeam(id);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (AlfredException ae) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            model.updateTeamScore(teamToScore, score);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        logger.info(\"Setting \" + this.score + \" as Score of Team \" + this.id);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SCORE_TEAM_SUCCESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                teamToScore.getName().toString(), score.toString()), CommandType.T);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                || (other instanceof SetScoreCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                \u0026\u0026 id.equals(((SetScoreCommand) other).id))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                \u0026\u0026 score.equals(((SetScoreCommand) other).score);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/scorecommand/SubtractScoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.commands.scorecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Subtracts a score from a team\u0027s current score."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class SubtractScoreCommand extends ScoreCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_SCORE_TEAM_SUCCESS \u003d \"Subtracted %1$s points from %2$s\u0027s score\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"score sub\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \": subtracts the specified score from the specified team\u0027s current score. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"If the team\u0027s new score goes below \" + Score.MIN_SCORE + \" it will be set to \" + Score.MIN_SCORE + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" teamID score \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"For example: \" + COMMAND_WORD + \" T-5 15\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AlfredParser.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public SubtractScoreCommand(Id teamId, Score score) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(teamId, score);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Team teamToScore;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            teamToScore \u003d model.getTeam(id);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (AlfredException ae) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            model.subtractTeamScore(teamToScore, score);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        logger.info(\"Subtracting \" + this.score + \" from Score of Team \" + this.id);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SCORE_TEAM_SUCCESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                score.toString(), teamToScore.getName().toString()), CommandType.T);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                || (other instanceof SetScoreCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                \u0026\u0026 id.equals(((SubtractScoreCommand) other).id))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                \u0026\u0026 score.equals(((SubtractScoreCommand) other).score);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/viewcommand/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Shows detailed view of the {@link Entity} at specified ID."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "public abstract class ViewCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": shows details of the \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"entity with the specified ID. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: view [entity name] [entity ID] \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"For example (to view Mentor with ID M-1): \" + COMMAND_WORD + \" mentor M-1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected Id id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ViewCommand(Id id) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Prints detailed information regarding given entity."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param entity Entity to view."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void displayDetailedEntity(Entity entity) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.out.println(\"Viewing \" + entity.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.out.println(\"\\t\" + entity.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 3,
      "john0227": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/viewcommand/ViewMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Shows detailed view of the {@link Mentor} at specified ID."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ViewMentorCommand extends ViewCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view mentor\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing mentor with ID: %s\"; // %s -\u003e Id"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_INVALID_MENTOR_DISPLAYED_INDEX \u003d \"The mentor index provided is invalid\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" mentor\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \": shows details of the mentor with specified ID. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: view mentor [mentor ID] \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" mentor M-1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ViewMentorCommand(Id id) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor mentorToView;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "            mentorToView \u003d model.getMentor(this.id);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            model.updateHistory(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MENTOR_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.viewEntity(mentorToView);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.displayDetailedEntity(mentorToView);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.id), CommandType.M);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                || (other instanceof ViewMentorCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                \u0026\u0026 id.equals(((ViewMentorCommand) other).id));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "Abhiman2211": 10,
      "john0227": 41,
      "Joanna-YJA": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/viewcommand/ViewParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Shows detailed view of the {@link Participant} at specified ID."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ViewParticipantCommand extends ViewCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view participant\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing participant with ID: %s\"; // %s -\u003e Id"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"The participant index provided is invalid\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" participant\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \": shows details of the participant with specified ID. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: view participant [participant ID]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"For example: \" + COMMAND_WORD + \" participant P-1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // Eventually change to take in Name (or add a new constructor)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ViewParticipantCommand(Id id) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant participantToView;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "            participantToView \u003d model.getParticipant(this.id);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            model.updateHistory(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.viewEntity(participantToView);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.displayDetailedEntity(participantToView);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.id), CommandType.P);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                || (other instanceof ViewParticipantCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                \u0026\u0026 id.equals(((ViewParticipantCommand) other).id));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "Abhiman2211": 10,
      "john0227": 42,
      "hcwong": 1,
      "Joanna-YJA": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/viewcommand/ViewTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Shows detailed view of the {@link Team} at specified ID."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ViewTeamCommand extends ViewCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view team\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing team with ID: %s\"; // %s -\u003e Id"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_INVALID_TEAM_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"The team index provided is invalid\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" team\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \": shows details of the team with specified ID. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"Format: view team [team ID] \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"For example: \" + COMMAND_WORD + \" team T-1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ViewTeamCommand(Id id) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team teamToView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "            teamToView \u003d model.getTeam(this.id);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            model.updateHistory(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.viewEntity(teamToView);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.displayDetailedEntity(teamToView);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.id), CommandType.T);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                || (other instanceof ViewTeamCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                \u0026\u0026 id.equals(((ViewTeamCommand) other).id));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "Abhiman2211": 10,
      "john0227": 42,
      "Joanna-YJA": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AlfredParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.ExportCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.ImportCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.historycommand.HistoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.historycommand.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.historycommand.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.scorecommand.ScoreCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.addcommandparser.AddCommandAllocator;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.csvcommandparser.ExportCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.csvcommandparser.ImportCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.deletecommandparser.DeleteCommandAllocator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.editcommandparser.EditCommandAllocator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.findcommandparser.FindCommandAllocator;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.listcommandparser.ListCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.scorecommandparser.ScoreCommandAllocator;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.viewcommandparser.ViewCommandAllocator;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AlfredParser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AlfredParser.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param userInput full   input string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        logger.info(\"Finding command type of \" + commandWord);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new AddCommandAllocator().allocate(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return new FindCommandAllocator().allocate(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            logger.info(\"Deleting an existing Participant...\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new DeleteCommandAllocator().allocate(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case ScoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new ScoreCommandAllocator().allocate(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new ViewCommandAllocator().allocate(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            logger.info(\"Editing an existing Entity...\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new EditCommandAllocator().allocate(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            logger.info(\"Unknown command type: \" + commandWord);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 12,
      "Abhiman2211": 26,
      "-": 53,
      "Joanna-YJA": 11,
      "john0227": 10,
      "hcwong": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AlfredParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AlfredParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003cspecifier\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AlfredParserUtil.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String ID_SEPARATOR_CHARACTER \u003d \"-\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Id parseIndex(String oneBasedIndex, PrefixType prefix) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        oneBasedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String trimmedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String idSeparator;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            trimmedIndex \u003d oneBasedIndex.substring(2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            idSeparator \u003d Character.toString(oneBasedIndex.charAt(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String expectedPrefix \u003d prefix.name();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex) || !oneBasedIndex.startsWith(expectedPrefix)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                || !idSeparator.equals(ID_SEPARATOR_CHARACTER)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int idNumber \u003d Integer.parseInt(trimmedIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Id(prefix, idNumber);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the {@code userInput} to separate the specifier from the user\u0027s input, where"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the specifier is the entity or entity\u0027s ID specifying either which parser to call"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * or which specific entity to handle."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param userInput the user\u0027s command input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return String representation of the specifier."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static String getSpecifierFromCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String entity \u003d matcher.group(\"specifier\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return entity;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the {@code userInput} to separate the arguments from the user\u0027s input, where"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the arguments are the additional details the user provides as part of the command\u0027s"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * requirements."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param userInput the user\u0027s command input."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return String representation of the arguments."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static String getArgumentsFromCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String args \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return args;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            logger.severe(\"Name is not in the valid format: \" + name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses a {@code String score} into a {@code Score}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param score the string score inputted by the user."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return a Score object representing the score inputted by the user."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the score is of invalid format."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Score parseScore(String score) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(score);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String trimmedScore \u003d score.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        StringUtil.validateScore(trimmedScore);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int scoreValue \u003d Integer.parseInt(trimmedScore);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!Score.isValidScore(scoreValue)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            logger.severe(\"Score is not in the valid format: \" + scoreValue);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(Score.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Score(scoreValue);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Parses a {@code String} into a {@code Location}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param location"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Location"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws ParseException if the {@code String} is invalid."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            int trimmedLocation \u003d Integer.parseInt(location.trim());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                logger.severe(\"Integer location is not in correct format:\" + location);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                throw new ParseException(Location.MESSAGE_CONSTRAINTS_INVALID_TABLE_NUMBER);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            logger.severe(\"Integer cannot be parsed from location: \" + location);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS_INVALID_TABLE_NUMBER);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Parses a {@code String} into a {@code Subject}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param subject"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return SubjectName"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws ParseException if the {@code String} is invalid."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static SubjectName parseSubject(String subject) throws ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String trimmedSubject \u003d subject.trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!SubjectName.isValidSubjectName(trimmedSubject)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(SubjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        for (SubjectName subjectName : SubjectName.values()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (subjectName.toString().equalsIgnoreCase(trimmedSubject)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                return subjectName;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        throw new ParseException(SubjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "Abhiman2211": 184,
      "Joanna-YJA": 11,
      "hcwong": 14,
      "john0227": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Prefix PREFIX_ORGANISATION \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Prefix PREFIX_SCORE \u003d new Prefix(\"sc/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Prefix PREFIX_SUBJECT_NAME \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Prefix PREFIX_PROJECT_NAME \u003d new Prefix(\"pn/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Prefix PREFIX_FILE_PATH \u003d new Prefix(\"fp/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String PREFIX_ENTITY_MENTOR \u003d \"M\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String PREFIX_ENTITY_PARTICIPANT \u003d \"P\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String PREFIX_ENTITY_TEAM \u003d \"T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String ENTITY_MENTOR \u003d \"mentor\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String ENTITY_PARTICIPANT \u003d \"participant\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String ENTITY_TEAM \u003d \"team\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String SCORE_UPDATE \u003d \"set\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String SCORE_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String SCORE_SUBTRACT \u003d \"sub\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String SCORE_RESET \u003d \"reset\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 11,
      "-": 14,
      "john0227": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CommandAllocator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Represents a CommandAllocator that is able to call the appropriate Parser"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * depending on the user input and returns a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public interface CommandAllocator\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses {@code userInput} to determine which specific parser to call for the specific"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * user command and accordingly returns the corresponding command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    T allocate(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addcommandparser/AddCommandAllocator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.CommandAllocator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Allocates the user\u0027s add command input to the correct parser in order to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * call the appropriate entity\u0027s add parser."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AddCommandAllocator implements CommandAllocator\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AlfredParser.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public AddCommand allocate(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String entity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String args;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            entity \u003d AlfredParserUtil.getSpecifierFromCommand(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            args \u003d AlfredParserUtil.getArgumentsFromCommand(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        switch (entity) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.ENTITY_MENTOR:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            //logger.info(\"Adding a new Mentor...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new AddMentorCommandParser().parse(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.ENTITY_PARTICIPANT:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            //logger.info(\"Adding a new Participant...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new AddParticipantCommandParser().parse(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.ENTITY_TEAM:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            //logger.info(\"Adding a new Team...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new AddTeamCommandParser().parse(args);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            logger.warning(\"Failed to find appropriate allocator...\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addcommandparser/AddMentorCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANISATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddMentorCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link AddMentorCommand} object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AddMentorCommandParser implements Parser\u003cAddMentorCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddMentorCommand}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns an {@code AddMentorCommand} object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public AddMentorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ORGANISATION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                        PREFIX_SUBJECT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!AlfredParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                PREFIX_ORGANISATION, PREFIX_SUBJECT_NAME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                   AddMentorCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Name name \u003d AlfredParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Phone phone \u003d AlfredParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Email email \u003d AlfredParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Name organisation \u003d AlfredParserUtil.parseName(argMultimap.getValue(PREFIX_ORGANISATION).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        SubjectName subject \u003d AlfredParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id id \u003d MentorList.generateId();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Mentor mentor \u003d new Mentor(name, id, phone, email, organisation, subject);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new AddMentorCommand(mentor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 48,
      "john0227": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addcommandparser/AddParticipantCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddParticipantCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link AddParticipantCommand} object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AddParticipantCommandParser implements Parser\u003cAddParticipantCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddParticipantCommand}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns an {@code AddParticipantCommand} object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws ParseException If the user input does not conform the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public AddParticipantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!AlfredParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    AddParticipantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Name name \u003d AlfredParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Phone phone \u003d AlfredParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Email email \u003d AlfredParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id id \u003d ParticipantList.generateId();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Participant participant \u003d new Participant(name, id, email, phone);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new AddParticipantCommand(participant);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 42,
      "john0227": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addcommandparser/AddTeamCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddTeamCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link AddTeamCommand} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AddTeamCommandParser implements Parser\u003cAddTeamCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final Logger logger \u003d new LogsCenter().getLogger(AddTeamCommandParser.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public AddTeamCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SUBJECT_NAME,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "                        PREFIX_PROJECT_NAME, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!AlfredParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PROJECT_NAME,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                PREFIX_LOCATION, PREFIX_SUBJECT_NAME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "            logger.severe(\"Parse exception is thrown\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    AddTeamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Name name \u003d AlfredParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        SubjectName subject \u003d AlfredParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT_NAME).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Name projectName \u003d AlfredParserUtil.parseName(argMultimap.getValue(PREFIX_PROJECT_NAME).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Location location \u003d AlfredParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id id \u003d TeamList.generateId();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        List\u003cParticipant\u003e participants \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Score score \u003d new Score(0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Optional\u003cMentor\u003e mentor \u003d Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team team \u003d new Team(id, name, participants, mentor, subject, score, projectName, location);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        logger.info(\"New team added with the following information: \" + team.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new AddTeamCommand(team);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 54,
      "john0227": 9,
      "Joanna-YJA": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/csvcommandparser/ExportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.csvcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.ExportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.ExportMentorCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.ExportParticipantCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.ExportTeamCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses {@code userInput} into an ExportCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String ENTITY_NOT_SPECIFIED \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FILE_PATH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String entity \u003d argMultimap.getPreamble().toLowerCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d argMultimap.getValue(PREFIX_FILE_PATH).orElse(\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!filePath.isEmpty() \u0026\u0026 !filePath.toLowerCase().endsWith(\".csv\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        switch (entity) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case CliSyntax.ENTITY_MENTOR:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new ExportMentorCommand(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case CliSyntax.ENTITY_PARTICIPANT:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new ExportParticipantCommand(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case CliSyntax.ENTITY_TEAM:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new ExportTeamCommand(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case ENTITY_NOT_SPECIFIED:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new ExportCommand(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/csvcommandparser/ImportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.csvcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.ImportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses {@code userInput} into an ImportCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FILE_PATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!argMultimap.getPreamble().isBlank()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "                || !AlfredParserUtil.arePrefixesPresent(argMultimap, PREFIX_FILE_PATH)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        List\u003cString\u003e fileNames \u003d argMultimap.getAllValues(PREFIX_FILE_PATH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (fileNames.isEmpty() || fileNames.size() \u003e 2 || this.areInvalid(fileNames)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (fileNames.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new ImportCommand(fileNames.get(0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new ImportCommand(fileNames.get(0), fileNames.get(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private boolean areInvalid(List\u003cString\u003e fileNames) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return fileNames.stream().anyMatch(fileName -\u003e !fileName.toLowerCase().endsWith(\".csv\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deletecommandparser/DeleteCommandAllocator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.CommandAllocator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Allocates the user\u0027s delete command input to the correct parser in order to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * call the appropriate entity\u0027s delete parser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class DeleteCommandAllocator implements CommandAllocator\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public DeleteCommand allocate(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String entity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String args;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            entity \u003d AlfredParserUtil.getSpecifierFromCommand(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            args \u003d AlfredParserUtil.getArgumentsFromCommand(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        switch (entity) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.ENTITY_PARTICIPANT:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new DeleteParticipantCommandParser().parse(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.ENTITY_MENTOR:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new DeleteMentorCommandParser().parse(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.ENTITY_TEAM:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new DeleteTeamCommandParser().parse(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deletecommandparser/DeleteMentorCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteMentorCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link DeleteMentorCommand} object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class DeleteMentorCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code DeleteMentorCommand}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns a {@code DeleteMentorCommand} object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public DeleteMentorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMentorCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            Id id \u003d AlfredParserUtil.parseIndex(args, PrefixType.M);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new DeleteMentorCommand(id);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    String.format(DeleteMentorCommand.MESSAGE_INVALID_MENTOR_DISPLAYED_INDEX), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 30,
      "john0227": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deletecommandparser/DeleteParticipantCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteParticipantCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link DeleteParticipantCommand} object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class DeleteParticipantCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code DeleteParticipantCommand}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns a {@code DeleteParticipantCommand} object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public DeleteParticipantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    DeleteParticipantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            Id id \u003d AlfredParserUtil.parseIndex(args, PrefixType.P);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new DeleteParticipantCommand(id);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    String.format(DeleteParticipantCommand.MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 35,
      "john0227": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deletecommandparser/DeleteTeamCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteTeamCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link DeleteTeamCommand} object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class DeleteTeamCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code DeleteTeamCommand}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns a {@code DeleteTeamCommand} object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public DeleteTeamCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTeamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            Id id \u003d AlfredParserUtil.parseIndex(args, PrefixType.T);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new DeleteTeamCommand(id);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "              String.format(DeleteTeamCommand.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 33,
      "john0227": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/editcommandparser/EditCommandAllocator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.editcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.CommandAllocator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Allocates the user\u0027s edit command input to the correct parser in order to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * call the appropriate entity\u0027s edit parser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class EditCommandAllocator implements CommandAllocator\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public EditCommand allocate(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String entity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String args;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            entity \u003d AlfredParserUtil.getSpecifierFromCommand(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            args \u003d AlfredParserUtil.getArgumentsFromCommand(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        switch (entity) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.ENTITY_PARTICIPANT:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new EditParticipantCommandParser().parse(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.ENTITY_MENTOR:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new EditMentorCommandParser().parse(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.ENTITY_TEAM:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new EditTeamCommandParser().parse(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/editcommandparser/EditMentorCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.editcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.editcommand.EditMentorCommand.EditMentorDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANISATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditMentorCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link EditMentorCommand} object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class EditMentorCommandParser implements Parser\u003cEditMentorCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code EditMentorCommand}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns an {@code EditMentorCommand} object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public EditMentorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ORGANISATION,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                        PREFIX_SUBJECT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            id \u003d AlfredParserUtil.parseIndex(argMultimap.getPreamble(), PrefixType.M);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    EditMentorCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        EditMentorDescriptor editMentorDescriptor \u003d new EditMentorDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            editMentorDescriptor.setName(AlfredParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            editMentorDescriptor.setPhone(AlfredParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            editMentorDescriptor.setEmail(AlfredParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ORGANISATION).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            editMentorDescriptor"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            .setOrganization(AlfredParserUtil.parseName(argMultimap.getValue(PREFIX_ORGANISATION).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SUBJECT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            editMentorDescriptor"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            .setSubject(AlfredParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT_NAME).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!editMentorDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(EditMentorCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new EditMentorCommand(id, editMentorDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 63,
      "john0227": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/editcommandparser/EditParticipantCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.editcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditParticipantCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditParticipantCommand.EditParticipantDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link EditParticipantCommand} object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class EditParticipantCommandParser implements Parser\u003cEditParticipantCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code EditParticipantCommand}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns an {@code EditParticipantCommand} object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditParticipantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            id \u003d AlfredParserUtil.parseIndex(argMultimap.getPreamble(), PrefixType.P);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    EditParticipantCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        EditParticipantDescriptor editParticipantDescriptor \u003d new EditParticipantDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            editParticipantDescriptor.setName(AlfredParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            editParticipantDescriptor.setEmail(AlfredParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            editParticipantDescriptor.setPhone(AlfredParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!editParticipantDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(EditParticipantCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new EditParticipantCommand(id, editParticipantDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 40,
      "john0227": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/editcommandparser/EditTeamCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.editcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.editcommand.EditTeamCommand.EditTeamDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditTeamCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link EditTeamCommand} object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class EditTeamCommandParser implements Parser\u003cEditTeamCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code EditTeamCommand}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns an {@code EditTeamCommand} object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public EditTeamCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SUBJECT_NAME,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "                        PREFIX_PROJECT_NAME, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            id \u003d AlfredParserUtil.parseIndex(argMultimap.getPreamble(), PrefixType.T);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    EditTeamCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        EditTeamDescriptor editTeamDescriptor \u003d new EditTeamDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            editTeamDescriptor.setName(AlfredParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SUBJECT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            editTeamDescriptor"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            .setSubject(AlfredParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PROJECT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "            editTeamDescriptor.setProjectName(AlfredParserUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    .parseName(argMultimap.getValue(PREFIX_PROJECT_NAME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            editTeamDescriptor.setLocation(AlfredParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!editTeamDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(EditTeamCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new EditTeamCommand(id, editTeamDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 57,
      "john0227": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * ParseException is thrown is one of the 4 scenario:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 1) When the command is unknown"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 2) When the specific operation cannot be applied on an entity(invalid entity)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 3) When the command format is inaccurate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 4) When user input is incomplete."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "Joanna-YJA": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/findcommandparser/FindCommandAllocator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.logic.parser.findcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.AlfredParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.CommandAllocator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Allocates the user\u0027s find command input top the correct parser."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class FindCommandAllocator implements CommandAllocator\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AlfredParser.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public FindCommand allocate(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        String entity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        String args;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            entity \u003d AlfredParserUtil.getSpecifierFromCommand(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            args \u003d AlfredParserUtil.getArgumentsFromCommand(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        switch (entity) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        case CliSyntax.ENTITY_MENTOR:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return new FindMentorCommandParser().parse(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        case CliSyntax.ENTITY_PARTICIPANT:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return new FindParticipantCommandParser().parse(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        case CliSyntax.ENTITY_TEAM:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return new FindTeamCommandParser().parse(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/findcommandparser/FindMentorCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.logic.parser.findcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANISATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindMentorCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Parses input arguments and creates a new {@link FindMentorCommand} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class FindMentorCommandParser implements Parser\u003cFindMentorCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the code {@code FindMentorCommand}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * and returns a {@FindMentorCommand} object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param args arguments to the command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return {@code FindMentorCommand}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public FindMentorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                        args, PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE, PREFIX_ORGANISATION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Optional\u003cString\u003e name \u003d argumentMultimap.getValue(PREFIX_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Optional\u003cString\u003e email \u003d argumentMultimap.getValue(PREFIX_EMAIL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Optional\u003cString\u003e phone \u003d argumentMultimap.getValue(PREFIX_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Optional\u003cString\u003e organization \u003d argumentMultimap.getValue(PREFIX_ORGANISATION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        boolean allPrefixesEmpty \u003d name.isEmpty() \u0026\u0026 email.isEmpty()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 phone.isEmpty() \u0026\u0026 organization.isEmpty();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (allPrefixesEmpty || !argumentMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    FindMentorCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new FindMentorCommand(name, email, phone, organization);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hcwong": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/findcommandparser/FindParticipantCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.logic.parser.findcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindParticipantCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Parses input arguments and creates a new {@link FindParticipantCommand} object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class FindParticipantCommandParser implements Parser\u003cFindParticipantCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the code {@code FindParticipantCommand}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * and returns a {@FindParticipantCommand} object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param args arguments to the command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return {@code FindParticipantCommand}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public FindParticipantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Optional\u003cString\u003e name \u003d argumentMultimap.getValue(PREFIX_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Optional\u003cString\u003e email \u003d argumentMultimap.getValue(PREFIX_EMAIL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Optional\u003cString\u003e phone \u003d argumentMultimap.getValue(PREFIX_PHONE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // If no prefixes given, we will throw an error later"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        boolean allPrefixesEmpty \u003d name.isEmpty() \u0026\u0026 email.isEmpty() \u0026\u0026 phone.isEmpty();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (allPrefixesEmpty || !argumentMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    FindParticipantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new FindParticipantCommand(name, email, phone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/findcommandparser/FindTeamCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.logic.parser.findcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindTeamCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Parses input arguments and creates a new {@link FindTeamCommand} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class FindTeamCommandParser implements Parser\u003cFindTeamCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the code {@code FindTeamCommand}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * and returns a {@FindTeamCommand} object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param args arguments to the command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return {@code FindTeamCommand}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public FindTeamCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PROJECT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Optional\u003cString\u003e name \u003d argumentMultimap.getValue(PREFIX_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Optional\u003cString\u003e projectName \u003d argumentMultimap.getValue(PREFIX_PROJECT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        boolean allPrefixesEmpty \u003d name.isEmpty() \u0026\u0026 projectName.isEmpty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (allPrefixesEmpty || !argumentMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    FindTeamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new FindTeamCommand(name, projectName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/listcommandparser/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.listcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListMentorCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListParticipantCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListTeamCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Parses the input arguments and correspondingly returns the appropriate"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * ListCommand object for the given scenario."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String MENTOR_CASE \u003d \"mentors\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String PARTICIPANT_CASE \u003d \"participants\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String TEAM_CASE \u003d \"teams\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a ListCommand and returns"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the appropriate ListCommand object for the specific case for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param args the arguments to be parsed the ListCommandParser."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return returns a new ListCommand object to be executed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expect format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String trimmedArgs \u003d args.trim().toLowerCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        switch(trimmedArgs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case MENTOR_CASE:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new ListMentorCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case PARTICIPANT_CASE:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new ListParticipantCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case TEAM_CASE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new ListTeamCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/scorecommandparser/AddScoreCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.scorecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.scorecommand.AddScoreCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Parses input arguments and creates a new {@link AddScoreCommand} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AddScoreCommandParser implements Parser\u003cAddScoreCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AlfredParser.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public AddScoreCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String score;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id teamId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Score teamScore;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            id \u003d AlfredParserUtil.getSpecifierFromCommand(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            score \u003d AlfredParserUtil.getArgumentsFromCommand(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            logger.severe(\"Command is in an invalid format.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddScoreCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        teamId \u003d AlfredParserUtil.parseIndex(id, PrefixType.T);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        teamScore \u003d AlfredParserUtil.parseScore(score);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new AddScoreCommand(teamId, teamScore);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/scorecommandparser/ResetScoreCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.scorecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.scorecommand.ScoreCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.scorecommand.SetScoreCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Parses input arguments and creates a new {@link SetScoreCommand} object to set the score to 0."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class ResetScoreCommandParser implements Parser\u003cScoreCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AlfredParser.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public SetScoreCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id teamId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Score teamScore \u003d new Score(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            teamId \u003d AlfredParserUtil.parseIndex(args, PrefixType.T);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            logger.severe(\"User inputted team index is invalid.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScoreCommand.RESET_MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new SetScoreCommand(teamId, teamScore);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/scorecommandparser/ScoreCommandAllocator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.scorecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.scorecommand.ScoreCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.CommandAllocator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Allocates the user\u0027s score command input to the correct parser in order to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * call the appropriate score command parser depending on the scenario."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class ScoreCommandAllocator implements CommandAllocator\u003cScoreCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AlfredParser.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ScoreCommand allocate(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            type \u003d AlfredParserUtil.getSpecifierFromCommand(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScoreCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String args \u003d AlfredParserUtil.getArgumentsFromCommand(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        logger.info(\"Allocating Score command to appropriate parser...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.SCORE_ADD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new AddScoreCommandParser().parse(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.SCORE_UPDATE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new SetScoreCommandParser().parse(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.SCORE_SUBTRACT:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new SubtractScoreCommandParser().parse(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.SCORE_RESET:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new ResetScoreCommandParser().parse(args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                        ScoreCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/scorecommandparser/SetScoreCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.scorecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.scorecommand.SetScoreCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Parses input arguments and creates a new {@link SetScoreCommand} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class SetScoreCommandParser implements Parser\u003cSetScoreCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AlfredParser.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public SetScoreCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String score;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id teamId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Score teamScore;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            id \u003d AlfredParserUtil.getSpecifierFromCommand(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            score \u003d AlfredParserUtil.getArgumentsFromCommand(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            logger.severe(\"Command is in an invalid format.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetScoreCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        teamId \u003d AlfredParserUtil.parseIndex(id, PrefixType.T);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        teamScore \u003d AlfredParserUtil.parseScore(score);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new SetScoreCommand(teamId, teamScore);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/scorecommandparser/SubtractScoreCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.scorecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.scorecommand.SubtractScoreCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Parses input arguments and creates a new {@link SubtractScoreCommand} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class SubtractScoreCommandParser implements Parser\u003cSubtractScoreCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AlfredParser.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public SubtractScoreCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String score;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id teamId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Score teamScore;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            id \u003d AlfredParserUtil.getSpecifierFromCommand(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            score \u003d AlfredParserUtil.getArgumentsFromCommand(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            logger.severe(\"Command is in an invalid format.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    SubtractScoreCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        teamId \u003d AlfredParserUtil.parseIndex(id, PrefixType.T);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        teamScore \u003d AlfredParserUtil.parseScore(score);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new SubtractScoreCommand(teamId, teamScore);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/viewcommandparser/ViewCommandAllocator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.viewcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.CommandAllocator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Allocates the user\u0027s view command input to the correct parser in order to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * call the appropriate entity\u0027s view parser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class ViewCommandAllocator implements CommandAllocator\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ViewCommand allocate(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String entity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String args;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            entity \u003d AlfredParserUtil.getSpecifierFromCommand(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            args \u003d AlfredParserUtil.getArgumentsFromCommand(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        switch (entity) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.ENTITY_MENTOR:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new ViewMentorCommandParser().parse(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.ENTITY_PARTICIPANT:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new ViewParticipantCommandParser().parse(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case CliSyntax.ENTITY_TEAM:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new ViewTeamCommandParser().parse(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/viewcommandparser/ViewMentorCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.viewcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewMentorCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class ViewMentorCommandParser implements Parser\u003cViewMentorCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ViewMentorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewMentorCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            id \u003d AlfredParserUtil.parseIndex(args, PrefixType.M);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException p) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(ViewMentorCommand.MESSAGE_INVALID_MENTOR_DISPLAYED_INDEX), p);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new ViewMentorCommand(id);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 33,
      "john0227": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/viewcommandparser/ViewParticipantCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.viewcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewParticipantCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class ViewParticipantCommandParser implements Parser\u003cViewParticipantCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ViewParticipantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    ViewParticipantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            id \u003d AlfredParserUtil.parseIndex(args, PrefixType.P);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException p) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(ViewParticipantCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    .MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX), p);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new ViewParticipantCommand(id);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 35,
      "john0227": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/viewcommandparser/ViewTeamCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.viewcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewTeamCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class ViewTeamCommandParser implements Parser\u003cViewTeamCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ViewTeamCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewTeamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            id \u003d AlfredParserUtil.parseIndex(args, PrefixType.T);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException p) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(ViewTeamCommand.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX, p);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new ViewTeamCommand(id);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 33,
      "john0227": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CommandRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.ui.EntityCard;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Represents a record of a previously executed command in ModelHistory."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class CommandRecord {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Represents the CommandType of a CommandRecord."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Indicates whether the CommandRecord represents a Command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * that can be undone (UNDO), redone (REDO), is the current"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * command (CURR), or is a sentinel for the endpoints (END)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * The user will not be able to undo/redo beyond the endpoints."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public enum CommandType { UNDO, CURR, REDO, END };"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private String commandString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public CommandRecord(Integer index, String commandString, CommandType commandType) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.commandString \u003d commandString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static CommandRecord getUndoEndPoint() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new CommandRecord(null,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                   \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003c\u003c Cannot Undo Beyond This Point \u003e\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                 CommandType.END);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static CommandRecord getRedoEndPoint() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new CommandRecord(null,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                   \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003c\u003c Cannot Redo Beyond This Point \u003e\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                 CommandType.END);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static CommandRecord getCurrentStatePoint() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new CommandRecord(null,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                   \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003c\u003c Current State \u003e\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                 CommandType.CURR);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String getCommandString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.commandString;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.commandType;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public Integer getIndex() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (!(other instanceof EntityCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        // state check(if two EntityCard are equal)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        CommandRecord commandRecord \u003d (CommandRecord) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return index.equals(commandRecord.getIndex())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u0026\u0026 commandString.equals(commandRecord.getCommandString())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u0026\u0026 commandType.equals(commandRecord.getCommandType());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 20,
      "Joanna-YJA": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelHistoryException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ReadOnlyEntityList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Initializes the model."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void initialize();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the user prefs\u0027 ParticipantList file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    Path getParticipantListFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the user prefs\u0027 TeamList file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    Path getTeamListFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the user prefs\u0027 MentorList file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    Path getMentorListFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Checks if there exists any {@code Entity} in this {@code Model}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "    boolean isEmpty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the ParticipantList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ReadOnlyEntityList getParticipantList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the TeamList."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ReadOnlyEntityList getTeamList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the MentorList."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ReadOnlyEntityList getMentorList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Get the filtered lists */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    FilteredList\u003cParticipant\u003e getFilteredParticipantList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    FilteredList\u003cTeam\u003e getFilteredTeamList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    FilteredList\u003cMentor\u003e getFilteredMentorList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void resetFilteredLists();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Below is the API exposed for the controllers to call */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Participant methods */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Participant getParticipant(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void addParticipant(Participant participant) throws AlfredException;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void updateParticipant(Id id, Participant participant) throws AlfredException;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Participant deleteParticipant(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Team methods */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Team getTeam(Id teamId) throws AlfredException;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Team getTeamByParticipantId(Id participantId) throws AlfredException;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Team getTeamByMentorId(Id mentorId) throws AlfredException;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void addTeam(Team team) throws AlfredException;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void addParticipantToTeam(Id teamId, Participant participant) throws AlfredException;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void addMentorToTeam(Id teamId, Mentor mentor) throws AlfredException;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void updateTeam(Id teamId, Team team) throws AlfredException;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void updateTeamScore(Team team, Score score) throws AlfredException;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void addTeamScore(Team team, Score score) throws AlfredException;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void subtractTeamScore(Team team, Score score) throws AlfredException;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Team deleteTeam(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Mentor methods */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Mentor getMentor(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void addMentor(Mentor mentor) throws AlfredException;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void updateMentor(Id id, Mentor mentor) throws AlfredException;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Mentor deleteMentor(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Find commands */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    List\u003cParticipant\u003e findParticipant(Predicate\u003cParticipant\u003e predicate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    List\u003cTeam\u003e findTeam(Predicate\u003cTeam\u003e predicate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    List\u003cMentor\u003e findMentor(Predicate\u003cMentor\u003e predicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* View command */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the predicate to show detailed information of {@code entity}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param entity {@code Entity} to view."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void viewEntity(Entity entity);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Updates the history of entity states with the current state (after execution of Command c)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void updateHistory(Command c);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Undoes the effects of the previous command and returns the model to the state"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * prior to the execution of the command."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void undo() throws AlfredModelHistoryException;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Redoes the effects of the previously executed command and returns the model to the state"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * after the execution of the command."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void redo() throws AlfredModelHistoryException;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Gets a String detailing the previously executed commands that can be undone by the user."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return String representing the previously executed commands that can be undone by the user."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    String getCommandHistoryString();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a List of Strings describing the commands that can be undone."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    List\u003cString\u003e getUndoCommandHistory();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a List of Strings describing the commands that can be redone."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    List\u003cString\u003e getRedoCommandHistory();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a List of CommandsRecords describing the commands that can be undone/redone"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws AlfredModelHistoryException"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    ArrayList\u003cCommandRecord\u003e getCommandHistory();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 37,
      "Abhiman2211": 6,
      "-": 61,
      "Joanna-YJA": 7,
      "hcwong": 79,
      "john0227": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelHistoryException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * API for ModelHistoryManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface ModelHistory {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void updateHistory(ParticipantList pList, int pListId,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                              MentorList mList, int mListId,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                              TeamList tList, int tListId, Command c) throws AlfredModelHistoryException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public boolean canUndo();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public boolean canRedo();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ModelHistoryRecord undo() throws AlfredModelHistoryException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ModelHistoryRecord redo() throws AlfredModelHistoryException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public String getCommandHistoryString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public List\u003cString\u003e getUndoCommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public List\u003cString\u003e getRedoCommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ArrayList\u003cCommandRecord\u003e getCommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelHistoryManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelHistoryException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.TrackableState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * ModelHistoryManager tracks the state of ModelManager across the execution of all commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class ModelHistoryManager implements ModelHistory {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final int capacity \u003d 50; //Length of command/state history that will be tracked/can be undone"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private LinkedList\u003cModelHistoryRecord\u003e history;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ModelHistoryRecord current; //points to the current state of Model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructor for ModelHistoryManager. Initialised with the starting state of the EntityLists"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * and their last used IDs when Alfred is first started."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param pList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param pListId"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param mList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param mListId"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param tList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param tListId"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws AlfredModelHistoryException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ModelHistoryManager(ParticipantList pList, int pListId,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                               MentorList mList, int mListId,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                               TeamList tList, int tListId) throws AlfredModelHistoryException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Index 0 will always represent the starting state of model. No further"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //undo-s are available beyond this point."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            ModelHistoryRecord initRecord \u003d new ModelHistoryRecord(pList, pListId,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                                   mList, mListId,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                                   tList, tListId,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                                   null); //Command is initialised to null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.current \u003d initRecord;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.history \u003d new LinkedList\u003cModelHistoryRecord\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.history.add(this.current);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new AlfredModelHistoryException(\"Problem encountered making deep copy of EntityLists\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Generates a new ModelHistoryRecord to record the current state of the EntityLists and their last"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * used IDs."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param pList ParticipantList (current state)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param pListId ParticipantList\u0027s Last Used Id"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param mList MentorList (current state)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param mListId MentorLists\u0027s Last Used Id"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param tList TeamList (current state)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param tListId TeamList\u0027s Last Used Id"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws AlfredModelHistoryException"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void updateHistory(ParticipantList pList, int pListId,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                              MentorList mList, int mListId,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                              TeamList tList, int tListId, Command c) throws AlfredModelHistoryException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            if (c instanceof TrackableState) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                ModelHistoryRecord newRecord \u003d new ModelHistoryRecord(pList, pListId,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                                      mList, mListId,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                                      tList, tListId,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                                      c);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                addToHistory(newRecord);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new AlfredModelHistoryException(\"Problem encountered making deep copy of EntityLists\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Adds a ModelHistoryRecord to command history. This method checks for capacity constraints of the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * ModelHistoryManager and is responsible for ensuring a valid sequence of commands in history for Undo/Redo."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param r"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private void addToHistory(ModelHistoryRecord r) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (this.history.size() \u003e\u003d ModelHistoryManager.capacity) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.history.remove(0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        int currentIndex \u003d this.history.indexOf(this.current);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (currentIndex !\u003d this.history.size() - 1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Current state has possible redos. Adding a new command to history invalidates the future redos."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.history \u003d new LinkedList\u003cModelHistoryRecord\u003e(this.history.subList(0, currentIndex + 1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.history.add(r);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.current \u003d r;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a boolean indicating whether the model can return to a previous backward state."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return boolean indicating whether an undo is possible."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (this.history.indexOf(this.current) \u003e 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Performs an undo operation and returns a ModelHistoryRecord that stores"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * the state of the EntityLists and last used IDs after a command is undone."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return ModelHistoryRecord with state after command is undone"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws AlfredModelHistoryException"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ModelHistoryRecord undo() throws AlfredModelHistoryException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (this.canUndo()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            int currentIndex \u003d this.history.indexOf(this.current); //Get prev state pointer index"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.current \u003d this.history.get(currentIndex - 1); //Update the current state pointer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return this.current;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new AlfredModelHistoryException(\"Unable to undo any further!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a List of CommandRecords representing undo-able and redo-able Command History."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return List of CommandRecords representing undo-able and redo-able Command History."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ArrayList\u003cCommandRecord\u003e getCommandHistory() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        ArrayList\u003cCommandRecord\u003e commandHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Obtain Redo-able Command History"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        commandHistory.add(CommandRecord.getRedoEndPoint());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        int currentIndex \u003d this.history.indexOf(this.current);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (int j \u003d this.history.size() - 1; j \u003e currentIndex; j--) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Command futureCommand \u003d this.history.get(j).getCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            commandHistory.add(new CommandRecord((j - currentIndex),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                 futureCommand.getClass().getSimpleName(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                 CommandRecord.CommandType.REDO));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Set Current Delimiter"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        commandHistory.add(CommandRecord.getCurrentStatePoint());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Obtain Undo-able Command History"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (int j \u003d this.history.indexOf(this.current); j \u003e\u003d 1; j--) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Command histCommand \u003d this.history.get(j).getCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            commandHistory.add(new CommandRecord(index,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                                 histCommand.getClass().getSimpleName(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                 CommandRecord.CommandType.UNDO));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        commandHistory.add(CommandRecord.getUndoEndPoint());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return commandHistory;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a String representing undo-able and redo-able Command History, separated by `\u003d` delimiter."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return String representing undo-able and redo-able Command History."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public String getCommandHistoryString() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        String commandHistory \u003d \"-------------\u003c\u003c Cannot Redo Beyond This Point \u003e\u003e-------------\\n\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Obtain Redo-able Command History"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        int currentIndex \u003d this.history.indexOf(this.current);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (int j \u003d this.history.size() - 1; j \u003e currentIndex; j--) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Command futureCommand \u003d this.history.get(j).getCommand();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            commandHistory +\u003d ((j - currentIndex) + \": \" + futureCommand.getClass().getSimpleName());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Delimiter"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        commandHistory +\u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003c\u003c Current State \u003e\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Obtain Undo-able Command History"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (int j \u003d this.history.indexOf(this.current); j \u003e\u003d 1; j--) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Command histCommand \u003d this.history.get(j).getCommand();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            commandHistory +\u003d (index + \": \" + histCommand.getClass().getSimpleName() + \"\\n\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        commandHistory +\u003d \"-------------\u003c\u003c Cannot Undo Beyond This Point \u003e\u003e-------------\\n\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return commandHistory;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public List\u003cString\u003e getUndoCommandHistory() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        List\u003cString\u003e undoHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (int j \u003d this.history.indexOf(this.current); j \u003e\u003d 1; j--) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Command histCommand \u003d this.history.get(j).getCommand();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            undoHistory.add(index + \": \" + histCommand.getClass().getSimpleName());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        undoHistory.add(\"-------------\u003c\u003c Cannot Undo Beyond This Point \u003e\u003e-------------\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return undoHistory;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public List\u003cString\u003e getRedoCommandHistory() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        List\u003cString\u003e redoHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        redoHistory.add(\"-------------\u003c\u003c Cannot Redo Beyond This Point \u003e\u003e-------------\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        int currentIndex \u003d this.history.indexOf(this.current);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (int j \u003d this.history.size() - 1; j \u003e currentIndex; j--) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Command futureCommand \u003d this.history.get(j).getCommand();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            redoHistory.add((j - currentIndex) + \": \" + futureCommand.getClass().getSimpleName());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return redoHistory;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a boolean indicating whether the model can go a previous forward state."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return boolean indicating whether an redo is possible."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (this.history.indexOf(this.current) \u003d\u003d this.history.size() - 1) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Performs a redo operation and returns a ModelHistoryRecord that stores"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * the state of the EntityLists and last used IDs after a command is redone."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return ModelHistoryRecord with state after command is redone"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws AlfredModelHistoryException"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ModelHistoryRecord redo() throws AlfredModelHistoryException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (this.canRedo()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            int currentIndex \u003d this.history.indexOf(this.current);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.current \u003d this.history.get(currentIndex + 1);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return this.current;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new AlfredModelHistoryException(\"Unable to redo any further!\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the length of the current history of states."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return Integer representing the length of the current history of states."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public int getLengthOfHistory() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.history.size();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 240,
      "Joanna-YJA": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelHistoryRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Represents a snapshot of all the EntityLists and their last used IDs at a point in time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class ModelHistoryRecord {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ParticipantList pList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private MentorList mList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private TeamList tList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private int pListId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private int mListId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private int tListId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Command c;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructor for ModelHistoryRecord. Important to note that a deep copy will be made of"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * each of the EntityLists passed in, so that the EntityLists stored in ModelHistoryRecord"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * will not be modified by subsequent commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param pList ParticipantList (current state)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param pListId Current lastUsedId of Participantlist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param mList MentorList (current state)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param mListId Current lastUsedId of MentorList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param tList TeamList (current state)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param tListId Current lastUsedId of TeamList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ModelHistoryRecord(ParticipantList pList, int pListId,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                              MentorList mList, int mListId,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                              TeamList tList, int tListId, Command c) throws AlfredException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.pList \u003d pList.copy();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.pListId \u003d pListId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mList \u003d mList.copy();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mListId \u003d mListId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.tList \u003d tList.copy();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.tListId \u003d tListId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.c \u003d c;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ParticipantList getParticipantList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.pList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public int getParticipantListLastUsedId() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.pListId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public MentorList getMentorList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.mList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public int getMentorListLastUsedId() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.mListId;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public TeamList getTeamList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.tList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public int getTeamListLastUsedId() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.tListId;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.c;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.Predicates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelHistoryException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.MissingEntityException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.ModelValidationException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ReadOnlyEntityList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.storage.AlfredStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // EntityLists"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected ParticipantList participantList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected TeamList teamList \u003d new TeamList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected MentorList mentorList \u003d new MentorList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    protected FilteredList\u003cParticipant\u003e filteredParticipantList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    protected FilteredList\u003cTeam\u003e filteredTeamList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    protected FilteredList\u003cMentor\u003e filteredMentorList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // TODO: Remove the null values which are a placeholder due to the multiple constructors."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Also will have to change the relevant attributes to final."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private AlfredStorage storage \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ModelHistory history \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private AddressBook addressBook \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private FilteredList\u003cPerson\u003e filteredPersons \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ModelManager(AlfredStorage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // TODO: Remove: Currently it is here to make tests pass."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Initializes the various lists used. If storage contains no data, empty lists are initialized."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // Try loading the 3 lists into memory."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cParticipantList\u003e storageParticipantList \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    this.storage.readParticipantList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (storageParticipantList.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.participantList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.participantList \u003d storageParticipantList.get();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                int largestIdUsed \u003d participantList.list().stream()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "                        .map(participant -\u003e participant.getId().getNumber())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                        .max(Integer::compare).orElse(0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ParticipantList.setLastUsedId(largestIdUsed);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.warning(\"Initialising new ParticipantList. \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           + \"Problem encountered reading ParticipantList from storage: \" + e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.participantList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cMentorList\u003e storageMentorList \u003d this.storage.readMentorList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (storageMentorList.isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.mentorList \u003d new MentorList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.mentorList \u003d storageMentorList.get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                int largestIdUsed \u003d mentorList.list().stream()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "                        .map(mentor -\u003e mentor.getId().getNumber())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                        .max(Integer::compare).orElse(0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "                MentorList.setLastUsedId(largestIdUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.warning(\"Initialising new MentorList. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           + \"Problem encountered reading MentorList from storage: \" + e.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.mentorList \u003d new MentorList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Optional\u003cTeamList\u003e storageTeamList \u003d this.storage.readTeamList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            if (storageTeamList.isEmpty()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                this.teamList \u003d new TeamList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                this.teamList \u003d storageTeamList.get();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                int largestIdUsed \u003d teamList.list().stream()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": "                        .map(team -\u003e team.getId().getNumber())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                        .max(Integer::compare).orElse(0);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": "                TeamList.setLastUsedId(largestIdUsed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.warning(\"Initialising new TeamList. \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           + \"Problem encountered reading TeamList from storage: \" + e.getMessage());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.teamList \u003d new TeamList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //The following try-catch block is necessary to ensure that the teamList loaded is valid"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //and the data has not been tampered with."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            for (Team t: this.teamList.getSpecificTypedList()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                validateNewTeamObject(t);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (ModelValidationException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.severe(\"Team List is not valid. New EntityLists will be initialised.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.participantList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.mentorList \u003d new MentorList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.teamList \u003d new TeamList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.history \u003d new ModelHistoryManager(this.participantList, ParticipantList.getLastUsedId(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                    this.mentorList, MentorList.getLastUsedId(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                    this.teamList, TeamList.getLastUsedId());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (AlfredModelHistoryException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.severe(\"Unable to initialise ModelHistoryManager.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.filteredParticipantList \u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                new FilteredList\u003c\u003e(this.participantList.getSpecificTypedList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.filteredMentorList \u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                new FilteredList\u003c\u003e(this.mentorList.getSpecificTypedList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.filteredTeamList \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                new FilteredList\u003c\u003e(this.teamList.getSpecificTypedList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // Optional TODO: reimplement this logic here."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        //    addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        //    if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        //        logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        //    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        //    initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        //    logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        //    initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        //    logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        //    initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public Path getParticipantListFilePath() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return userPrefs.getParticipantListFilePath();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public Path getTeamListFilePath() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return userPrefs.getTeamListFilePath();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public Path getMentorListFilePath() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return userPrefs.getMentorListFilePath();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EntityListMethods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Checks if there exists any {@code Entity} in this {@code ModelManager}."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.participantList.isEmpty() \u0026\u0026 this.mentorList.isEmpty() \u0026\u0026 this.teamList.isEmpty();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the participant list located in the Model Manager."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ReadableEntityList"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ReadOnlyEntityList getParticipantList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participantList;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the team list located in the Model Manager."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ReadableEntityList"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ReadOnlyEntityList getTeamList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teamList;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the mentor list located in the Model Manager."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ReadableEntityList"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ReadOnlyEntityList getMentorList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentorList;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public FilteredList\u003cParticipant\u003e getFilteredParticipantList() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.filteredParticipantList;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public FilteredList\u003cMentor\u003e getFilteredMentorList() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.filteredMentorList;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public FilteredList\u003cTeam\u003e getFilteredTeamList() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.filteredTeamList;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Resets the filtered lists to display all entities in the list."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void resetFilteredLists() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.filteredTeamList.setPredicate(team -\u003e true);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.filteredMentorList.setPredicate(mentor -\u003e true);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.filteredParticipantList.setPredicate(participant -\u003e true);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Entity Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Participant Methods */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the participant by id."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Participant Object"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException if the Participant cannot be found."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant getParticipant(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participantList.get(id);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the participant into the list."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participant"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void addParticipant(Participant participant) throws AlfredException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participantList.add(participant);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.P);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates the participant in the list, if any."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participant"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void updateParticipant(Id id, Participant participant) throws AlfredException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Team targetTeam;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            targetTeam \u003d this.getTeamByParticipantId(id);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (MissingEntityException e) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.participantList.update(id, participant);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.saveList(PrefixType.P);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participantList.update(id, participant);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        boolean isSuccessful \u003d targetTeam.updateParticipant(participant);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!isSuccessful) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            logger.warning(\"The participant is not in the team provided\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new ModelValidationException(\"Participant is not in the team provided\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.P);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.T);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes the participant by id."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Participant"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant deleteParticipant(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Team targetTeam;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            targetTeam \u003d this.getTeamByParticipantId(id);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (MissingEntityException e) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Participant participantToDelete \u003d this.participantList.delete(id);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.saveList(PrefixType.P);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return participantToDelete;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Participant participantToDelete \u003d this.participantList.delete(id);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        boolean isSuccessful \u003d targetTeam.deleteParticipant(participantToDelete);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!isSuccessful) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            logger.warning(\"Participant does not exist\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new ModelValidationException(\"Participant does not exist\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.P);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.T);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return participantToDelete;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Team Methods*/"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets team by id."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team getTeam(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teamList.get(id);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the team by participant id."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participantId"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Team"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws MissingEntityException if the team to get does not exist."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team getTeamByParticipantId(Id participantId) throws MissingEntityException {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cTeam\u003e teams \u003d this.teamList.getSpecificTypedList();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t: teams) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            for (Participant p: t.getParticipants()) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                if (p.getId().equals(participantId)) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    return t;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new MissingEntityException(\"Team with said participant cannot be found.\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the team by mentor id."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param mentorId"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Team"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws MissingEntityException if the team to get does not exist."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team getTeamByMentorId(Id mentorId) throws MissingEntityException {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cTeam\u003e teams \u003d this.teamList.getSpecificTypedList();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t: teams) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cMentor\u003e mentor \u003d t.getMentor();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (mentor.isPresent()) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                if (mentor.get().getId().equals(mentorId)) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    return t;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new MissingEntityException(\"Team with said mentor cannot be found.\");"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates the team with the given teamID."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param teamId"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedTeam"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException if the update fails"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void updateTeam(Id teamId, Team updatedTeam) throws AlfredException {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.validateNewTeamObject(updatedTeam);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.teamList.update(teamId, updatedTeam);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.T);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Updates the given team\u0027s score with the given score."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param team the team who\u0027s score is to be updated."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param score the score to which the team\u0027s score will be updated."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws AlfredException if the update fails."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void updateTeamScore(Team team, Score score) throws AlfredException {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        team.setScore(score);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        updateTeam(team.getId(), team);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Adds to the given team\u0027s score the given score."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param team the team who\u0027s score is to be added to."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param score the score by which the team\u0027s score will be increased."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws AlfredException if the update fails."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void addTeamScore(Team team, Score score) throws AlfredException {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int currentScore \u003d Integer.parseInt(team.getScore().toString());"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int scoreToAdd \u003d Integer.parseInt(score.toString());"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (currentScore \u003d\u003d Score.MAX_SCORE) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new IllegalValueException(Score.MAX_SCORE_MESSAGE);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (currentScore + scoreToAdd \u003e 100) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            team.setScore(new Score(100));"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            Score newScore \u003d new Score(currentScore + scoreToAdd);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            team.setScore(newScore);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        updateTeam(team.getId(), team);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Subtracts the given score from the given team\u0027s current score."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param team the team who\u0027s score is to be subtracted from."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param score the score which will be subtracted from the team\u0027s current score."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws AlfredException if the update fails."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void subtractTeamScore(Team team, Score score) throws AlfredException {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int currentScore \u003d Integer.parseInt(team.getScore().toString());"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int scoreToSub \u003d Integer.parseInt(score.toString());"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (currentScore \u003d\u003d Score.MIN_SCORE) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new IllegalValueException(Score.MIN_SCORE_MESSAGE);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (currentScore - scoreToSub \u003c 0) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            team.setScore(new Score(0));"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            Score newScore \u003d new Score(currentScore - scoreToSub);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            team.setScore(newScore);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        updateTeam(team.getId(), team);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the team."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param team"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void addTeam(Team team) throws AlfredException {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.validateNewTeamObject(team);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.teamList.add(team);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.T);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the participant to the given team."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param teamId"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participant"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException if the team does not exist."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void addParticipantToTeam(Id teamId, Participant participant) throws AlfredException {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!this.participantList.contains(participant.getId())) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new ModelValidationException(\"Participant does not exist in participantList\");"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Team targetTeam;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            targetTeam \u003d this.getTeam(teamId);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (MissingEntityException e) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        boolean isSuccessful \u003d targetTeam.addParticipant(participant);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!isSuccessful) {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            logger.severe(\"Participant is already present in team\");"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new AlfredModelException(\"Participant is already present in team\");"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.T);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the participant to the given team."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param teamId"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param mentor"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException if the team does not exist."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void addMentorToTeam(Id teamId, Mentor mentor) throws AlfredException {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!this.mentorList.contains(mentor.getId())) {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new ModelValidationException(\"Mentor does not exist in mentorList.\");"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Team targetTeam;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            targetTeam \u003d this.getTeam(teamId);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (MissingEntityException e) {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        boolean isSuccessful \u003d targetTeam.addMentor(mentor);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!isSuccessful) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            logger.severe(\"Team already has a mentor\");"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new AlfredModelException(\"Team already has a mentor\");"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.T);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes the team."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Team"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException if the deletion of team fails."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team deleteTeam(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // First delete the Participant objects"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Team teamToDelete \u003d this.teamList.delete(id);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p : teamToDelete.getParticipants()) {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.participantList.delete(p.getId());"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.T);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.P);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return teamToDelete;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Mentor Methods */"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the mentor by id."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Mentor"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor getMentor(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentorList.get(id);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds mentor into the list."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param mentor"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void addMentor(Mentor mentor) throws AlfredException {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentorList.add(mentor);"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.M);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates the mentor."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedMentor"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void updateMentor(Id id, Mentor updatedMentor) throws AlfredException {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Team targetTeam;"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            targetTeam \u003d this.getTeamByMentorId(id);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (MissingEntityException e) {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.mentorList.update(id, updatedMentor);"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.saveList(PrefixType.M);"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentorList.update(id, updatedMentor);"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        boolean isSuccessful \u003d targetTeam.updateMentor(updatedMentor);"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!isSuccessful) {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            logger.severe(\"Unable to update the mentor in team as it is not the \""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    + \"same id\");"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new ModelValidationException(\"Unable to update the mentor in team as it is not the \""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    + \"same id\");"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.M);"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.T);"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes the mentor."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Mentor that is deleted"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor deleteMentor(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Team targetTeam;"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            targetTeam \u003d this.getTeamByMentorId(id);"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (MissingEntityException e) {"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mentor mentorToDelete \u003d this.mentorList.delete(id);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.saveList(PrefixType.M);"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return mentorToDelete;"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Mentor mentorToDelete \u003d this.getMentor(id);"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        boolean isSuccessful \u003d targetTeam.deleteMentor(mentorToDelete);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!isSuccessful) {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            logger.severe(\"Unable to delete the mentor from the team\");"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new AlfredModelException(\"Update to delete the mentor from the team\");"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.M);"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.saveList(PrefixType.T);"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return mentorToDelete;"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Utils \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Helper function to save the lists."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param type"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private void saveList(PrefixType type) {"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            switch(type) {"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            case T:"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.storage.saveTeamList(this.teamList);"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            case M:"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.storage.saveMentorList(this.mentorList);"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            case P:"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.storage.saveParticipantList(this.participantList);"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            logger.severe(\"Failed to save the list into storage due to IOException\");"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Utils \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Validates the Participant and Mentor attributes of a CRUD team object."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param team"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws ModelValidationException"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private void validateNewTeamObject(Team team) throws ModelValidationException {"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // Check if the participants are valid, then if mentor is valid."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p: team.getParticipants()) {"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (!this.participantList.contains(p.getId())) {"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new ModelValidationException(\"Participant in team does not exist in ParticipantList\");"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Optional\u003cMentor\u003e mentor \u003d team.getMentor();"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!mentor.isEmpty()) {"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (!this.mentorList.contains(mentor.get().getId())) {"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new ModelValidationException(\"Mentor in team does not exist in mentorList\");"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Find methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * This method searches for all participants whose name matches the param."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return {@code List\u003cParticipant\u003e}"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003cParticipant\u003e findParticipant(Predicate\u003cParticipant\u003e predicate) {"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.filteredParticipantList.setPredicate(predicate);"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participantList.getSpecificTypedList().stream()"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .filter(predicate).collect(Collectors.toList());"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * This method searches for all teams whose name matches the param."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return {@code List\u003cTeam\u003e}"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003cTeam\u003e findTeam(Predicate\u003cTeam\u003e predicate) {"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.filteredTeamList.setPredicate(predicate);"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teamList.getSpecificTypedList().stream()"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .filter(predicate).collect(Collectors.toList());"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * This method searches for all mentors whose name matches the param."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return {@code List\u003cMentor\u003e}"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003cMentor\u003e findMentor(Predicate\u003cMentor\u003e predicate) {"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.filteredMentorList.setPredicate(predicate);"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentorList.getSpecificTypedList().stream()"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .filter(predicate).collect(Collectors.toList());"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the predicate to show detailed information of {@code entity}."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param entity {@code Entity} to view."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void viewEntity(Entity entity) {"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "john0227"
        },
        "content": "        PrefixType entityType \u003d entity.getPrefix();"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Predicate\u003cEntity\u003e predicate \u003d Predicates.viewSpecifiedEntity(entity);"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "john0227"
        },
        "content": "        switch (entityType) {"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case M:"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.filteredMentorList.setPredicate(predicate);"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case P:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.filteredParticipantList.setPredicate(predicate);"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "john0227"
        },
        "content": "        case T:"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.filteredTeamList.setPredicate(predicate);"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "john0227"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // should never reach here"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new RuntimeException();"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ModelHistory Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * This method will update the ModelHistoryManager object with the current state of the model."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * This method is expected to be called during the `execute()` method of each Command, right after"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * any transformations/mutations have been made to the data in Model."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void updateHistory(Command c) {"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.history.updateHistory(this.participantList, ParticipantList.getLastUsedId(),"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                    this.mentorList, MentorList.getLastUsedId(),"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                    this.teamList, TeamList.getLastUsedId(), c);"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (AlfredModelHistoryException e) {"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.warning(\"Problem encountered updating model state history.\");"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * This method will undo the effects of the previous command executed and return the state of"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * the ModelManager to the state where the previous command executed is undone."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws AlfredModelHistoryException"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void undo() throws AlfredModelHistoryException {"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (this.history.canUndo()) {"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            ModelHistoryRecord hr \u003d this.history.undo();"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            updateModelState(hr);"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new AlfredModelHistoryException(\"Unable to undo.\");"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * This method will return the ModelManager to the state where the previous command executed is redone."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws AlfredModelHistoryException"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void redo() throws AlfredModelHistoryException {"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (this.history.canRedo()) {"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            ModelHistoryRecord hr \u003d this.history.redo();"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            updateModelState(hr);"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new AlfredModelHistoryException(\"Unable to redo.\");"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Updates the current Model state (for each of the EntityLists and their lastUsedIDs) using a ModelHistoryRecord."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param hr ModelHistoryRecord containing the state of each of the EntityLists and their lastUsedIDs."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws AlfredModelHistoryException"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private void updateModelState(ModelHistoryRecord hr) throws AlfredModelHistoryException {"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Set Last Used IDs for each of the EntityLists"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList.setLastUsedId(hr.getParticipantListLastUsedId());"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        MentorList.setLastUsedId(hr.getMentorListLastUsedId());"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        TeamList.setLastUsedId(hr.getTeamListLastUsedId());"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Update each of the EntityLists to the state in the ModelHistoryRecord hr"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.participantList \u003d hr.getParticipantList().copy();"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.mentorList \u003d hr.getMentorList().copy();"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.teamList \u003d hr.getTeamList().copy();"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (AlfredModelException e) {"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new AlfredModelHistoryException(\"Unable to copy EntityLists from ModelHistoryRecord\");"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Update each of the filteredEntityLists"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filteredParticipantList \u003d"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                new FilteredList\u003c\u003e(this.participantList.getSpecificTypedList());"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filteredMentorList \u003d"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                new FilteredList\u003c\u003e(this.mentorList.getSpecificTypedList());"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filteredTeamList \u003d"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                new FilteredList\u003c\u003e(this.teamList.getSpecificTypedList());"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Gets a String detailing the previously executed commands that can be undone by the user."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public String getCommandHistoryString() {"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.history.getCommandHistoryString();"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a List of Strings describing the commands that can be undone."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public List\u003cString\u003e getUndoCommandHistory() {"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.history.getUndoCommandHistory();"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a List of Strings describing the commands that can be redone."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public List\u003cString\u003e getRedoCommandHistory() {"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.history.getRedoCommandHistory();"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a List of CommandRecords describing the commands that can be undone/redone"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ArrayList\u003cCommandRecord\u003e getCommandHistory() {"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.history.getCommandHistory();"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 146,
      "Abhiman2211": 58,
      "-": 102,
      "hcwong": 509,
      "john0227": 43,
      "Joanna-YJA": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path teamListFilePath \u003d Paths.get(\"data\" , \"teamlist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path participantListFilePath \u003d Paths.get(\"data\" , \"participantlist.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path issueListFilePath \u003d Paths.get(\"data\" , \"issuelist.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path mentorListFilePath \u003d Paths.get(\"data\" , \"mentorlist.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //TODO: Remove this method after integration"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getTeamListFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return teamListFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getParticipantListFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return participantListFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getMentorListFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mentorListFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getIssueListFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return issueListFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void setTeamListFilePath(Path teamListFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(teamListFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.teamListFilePath \u003d teamListFilePath;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void setParticipantListFilePath(Path participantListFilePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(participantListFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.participantListFilePath \u003d participantListFilePath;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void setMentorListFilePath(Path mentorListFilePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(mentorListFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mentorListFilePath \u003d mentorListFilePath;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void setIssueListFilePath(Path issueListFilePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(issueListFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.issueListFilePath \u003d issueListFilePath;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //TODO: Remove this method after integration"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 42,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/CommandType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a CommandType to indicate the CommandType of a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Guarantees: CommandType values are validated according to enum type, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    P, // Participant"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    M, // Mentor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    T, // Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    H; // History"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Constants"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"CommandType should be a string of either one of the following values:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"P: to indicate that a command is of type Participant\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"M: to indicate that a command is of type Mentor\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"T: to indicate that a command is of type Team\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"H: to indicate that a command is of type History\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid CommandType."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test String of type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid type format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static boolean isValidType(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            CommandType result \u003d CommandType.valueOf(test);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Guarantees: email address is present and not null,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * field values is  validated as declared in {@link #isValidEmail(String)}, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    //Constants"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Data field"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param email A valid email address that is present and not null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test email address."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid email format according to regex."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns true if both Email objects have the same data fields."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * This defines a stronger notion of equality between two Email object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param other Other Email object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return Email address in string format."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Email address in string format, for storage."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public String toStorageValue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a deep copy of the Email object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return a deep copy of the Email object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Email copy() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Email(this.value);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 20,
      "hcwong": 53,
      "Joanna-YJA": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Entity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a {@code Entity} in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Entity is the superclass of Participant, Mentor, Team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public abstract class Entity {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    protected final Id id; // Note: id is unique and should never be mutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an {@code Entity}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param id Identification number of Entity."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param name Name of Entity."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public Entity(Id id, Name name) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Id getId() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the bare details of the Entity in the HashMap format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return HashMap Maps String to a String, each key name is mapped to name of Entity,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * key id is mapped to id of Entity."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewMinimal() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        fields.put(\"name\", this.getName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        fields.put(\"id\", this.getId().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return fields;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the full details of the Entity, according to Entity type, in the HashMap format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return HashMap Maps String to a String, each key is mapped to a data field of the specific Entity type."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public abstract HashMap\u003cString, String\u003e viewDetailed();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the {@code PrefixType} of the {@code Entity}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public abstract PrefixType getPrefix();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 40,
      "Joanna-YJA": 16,
      "john0227": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Id.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a Identification number in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class Id {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    //Constants"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_INVALID_ID \u003d \"Given Id string is invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_INVALID_NUMBER \u003d \"Number should be of the format integer,\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"and adhere to the following constraints: \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"1. It should  number which can be any digit.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"The number must: \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"    -be at least one digit long\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"    -contain only digits from 0 to 9\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final String NUMBER_REGEX \u003d \"^[1-9]\\\\d*$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final String ID_REGEX \u003d \"^(?i)(M-|P-|T-)(?-i)[1-9]\\\\d*$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private PrefixType prefix;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final int number;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an {@code Id}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param prefix PrefixType to indicate type of entity."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param number Index number of entity."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Id(PrefixType prefix, int number) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        requireNonNull(number);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        checkArgument(isValidNumber(number), MESSAGE_CONSTRAINTS_INVALID_NUMBER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if number is a valid number."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param number Number."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean Whether number is in valid format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static boolean isValidNumber(int number) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return Integer.toString(number).matches(NUMBER_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Checks if given {@code strId} is a valid {@code String} to be passed onto {@link #toId(String)}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static boolean isValidString(String strId) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return strId.matches(ID_REGEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public PrefixType getPrefix() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int getNumber() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setPrefix(PrefixType prefix) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return Objects.hash(this.prefix, this.number);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns true if both Id objects have the same data fields(Prefix and number).."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * This defines a stronger notion of equality between two Id object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param other Other Id object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!(other instanceof Id)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Id otherId \u003d ((Id) other);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return otherId.getPrefix().equals(this.getPrefix())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherId.getNumber() \u003d\u003d this.getNumber();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Id in string format."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(getPrefix())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\"-\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getNumber());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a deep copy of the Id object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return a deep copy of the Id object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Id copy() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Id(this.prefix, this.number);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Converts given {@code strId} into an {@code Id}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws IllegalValueException If given {@code strId} does not match a valid {@code Id} format."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static Id toId(String strId) throws IllegalValueException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!strId.matches(ID_REGEX)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new IllegalValueException(MESSAGE_CONSTRAINTS_INVALID_ID);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Can use valueOf() because given strId already matches ID_REGEX"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "        PrefixType prefixType \u003d PrefixType.valueOf(strId.substring(0, 1).toUpperCase());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new Id(prefixType, Integer.parseInt(strId.substring(2)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 9,
      "hcwong": 49,
      "Joanna-YJA": 57,
      "john0227": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/IssueType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an Issue type(the type of issue raised by the user)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Issue type can be of the form Todo, Deadline, Event."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public enum IssueType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    DEADLINE(\"Deadline\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    EVENT(\"Event\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    TODO(\"Todo\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"IssueType must be one of the following: Todo, Deadline, Event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final String stringFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    IssueType(String stringFormat) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.stringFormat \u003d stringFormat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.stringFormat;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid issueType."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param issueType String of issueType."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether issueType is an instance of IssueType."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static boolean isValidIssueType(String issueType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            IssueType validIssueType \u003d IssueType.valueOf(issueType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 10,
      "hcwong": 13,
      "Joanna-YJA": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Location.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a seating location of an Entity in the address book. Guarantees:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * details are present and not null, field values is validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Constants"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_INVALID_TABLE_NUMBER \u003d \"Table number should be an integer \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"1. The tableNumber can be any number from 0 to 1000\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String TABLE_NUMBER_REGEX \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final int tableNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs a {@code Location}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param tableNumber Table that team is seated on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Location(int tableNumber) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        requireNonNull(tableNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        checkArgument(isValidLocation(tableNumber), MESSAGE_CONSTRAINTS_INVALID_TABLE_NUMBER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.tableNumber \u003d tableNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given number is a valid seating location."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param tableNumber Seating number of Entity."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean indicating whether the table number is valid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static boolean isValidLocation(int tableNumber) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (tableNumber \u003c 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (tableNumber \u003e 1000) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return Integer.toString(tableNumber).matches(TABLE_NUMBER_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int getTableNumber() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return tableNumber;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return Objects.hash(this.tableNumber);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns true if both Location objects have the same data fields. This defines"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * a stronger notion of equality between two Location object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param other Other Location object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Location otherLocation \u003d ((Location) other);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return otherLocation \u003d\u003d this | otherLocation.getTableNumber() \u003d\u003d this.getTableNumber();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Location in string format."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        builder.append(\" Table Number: \").append(getTableNumber());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Location in string format."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public int toStorageValue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.tableNumber;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a deep copy of the Location object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return a deep copy of the Location object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Location copy() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Location(this.tableNumber);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 8,
      "hcwong": 30,
      "Joanna-YJA": 61,
      "john0227": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Mentor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a {@code Mentor} in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Mentor extends Entity {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Name organization;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private SubjectName subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Mentor.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an {@code Mentor}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param name         Name of {@code Mentor}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param id           Idenfication number of (@code Mentor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param phone        Phone number."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param email        Email address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param organization Namme of organization."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Name name,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Id id,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Phone phone,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Email email,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Name organization,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            SubjectName subject"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(id, name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Name getOrganization() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return organization;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public SubjectName getSubject() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setOrganization(Name organization) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setSubject(SubjectName subject) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewMinimal() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", getId().toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"phone\", getPhone().toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"email\", getEmail().toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the full details of the Mentor, in the HashMap format."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return HashMap Maps String to a String, each key is mapped to a specific data field."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewDetailed() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", getId().toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"phone\", getPhone().toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"email\", getEmail().toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"organization\", getOrganization().toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"subject\", getSubject().toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Mentor in string format."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", ID: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", Phone: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", Email: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", Organization: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getOrganization())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", Subject: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getSubject());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns true if both Mentor objects have the same data fields."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * This defines a stronger notion of equality between two Mentor object."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param other Other Mentor object."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!(other instanceof Mentor)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Mentor otherMentor \u003d ((Mentor) other);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return otherMentor.getName().equals(this.getName())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getId().equals(this.getId())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getOrganization().equals(this.getOrganization())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getSubject().equals(this.getSubject());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * This checks for a looser definition of equality for mentors."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param otherMentor"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean isSameMentor(Mentor otherMentor) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (otherMentor \u003d\u003d this) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.name.equals(otherMentor.getName())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 (this.phone.equals(otherMentor.getPhone())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                || this.email.equals(otherMentor.getEmail()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a deep copy of the Mentor object"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return Deep copy of the Mentor object"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Mentor copy() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Mentor copy \u003d new Mentor(this.name.copy(),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                 this.id.copy(),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                 this.phone.copy(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                 this.email.copy(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                 this.organization.copy(),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                 this.subject);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public PrefixType getPrefix() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return PrefixType.M;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 13,
      "hcwong": 140,
      "Joanna-YJA": 35,
      "john0227": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an Entity\u0027s name in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Guarantees: details is present and not null,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * field values is  validated as declared in {@link #isValidName(String)}, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    //Constants"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \",-.\u0027\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"Names should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"1. The first character is an alphabet.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"2. It should contain alphabets, spaces, and these special characters, excluding \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"the parentheses (\" + SPECIAL_CHARACTERS + \"). \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"3.Contain at least one character\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\" + SPECIAL_CHARACTERS + \" ]*\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    //Constants"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Name.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (isValidName(name) \u003d\u003d false) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            logger.severe(\"Name is not valid:\" + name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test Name."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid name format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Name in string format."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Name in string format."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns true if both Name objects have the same data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * This defines a stronger notion of equality between two Name object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param other Other Name object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a deep copy of the Name object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return a deep copy of the Name object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Name copy() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Name(this.fullName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 8,
      "hcwong": 45,
      "Joanna-YJA": 46,
      "john0227": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Participant.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a {@code Participant} in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Participant extends Entity {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an {@code Pariticipant}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param name Name of Entity."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param id Identification number of Entity."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param email Email address of Participant."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param phone Phone number of Participant."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant(Name name, Id id, Email email, Phone phone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(id, name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewMinimal() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"phone\", getPhone().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the full details of the Participant, in the HashMap format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return HashMap Maps String to a String, each key is mapped to a data field."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewDetailed() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        result.put(\"id\", getId().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"phone\", getPhone().toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"email\", getEmail().toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return Objects.hash(id, name, email, phone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns true if both Participant objects have the same data fields."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * This defines a stronger notion of equality between two Participant object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param other Other Participant object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!(other instanceof Participant)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Participant otherParticipant \u003d ((Participant) other);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return otherParticipant.getName().equals(this.getName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                \u0026\u0026 otherParticipant.getId().equals(this.getId())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                \u0026\u0026 otherParticipant.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                \u0026\u0026 otherParticipant.getEmail().equals(this.getEmail());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Participant in string format."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", ID: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", Phone: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", Email: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getEmail());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * This implements a looser definition of equality for Participants."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param otherParticipant"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean isSameParticipant(Participant otherParticipant) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (otherParticipant \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.name.equals(otherParticipant.getName())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 (this.phone.equals(otherParticipant.getPhone())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    || this.email.equals(otherParticipant.getEmail()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a deep copy of the Participant object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return Deep copy of the Participant object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Participant copy() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Participant copy \u003d new Participant(this.name.copy(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                           this.id.copy(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                           this.email.copy(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                           this.phone.copy());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public PrefixType getPrefix() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return PrefixType.P;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 16,
      "hcwong": 100,
      "Joanna-YJA": 27,
      "john0227": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a Entity\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Only applies to Team, Participant and Mentor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Guarantees: email address is present and not null,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * field values is  validated as declared in {@link #isValidPhone(String)}, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Constants"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"-. \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String DIGITS \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"Phone numbers be of the format (optional)country-code + phone-number \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"and should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"1. The country code, if it is not existent in constructor, \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    + \"the country code \u0027+65\u0027 will be added.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"2. The phone number should be at least three digit long.\\n \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"The phone number must:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"    -contain numbers\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"    -contain these special characters only, excluding parentheses,\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"(\" + SPECIAL_CHARACTERS + \").\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COUNTRY_CODE_REGEX \u003d \"(\\\\+\" + DIGITS + \")?\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String PHONE_NUMBER_PART_REGEX \u003d \"[\" + SPECIAL_CHARACTERS + \"]\" + \"?\" + DIGITS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String PHONE_NUMBER_REGEX \u003d \"(\" + PHONE_NUMBER_PART_REGEX + \")\" + \"*\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d COUNTRY_CODE_REGEX + PHONE_NUMBER_REGEX;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param phone A valid phone number, which is present and not null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (!(phone.charAt(0) \u003d\u003d \u0027+\u0027)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            String newPhone \u003d \"+65 \" + phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            checkArgument(isValidPhone(newPhone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            value \u003d newPhone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            value \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid phone number."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test Phone number."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid phone number format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Email address in string format."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Email address in string format."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns true if both Phone objects have the same data fields."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * This defines a stronger notion of equality between two Phone object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param other Other Phone object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a deep copy of the Phone object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return a deep copy of the Phone object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Phone copy() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Phone(this.value);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 8,
      "hcwong": 48,
      "Joanna-YJA": 49,
      "john0227": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/PrefixType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a Prefix type to indicate the type of Entity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Guarantees: Prefix type values are validated according to enum type, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public enum PrefixType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    P, // Participant"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    M, // Mentor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    T, // Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    I; // Issue"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Constants"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"Prefix type should be a string of either one of the following values:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            + \"P: to indicate Entity is a Participant\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            + \"M: to indicate Entity is a Mentor\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            + \"I: to indicate Entity is an Issue\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            + \"T: to indicate Entity is  a Team\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Email address in string format, for storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.name();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid PrefixType."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test String of prefix."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid prefix format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static boolean isValidPrefixType(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            PrefixType result \u003d PrefixType.valueOf(test);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 5,
      "hcwong": 7,
      "Joanna-YJA": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Score.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a Score attribute of {@code Team} and {@code Leaderboard}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " *  * Guarantees: details are present and not null,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " *  * field values is  validated as declared in {@link #isValidScore(int)}, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Score {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Score should contain only positive integers from 0 to 100\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final int MAX_SCORE \u003d 100;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final int MIN_SCORE \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MAX_SCORE_MESSAGE \u003d \"The given team\u0027s score is already \" + MAX_SCORE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \" which is the maximum allowed.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MIN_SCORE_MESSAGE \u003d \"The given team\u0027s score is already \" + MIN_SCORE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \" which is the minimum allowed.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private int score;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs a {@code Score}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param score A valid score of a team."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Score(int score) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        requireNonNull(score);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        checkArgument(isValidScore(score), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int getScore() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid score."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param score Score."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether score is in valid score format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static boolean isValidScore(int score) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return score \u003e\u003d 0 \u0026\u0026 score \u003c\u003d 100;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Score in string format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return Integer.toString(this.score);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Score in string format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public int toStorageValue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.score;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return Objects.hash(this.score);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Score otherScore \u003d ((Score) other);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return otherScore \u003d\u003d this | otherScore.getScore() \u003d\u003d this.getScore();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a deep copy of the Score object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return a deep copy of the Score object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Score copy() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Score(this.score);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 9,
      "Abhiman2211": 8,
      "hcwong": 36,
      "Joanna-YJA": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/SubjectName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Encapsulates possible topics for a Hackathon project."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public enum SubjectName {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    ENVIRONMENTAL(\"Environmental\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    SOCIAL(\"Social\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    HEALTH(\"Health\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    EDUCATION(\"Education\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"SubjectName should be one of the following:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"\\t1. Environmental\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"\\t2. Social\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"\\t3. Health\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "            + \"\\t4. Education\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"^(?i)(Environmental|Social|Health|Education)(?-i)$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final String subjectNameString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private SubjectName(String subjectNameString) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        requireNonNull(subjectNameString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subjectNameString \u003d subjectNameString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test Name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid name format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static boolean isValidSubjectName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.subjectNameString;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.name();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 5,
      "hcwong": 9,
      "Joanna-YJA": 26,
      "john0227": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Team.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Team is the main entity of this system."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Team extends Entity {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    //dummy logger, to be deleted"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Team.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private List\u003cParticipant\u003e participants;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Optional\u003cMentor\u003e mentor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private SubjectName subject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Score score;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Name projectName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor with mentor."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *  @param teamId"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param teamName"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participants"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param subject"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param score"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param projectName"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param location"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Id teamId,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Name teamName,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            List\u003cParticipant\u003e participants,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cMentor\u003e mentor,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            SubjectName subject,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Score score,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Name projectName,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Location location"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(teamId, teamName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participants \u003d participants;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Getters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003cParticipant\u003e getParticipants() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participants;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Optional\u003cMentor\u003e getMentor() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public SubjectName getSubject() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.subject;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Score getScore() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.score;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Name getProjectName() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.projectName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.location;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Setters"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setParticipants(List\u003cParticipant\u003e participants) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participants \u003d participants;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setMentor(Optional\u003cMentor\u003e mentor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setSubject(SubjectName subject) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setScore(Score score) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setProjectName(Name projectName) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setLocation(Location location) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewMinimal() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Stream\u003cString\u003e participantStream \u003d participants.stream()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .map(participant -\u003e participant.toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        String participantsString \u003d Arrays.toString(participantStream.toArray());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", getId().toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"participants\", participantsString);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates the participant in the team."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedParticipant"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean updateParticipant(Participant updatedParticipant) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cParticipant\u003e list \u003d this.getParticipants();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        boolean isParticipantInTeam \u003d false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (list.get(i).getId().equals(updatedParticipant.getId())) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                list.set(i, updatedParticipant);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                isParticipantInTeam \u003d true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return isParticipantInTeam;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds a participant into the team."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participant"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean addParticipant(Participant participant) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cParticipant\u003e list \u003d this.getParticipants();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (list.contains(participant)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        list.add(participant);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.setParticipants(list);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes the participant from the team if it exists."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participant"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean deleteParticipant(Participant participant) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!this.participants.contains(participant)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participants.remove(participant);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates the mentor in the team if it exists."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedMentor"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean updateMentor(Mentor updatedMentor) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (this.mentor.isEmpty()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!this.mentor.get().getId().equals(updatedMentor.getId())) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentor \u003d Optional.of(updatedMentor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds a mentor to the team."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param mentor"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean addMentor(Mentor mentor) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Optional\u003cMentor\u003e mentorOptional \u003d this.getMentor();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!mentorOptional.isEmpty()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.setMentor(Optional.of(mentor));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes the mentor if it exists."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param mentor"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean deleteMentor(Mentor mentor) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (this.mentor.isEmpty()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!this.mentor.get().getId().equals(mentor.getId())) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentor \u003d Optional.empty();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewDetailed() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Stream\u003cString\u003e participantStream \u003d participants.stream()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .map(participant -\u003e participant.toString());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        String participantsString \u003d Arrays.toString(participantStream.toArray());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Mentor mentor \u003d getMentor().orElse(null);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", getId().toString());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"participants\", participantsString);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"subject\", getSubject().toString());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"location\", getLocation().toString());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"mentor\", mentor.toString());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"score\", score.toString());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"projectName\", projectName.toString());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"participants\", participantsString);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return Objects.hash(id, name, participants, mentor, subject, score,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "john0227"
        },
        "content": "                projectName, location);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!(other instanceof Team)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Team otherTeam \u003d ((Team) other);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return otherTeam.getName().equals(this.getName())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherTeam.getId().equals(this.getId())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherTeam.getParticipants().equals(this.getParticipants())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherTeam.getSubject().equals(this.getSubject())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherTeam.getLocation().equals(this.getLocation())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherTeam.getMentor().equals(this.getMentor())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherTeam.getScore().equals(this.getScore())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \u0026\u0026 otherTeam.getProjectName().equals(this.getProjectName());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Stream\u003cString\u003e participantStream \u003d participants.stream()"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .map(participant -\u003e participant.toString());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        String participantsString \u003d Arrays.toString(participantStream.toArray());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", ID: \")"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", Subject: \")"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getSubject())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", Location: \")"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", Mentor: \")"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getMentor().orElse(null))"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", Score: \")"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getScore())"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", Project Name: \")"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getProjectName())"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\", Participants: \")"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(participantsString);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * This offers a looser definition of equality for Team."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param otherTeam"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean isSameTeam(Team otherTeam) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (otherTeam \u003d\u003d this) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (this.name.equals(otherTeam.getName())) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            logger.severe(\"same name \" + this.name + \" and \" + otherTeam.getName());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (this.projectName.equals(otherTeam.getProjectName())) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            logger.severe(\"same pn\" + this.projectName + \" and \" + otherTeam.getProjectName());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (this.id.equals(otherTeam.getId())) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            logger.severe(\"same id:\" + this.id + \" and \" + otherTeam.getId());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        /*return this.name.equals(otherTeam.getName())"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                || this.projectName.equals(otherTeam.getProjectName())"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                || this.id.equals(otherTeam.getId());"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns a deep copy of the Team object"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return Deep copy of the Team object"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Team copy() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        List\u003cParticipant\u003e pListCopy \u003d new ArrayList\u003cParticipant\u003e();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (Participant p: this.participants) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            pListCopy.add(p.copy());"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cMentor\u003e copiedMentor \u003d null;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (this.mentor.isEmpty()) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            copiedMentor \u003d Optional.empty();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            copiedMentor \u003d Optional.of(this.mentor.get().copy());"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team copy \u003d new Team("
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.id.copy(),"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                this.name.copy(),"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                pListCopy,"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                copiedMentor,"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                this.subject,"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                this.score.copy(),"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                this.projectName.copy(),"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "john0227"
        },
        "content": "                this.location.copy()"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public PrefixType getPrefix() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return PrefixType.T;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 27,
      "hcwong": 299,
      "Joanna-YJA": 31,
      "john0227": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/EntityList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * This interface serves as the new API for the model."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Each child of {@code EntityList} should behave as a singleton."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public abstract class EntityList implements ReadOnlyEntityList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public abstract boolean contains(Id id);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public abstract boolean contains(Entity entity);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public abstract ObservableList\u003c? extends Entity\u003e list();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public abstract ObservableList\u003c? extends Entity\u003e getUnmodifiableList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 16,
      "john0227": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/IssueList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "// package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "// import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "// import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "// import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "// import seedu.address.commons.exceptions.AlfredRuntimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "// import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "// import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "// import seedu.address.model.entity.Issue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "// import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "// public class IssueList extends EntityList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     private List\u003cIssue\u003e issues;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     private int lastUsedId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * Constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     public IssueList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         this.issues \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         this.lastUsedId \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * Gets Issue by ID."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @param id"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @return Issue"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @throws AlfredException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     public Issue get(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         for (Issue i: this.issues) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "//             if (i.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "//                 return i;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "//             }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         throw new AlfredRuntimeException(\"Issue to get cannot be found.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * Updates Issue by ID."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @param id"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @param updatedIssue"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @return boolean;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     public boolean update(Id id, Issue updatedIssue) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         for (int i \u003d 0; i \u003c this.issues.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "//             if (this.issues.get(i).getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "//                 this.issues.set(i, updatedIssue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "//                 return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "//             }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * Adds the issue into the list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @param issue"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @throws AlfredException"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     public void add(Issue issue) throws AlfredException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         for (Issue i: this.issues) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "//             if (i.getId() \u003d\u003d issue.getId()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "//                 throw new AlfredRuntimeException(\"Issue to add cannot be found.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "//             }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         this.issues.add(issue);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * Deletes team by id."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @param id"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @throws AlfredException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     public Issue delete(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         for (Issue i: this.issues) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "//             if (i.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "//                 this.issues.remove(i);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "//                 return i;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "//             }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         throw new AlfredRuntimeException(\"Issue to delete cannot be found.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * Returns a list but with element type Issue."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @return List\u003cIssue\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     public List\u003cIssue\u003e getSpecificTypedList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         return this.issues;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * List the issues."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @return List\u003cIssue\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     public List\u003c? extends Entity\u003e list() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         return this.issues;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * Checks if a given ID exists."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @param id"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @return boolean"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     public boolean contains(Id id) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         for (Issue i: this.issues) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "//             if (i.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "//                 return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "//             }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * Generates the ID for the object."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      * @return ID"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "//      */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     public Id generateID() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         this.lastUsedId++;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "//         return new Id(PrefixType.I, this.lastUsedId);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "// }"
      }
    ],
    "authorContributionMap": {
      "john0227": 121,
      "hcwong": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/MentorList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.MissingEntityException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.ModelValidationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " * This interface serves as the new API for the model."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": " * {@code MentorList} should behave as a singleton."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class MentorList extends EntityList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String SIMILAR_MENTOR_MSG \u003d \"A similar Mentor already exists.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static int lastUsedId \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final ObservableList\u003cMentor\u003e mentors \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final ObservableList\u003cMentor\u003e unmodifiableMentors \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            FXCollections.unmodifiableObservableList(mentors);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets Mentor by ID."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Mentor"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor get(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Mentor m : this.mentors) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (m.getId().equals(id)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return m;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredModelException(\"Mentor to get does not exist\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the size of ObservableList of Mentors."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Used to set the lastUsedId during the intialization of model in ModelManager#intialize."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * During the intialization, MentorList is set the the MentorList gotten from storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return size Number of Mentors in MentorList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.mentors.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates Mentor by ID."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedMentor"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws ModelValidationException if a similar mentor already exists"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws MissingEntityException   if the id passed does not match"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void update(Id id, Mentor updatedMentor)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throws MissingEntityException, ModelValidationException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // First check if the updated mentor already exists"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Mentor m : this.mentors) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (m.isSameMentor(updatedMentor) \u0026\u0026 !m.getId().equals(updatedMentor.getId())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new ModelValidationException(SIMILAR_MENTOR_MSG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (int i \u003d 0; i \u003c this.mentors.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (this.mentors.get(i).getId().equals(id)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.mentors.set(i, updatedMentor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new MissingEntityException(\"Mentor to update does not exist.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the mentor into the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param mentor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws AlfredModelException"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void add(Mentor mentor) throws AlfredModelException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Mentor m : this.mentors) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (m.isSameMentor(mentor) || m.getId().equals(mentor.getId())) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new AlfredModelException(\"Item to add already exists!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentors.add(mentor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (mentor.getId().getNumber() \u003e lastUsedId) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "            lastUsedId \u003d mentor.getId().getNumber();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes Mentor by id."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor delete(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Mentor m : this.mentors) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (m.getId().equals(id)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.mentors.remove(m);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return m;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredModelException(\"Mentor to delete does not exist.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns a list but with element type Mentor."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return List of Mentors."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ObservableList\u003cMentor\u003e getSpecificTypedList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.unmodifiableMentors;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * List the mentors."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return List of Mentors."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ObservableList\u003c? extends Entity\u003e list() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentors;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Get the unmodifiable list of mentors."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Observable List of Mentors"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ObservableList\u003c? extends Entity\u003e getUnmodifiableList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.unmodifiableMentors;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Checks if a given ID exists."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean contains(Id id) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Mentor m : this.mentors) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (m.getId().equals(id)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Checks if given {@code Entity} exists."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean contains(Entity entity) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!(entity instanceof Mentor)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor mentor \u003d (Mentor) entity;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (Mentor m : this.mentors) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (m.isSameMentor(mentor) || m.getId().equals(mentor.getId())) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Checks if this {@code MentorList} is empty."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.mentors.isEmpty();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Generates the ID for the object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ID"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static Id generateId() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        lastUsedId++;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new Id(PrefixType.M, lastUsedId);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Gets the lastUsedId class attribute."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return lastUsedId"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static int getLastUsedId() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return lastUsedId;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Sets the lastUsedId class attribute."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param number"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static void setLastUsedId(int number) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        lastUsedId \u003d number;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Provides a deep copy of the MentorList"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return Deep copy of MentorList"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public MentorList copy() throws AlfredModelException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        MentorList newMList \u003d new MentorList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (Mentor m: this.mentors) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            newMList.add(m.copy());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return newMList;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public PrefixType getPrefix() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return PrefixType.M;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!(other instanceof MentorList)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "john0227"
        },
        "content": "        MentorList mentorList \u003d (MentorList) other;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Anyone feel free to optimize"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.getSpecificTypedList().stream().allMatch(mentorList::contains)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \u0026\u0026 mentorList.getSpecificTypedList().stream().allMatch(this::contains);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 22,
      "hcwong": 153,
      "john0227": 55,
      "Joanna-YJA": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/ParticipantList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.MissingEntityException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.ModelValidationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * This interface serves as the new API for the model."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " * {@code ParticipantList} should behave as a singleton."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class ParticipantList extends EntityList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String SIMILAR_PARTICIPANT_MSG \u003d \"A similar Participant already exists.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static int lastUsedId \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private ObservableList\u003cParticipant\u003e participants \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private ObservableList\u003cParticipant\u003e unmodifiableParticipants \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            FXCollections.unmodifiableObservableList(participants);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets participant by id."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Participant"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws MissingEntityException if the participant to get does not exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant get(Id id) throws MissingEntityException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p : this.participants) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.getId().equals(id)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new MissingEntityException(\"Participant to get does not exist\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the size of ObservableList of Participants."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Used to set the lastUsedId during the intialization of model in ModelManager#intialize."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * During the intialization, ParticipantList is set the the ParticipantList gotten from storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return size Number of Participants in ParticipantList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.participants.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates participant by id."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedParticipant"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws MissingEntityException   if the participant to update does not exist."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws ModelValidationException if a similar participant already exists."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void update(Id id, Participant updatedParticipant)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throws MissingEntityException, ModelValidationException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // First check if the participant already exists"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p : this.participants) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.isSameParticipant(updatedParticipant)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    \u0026\u0026 !p.getId().equals(updatedParticipant.getId())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new ModelValidationException(SIMILAR_PARTICIPANT_MSG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (int i \u003d 0; i \u003c this.participants.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (this.participants.get(i).getId().equals(id)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.participants.set(i, updatedParticipant);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // Participant to update does not exist"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new MissingEntityException(\"Participant to update does not exist.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds participant to the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participant"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws AlfredModelException if there was an error while adding."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add(Participant participant) throws AlfredModelException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p : this.participants) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.isSameParticipant(participant) || p.getId().equals(participant.getId())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new AlfredModelException(\"Participant already exists in list\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participants.add(participant);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (participant.getId().getNumber() \u003e lastUsedId) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "            lastUsedId \u003d participant.getId().getNumber();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes participant by ID."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws MissingEntityException if entity to delete does not exist."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant delete(Id id) throws MissingEntityException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p : this.participants) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.getId().equals(id)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.participants.remove(p);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new MissingEntityException(\"Participant to delete does not exist\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the list but with element type Participant."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return {@code ObservableList\u003cParticipant\u003e}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ObservableList\u003cParticipant\u003e getSpecificTypedList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participants;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * List the participants."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return {@code ObservableList\u003c? extends Entity\u003e}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ObservableList\u003c? extends Entity\u003e list() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.unmodifiableParticipants;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Lists the unmodifiable Participants."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return {@code ObservableList\u003c? extends Entity\u003e}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ObservableList\u003c? extends Entity\u003e getUnmodifiableList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.unmodifiableParticipants;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Checks if a given ID exists."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean contains(Id id) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p : this.participants) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.getId().equals(id)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Checks if given {@code Entity} exists."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean contains(Entity entity) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!(entity instanceof Participant)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant participant \u003d (Participant) entity;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (Participant p : this.participants) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (p.isSameParticipant(participant) || p.getId().equals(participant.getId())) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Checks if this {@code ParticipantList} is empty."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.participants.isEmpty();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Generates the ID for the object."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ID"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static Id generateId() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        lastUsedId++;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new Id(PrefixType.P, lastUsedId);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Gets the lastUsedId class attribute."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return lastUsedId"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static int getLastUsedId() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return lastUsedId;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Sets the lastUsedId class attribute."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param number"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static void setLastUsedId(int number) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        lastUsedId \u003d number;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Provides a deep copy of the ParticipantList"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return Deep copy of ParticipantList"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ParticipantList copy() throws AlfredModelException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList newPList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (Participant p: this.participants) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            newPList.add(p.copy());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return newPList;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public PrefixType getPrefix() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return PrefixType.P;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!(other instanceof ParticipantList)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ParticipantList participantList \u003d (ParticipantList) other;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.getSpecificTypedList().stream().allMatch(participantList::contains)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \u0026\u0026 participantList.getSpecificTypedList().stream().allMatch(this::contains);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 21,
      "hcwong": 156,
      "john0227": 53,
      "Joanna-YJA": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/ReadOnlyEntityList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Aims to make each EntityList readable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public interface ReadOnlyEntityList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Checks if a given entity list contains a certain entity."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    boolean contains(Id id);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Checks if this EntityList is empty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    boolean isEmpty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the {@code PrefixType} of this list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    PrefixType getPrefix();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * List the entities."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return List\u003c? extends Entity\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ObservableList\u003c? extends Entity\u003e list();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 22,
      "john0227": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/TeamList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.MissingEntityException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.ModelValidationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": " * This interface serves as the new API for the model."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": " * {@code TeamList} should behave as a singleton."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class TeamList extends EntityList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String SIMILAR_TEAM_MSG \u003d \"A similar Team already exists.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static int lastUsedId \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TeamList.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final ObservableList\u003cTeam\u003e teams \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final ObservableList\u003cTeam\u003e unmodifiableTeams \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            FXCollections.unmodifiableObservableList(teams);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets team by their ID."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Team"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws MissingEntityException if the team to get does not exist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team get(Id id) throws MissingEntityException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t : this.teams) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (t.getId().equals(id)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new MissingEntityException(\"Team to get does not exist!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the size of ObservableList of Teams."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Used to set the lastUsedId during the intialization of model in ModelManager#intialize."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * During the intialization, TeamList is set the the TeamList gotten from storage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return size Number of Teams in TeamList"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.teams.size();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates team by ID."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedTeam"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws MissingEntityException   if the team to update does not exist."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws ModelValidationException if a similar participant already exists."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void update(Id id, Team updatedTeam)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throws MissingEntityException, ModelValidationException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // First check if the updated team already exists"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t : this.teams) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (t.isSameTeam(updatedTeam) \u0026\u0026 !t.getId().equals(updatedTeam.getId())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new ModelValidationException(SIMILAR_TEAM_MSG);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (int i \u003d 0; i \u003c this.teams.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (this.teams.get(i).getId().equals(id)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.teams.set(i, updatedTeam);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new MissingEntityException(\"Team to update does not exist\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the team into the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param team"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws AlfredModelException"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add(Team team) throws AlfredModelException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t : this.teams) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            if (t.isSameTeam(team)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                logger.severe(\"The same team already exist in TeamList of Model.\" + this.teams);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new AlfredModelException(\"Team to add already exists.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.teams.add(team);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (team.getId().getNumber() \u003e lastUsedId) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "            lastUsedId \u003d team.getId().getNumber();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes team by id."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws MissingEntityException if team to delete cannot be found."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team delete(Id id) throws MissingEntityException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t : this.teams) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (t.getId().equals(id)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.teams.remove(t);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new MissingEntityException(\"Team to delete cannot be found.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns a list but with element type Team."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return List of Teams."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ObservableList\u003cTeam\u003e getSpecificTypedList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.unmodifiableTeams;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * List the teams."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return List of Teams."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ObservableList\u003c? extends Entity\u003e list() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teams;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * List the unmodifiable team of mentors."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return {@code ObservableList\u003c? extends Entity\u003e}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ObservableList\u003c? extends Entity\u003e getUnmodifiableList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.unmodifiableTeams;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Checks if a given ID exists."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean contains(Id id) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team p : this.teams) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.getId().equals(id)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Checks if given {@code Entity} exists."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean contains(Entity entity) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!(entity instanceof Team)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team team \u003d (Team) entity;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (Team t : this.teams) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (t.isSameTeam(team) || t.getId().equals(team.getId())) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Checks if this {@code TeamList} is empty."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.teams.isEmpty();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Generates the ID for the object."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ID"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static Id generateId() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        lastUsedId++;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new Id(PrefixType.T, lastUsedId);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Gets the lastUsedId class attribute."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return lastUsedId"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static int getLastUsedId() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return lastUsedId;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Sets the lastUsedId class attribute."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param number"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static void setLastUsedId(int number) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        lastUsedId \u003d number;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Provides a deep copy of the TeamList"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return Deep copy of TeamList"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public TeamList copy() throws AlfredModelException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        TeamList newTList \u003d new TeamList();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (Team t: this.teams) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            newTList.add(t.copy());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return newTList;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public PrefixType getPrefix() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return PrefixType.T;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!(other instanceof TeamList)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "john0227"
        },
        "content": "        TeamList teamList \u003d (TeamList) other;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.getSpecificTypedList().stream().allMatch(teamList::contains)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \u0026\u0026 teamList.getSpecificTypedList().stream().allMatch(this::contains);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 21,
      "hcwong": 150,
      "Joanna-YJA": 19,
      "john0227": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireAllNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return Objects.hash(name, phone, email, tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 3,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateEntityException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.exceptions.EntityNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DuplicateEntityException(\"Duplicate person found\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new EntityNotFoundException(\"Person not found: \" + target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DuplicateEntityException(\"Duplicate person found: \" + target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new EntityNotFoundException(\"Person not found: \" + toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DuplicateEntityException(\"Duplicate persons found\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 7,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateEntityException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Signals that the operation will result in duplicate Entity (Entities are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class DuplicateEntityException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Creates a new instance of DuplicateEntityException according to type of entity."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param type CommandType of entity."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public DuplicateEntityException(String type) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(\"Operation would result in duplicate \" + type + \" s\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 13,
      "hcwong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/EntityNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredRuntimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Signals that the operation is unable to find the specified Entity."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * This is due to incorrect index specified."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class EntityNotFoundException extends AlfredRuntimeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Creates a new instance of EntityNotFoundException according to type of entity."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param type CommandType of entity."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public EntityNotFoundException(String type) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(type + \"is not found\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 17,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AlfredStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Alfred Storage is the API to the storage of the system."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface AlfredStorage extends UserPrefsStorage, TeamListStorage,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantListStorage, MentorListStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TeamList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getTeamListFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cTeamList\u003e readTeamList() throws DataConversionException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveTeamList(TeamList teamList) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ParticipantList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getParticipantListFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cParticipantList\u003e readParticipantList() throws DataConversionException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveParticipantList(ParticipantList participantList) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MentorList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getMentorListFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cMentorList\u003e readMentorList() throws DataConversionException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveMentorList(MentorList mentorList) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 50,
      "hcwong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AlfredStorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Manages storage of Entity (Participant, Mentor, Team) and UserPref data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class AlfredStorageManager implements AlfredStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ParticipantListStorage pStore;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private MentorListStorage mStore;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private TeamListStorage tStore;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public AlfredStorageManager(ParticipantListStorage pStore,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                MentorListStorage mStore,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                TeamListStorage tStore,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.pStore \u003d pStore;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mStore \u003d mStore;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.tStore \u003d tStore;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ParticipantList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getParticipantListFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return pStore.getParticipantListFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readParticipantList(pStore.getParticipantListFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return pStore.readParticipantList(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveParticipantList(pList, pStore.getParticipantListFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        pStore.saveParticipantList(pList, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MentorList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getMentorListFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mStore.getMentorListFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList() throws DataConversionException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readMentorList(mStore.getMentorListFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mStore.readMentorList(filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList mList) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveMentorList(mList, mStore.getMentorListFilePath());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList mList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mStore.saveMentorList(mList, filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TeamList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getTeamListFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return tStore.getTeamListFilePath();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList() throws DataConversionException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readTeamList(tStore.getTeamListFilePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return tStore.readTeamList(filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList) throws IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveTeamList(tList, tStore.getTeamListFilePath());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        tStore.saveTeamList(tList, filePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 137,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMentor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Jackson-friendly version of {@link Mentor}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonAdaptedMentor {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Mentor\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String organization;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String prefixTypeStr;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int idNum;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonAdapterMentor} with the given participant details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedMentor(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"organization\") String organization,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                             @JsonProperty(\"subject\") String subject,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                             @JsonProperty(\"prefixTypeStr\") String prefixTypeStr,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"idNum\") int idNum) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixTypeStr \u003d prefixTypeStr;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code Mentor} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedMentor(Mentor source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (source \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Handles the case for Optional\u003cMentor\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            name \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            phone \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            email \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            organization \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            subject \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            prefixTypeStr \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            idNum \u003d -1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Handles actual Mentor object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            name \u003d source.getName().toStorageValue();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            phone \u003d source.getPhone().toStorageValue();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            email \u003d source.getEmail().toStorageValue();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            organization \u003d source.getOrganization().toStorageValue();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            subject \u003d source.getSubject().toStorageValue();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            prefixTypeStr \u003d source.getId().getPrefix().name();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            idNum \u003d source.getId().getNumber();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Checks that the current object represents a Optional Mentor to be saved in Storage."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return boolean indicating whether the JsonAdaptedMentor object represents an Optional mentor."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private boolean isOptionalMentor() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return name \u003d\u003d null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                \u0026\u0026 phone \u003d\u003d null"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                \u0026\u0026 email \u003d\u003d null"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                \u0026\u0026 organization \u003d\u003d null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                \u0026\u0026 subject \u003d\u003d null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                \u0026\u0026 prefixTypeStr \u003d\u003d null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                \u0026\u0026 idNum \u003d\u003d -1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Mentor} object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Mentor toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Handles the case when the JsonAdaptedMentor object represents an Optional\u003cMentor\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (isOptionalMentor()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (organization \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()) + \"(Organization)\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(organization)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelOrganization \u003d new Name(organization);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (subject \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, SubjectName.class.getSimpleName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!SubjectName.isValidSubjectName(subject)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(SubjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final SubjectName modelSubjectName \u003d SubjectName.valueOf(subject);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (prefixTypeStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, PrefixType.class.getSimpleName()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixTypeStr)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final PrefixType modelPrefixType \u003d PrefixType.valueOf(prefixTypeStr);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Id.isValidNumber(idNum)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS_INVALID_NUMBER);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final int modelIdNum \u003d idNum;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Id modelId \u003d new Id(modelPrefixType, modelIdNum);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Mentor(modelName, modelId, modelPhone, modelEmail, modelOrganization, modelSubjectName);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 148,
      "hcwong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedParticipant.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Jackson-friendly version of {@link Participant}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonAdaptedParticipant {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Participant\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String prefixTypeStr;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int idNum;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonAdapterParticipant} with the given participant details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedParticipant(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"prefixTypeStr\") String prefixTypeStr,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"idNum\") int idNum) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixTypeStr \u003d prefixTypeStr;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code Participant} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedParticipant(Participant source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        name \u003d source.getName().toStorageValue();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        phone \u003d source.getPhone().toStorageValue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        email \u003d source.getEmail().toStorageValue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        prefixTypeStr \u003d source.getId().getPrefix().name();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        idNum \u003d source.getId().getNumber();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Participant} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Participant toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (prefixTypeStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, PrefixType.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixTypeStr)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final PrefixType modelPrefixType \u003d PrefixType.valueOf(prefixTypeStr);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Id.isValidNumber(idNum)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS_INVALID_NUMBER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final int modelIdNum \u003d idNum;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Id modelId \u003d new Id(modelPrefixType, modelIdNum);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Participant(modelName, modelId, modelEmail, modelPhone);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 99,
      "hcwong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 2,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPrefixType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * JsonAdaptedPrefixType is the JSON representation of {@code PrefixType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class JsonAdaptedPrefixType {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Prefix field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final String prefixType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public JsonAdaptedPrefixType(@JsonProperty(\"prefixType\") String prefixType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.prefixType \u003d prefixType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public JsonAdaptedPrefixType(PrefixType source) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        prefixType \u003d source.toStorageValue();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * This converts the JSON Adapted PrefixType to the actual {@code PrefixType} Object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public PrefixType toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (prefixType \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixType)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        final PrefixType modelPrefixType \u003d PrefixType.valueOf(prefixType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return modelPrefixType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 3,
      "Joanna-YJA": 33,
      "hcwong": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTeam.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Jackson-friendly version of {@link Team}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonAdaptedTeam {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Team\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String teamName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final JsonAdaptedMentor mentor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int score;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String projectName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int location;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedParticipant\u003e pList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String prefixTypeStr;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int idNum;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonAdaptedTeam} with the given person details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedTeam(@JsonProperty(\"teamName\") String teamName, @JsonProperty(\"mentor\") JsonAdaptedMentor mentor,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"subject\") String subject,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"score\") int score, @JsonProperty(\"projectName\") String projectName,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "                           @JsonProperty(\"location\") int location,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"participants\") List\u003cJsonAdaptedParticipant\u003e pList,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"prefixTypeStr\") String prefixTypeStr, @JsonProperty(\"idNum\") int idNum) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.teamName \u003d teamName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixTypeStr \u003d prefixTypeStr;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (pList !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.pList.addAll(pList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code Team} into this class for Jackson use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedTeam(Team source) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (pList !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.pList.addAll(pList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        teamName \u003d source.getName().toStorageValue();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        subject \u003d source.getSubject().name();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        score \u003d source.getScore().toStorageValue();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        projectName \u003d source.getProjectName().toStorageValue();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        location \u003d source.getLocation().toStorageValue();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mentor \u003d new JsonAdaptedMentor(source.getMentor().orElse(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        prefixTypeStr \u003d source.getId().getPrefix().name();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        idNum \u003d source.getId().getNumber();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        pList.addAll(source.getParticipants().stream()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                .map(JsonAdaptedParticipant::new)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Team} object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Team toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final List\u003cParticipant\u003e modelParticipants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedParticipant p : pList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            modelParticipants.add(p.toModelType());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (teamName \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()) + \"(teamName)\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(teamName)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelTeamName \u003d new Name(teamName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (subject \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, SubjectName.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!SubjectName.isValidSubjectName(subject)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(SubjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final SubjectName modelSubject \u003d SubjectName.valueOf(subject);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Score.isValidScore(score)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Score.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Score modelScore \u003d new Score(score);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (projectName \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()) + \"(projectName)\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(projectName)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelProjectName \u003d new Name(projectName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cMentor\u003e modelMentor \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (mentor.toModelType() \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            modelMentor \u003d Optional.empty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            modelMentor \u003d Optional.of(mentor.toModelType());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (prefixTypeStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, PrefixType.class.getSimpleName()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixTypeStr)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final PrefixType modelPrefixType \u003d PrefixType.valueOf(prefixTypeStr);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Id.isValidNumber(idNum)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS_INVALID_NUMBER);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final int modelIdNum \u003d idNum;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Id modelId \u003d new Id(modelPrefixType, modelIdNum);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Team(modelId, modelTeamName, modelParticipants, modelMentor,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "john0227"
        },
        "content": "                modelSubject, modelScore, modelProjectName, modelLocation);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 143,
      "hcwong": 14,
      "john0227": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonMentorListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A class to access MentorList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class JsonMentorListStorage implements MentorListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMentorListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonMentorListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getMentorListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readMentorList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #readMentorList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cJsonSerializableMentorList\u003e jsonMentorList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                filePath, JsonSerializableMentorList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!jsonMentorList.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Converts to Optional\u003cMentorList\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.of(jsonMentorList.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal arguments found in \" + filePath + \": \" + iae.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(iae);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (AlfredModelException ame) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Problem encountered adding mentor to mentor list: \" + ame.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ame);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList mList) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveMentorList(mList, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #saveMentorList(MentorList)}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList mList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(mList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMentorList(mList), filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonParticipantListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A class to access ParticipantList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class JsonParticipantListStorage implements ParticipantListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonParticipantListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonParticipantListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getParticipantListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readParticipantList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #readParticipantList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cJsonSerializableParticipantList\u003e jsonParticipantList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                filePath, JsonSerializableParticipantList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!jsonParticipantList.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Converts to Optional\u003cParticipantList\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.of(jsonParticipantList.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal arguments found in \" + filePath + \": \" + iae.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(iae);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (AlfredModelException ame) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Problem encountered adding participant to participant list: \" + ame.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ame);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveParticipantList(pList, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #saveParticipantList(ParticipantList)}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(pList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableParticipantList(pList), filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableMentorList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An Immutable MentorList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@JsonRootName(value \u003d \"mentorlist\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonSerializableMentorList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Mentor list contains duplicate mentor(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedMentor\u003e mentors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonSerializableMentorList} with the given mentors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableMentorList(@JsonProperty(\"mentors\") List\u003cJsonAdaptedMentor\u003e mentors) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mentors.addAll(mentors);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code MentorList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMentorList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableMentorList(MentorList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mentors.addAll(source.list()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .map((Entity m) -\u003e new JsonAdaptedMentor((Mentor) m))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this address book into the model\u0027s {@code MentorList} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public MentorList toModelType() throws IllegalValueException, AlfredModelException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        MentorList mentorList \u003d new MentorList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedMentor jsonAdaptedMentor : mentors) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Mentor mentor \u003d jsonAdaptedMentor.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            if (mentorList.contains(mentor.getId())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            mentorList.add(mentor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mentorList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 62,
      "hcwong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableParticipantList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An Immutable ParticipantList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@JsonRootName(value \u003d \"participantlist\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonSerializableParticipantList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Participant list contains duplicate participant(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedParticipant\u003e participants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonSerializableParticipantList} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableParticipantList(@JsonProperty(\"participants\") List\u003cJsonAdaptedParticipant\u003e participants) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.participants.addAll(participants);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code ParticipantList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableParticipantList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableParticipantList(ParticipantList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        participants.addAll(source.list()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .map((Entity p) -\u003e new JsonAdaptedParticipant((Participant) p))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this address book into the model\u0027s {@code ParticipantList} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ParticipantList toModelType() throws IllegalValueException, AlfredModelException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList participantList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedParticipant jsonAdaptedParticipant : participants) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Participant participant \u003d jsonAdaptedParticipant.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            if (participantList.contains(participant.getId())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            participantList.add(participant);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return participantList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 63,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTeamList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An Immutable TeamList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@JsonRootName(value \u003d \"teamlist\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonSerializableTeamList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Team list contains duplicate team(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedTeam\u003e teams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonSerializableTeamList} with the given teams."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableTeamList(@JsonProperty(\"teams\") List\u003cJsonAdaptedTeam\u003e teams) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.teams.addAll(teams);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code TeamList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTeamList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableTeamList(TeamList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        teams.addAll(source.list()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           .map((Entity t) -\u003e new JsonAdaptedTeam((Team) t))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this address book into the model\u0027s {@code TeamList} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public TeamList toModelType() throws IllegalValueException, AlfredModelException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        TeamList teamList \u003d new TeamList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedTeam jsonAdaptedTeam : teams) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Team team \u003d jsonAdaptedTeam.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            if (teamList.contains(team.getId())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            teamList.add(team);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return teamList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 62,
      "hcwong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTeamListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A class to access TeamList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class JsonTeamListStorage implements TeamListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTeamListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonTeamListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getTeamListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readTeamList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #readTeamList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cJsonSerializableTeamList\u003e jsonTeamList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                filePath, JsonSerializableTeamList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!jsonTeamList.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Converts to Optional\u003cTeamList\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.of(jsonTeamList.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal arguments found in \" + filePath + \": \" + iae.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(iae);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (AlfredModelException ame) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Problem encountered adding team to team list: \" + ame.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ame);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveTeamList(tList, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #saveTeamList(TeamList)}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(tList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTeamList(tList), filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/MentorListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Represents a storage for {@link seedu.address.model.entitylist.MentorList}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface MentorListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getMentorListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns MentorList data as a {@link MentorList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cMentorList\u003e readMentorList() throws DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #getMentorListFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cMentorList\u003e readMentorList(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves the given {@link MentorList} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param mentorList cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveMentorList(MentorList mentorList) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #saveMentorList(MentorList)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveMentorList(MentorList mentorList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 41,
      "hcwong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ParticipantListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Represents a storage for {@link seedu.address.model.entitylist.TeamList}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface ParticipantListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getParticipantListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns ParticipantList data as a {@link ParticipantList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cParticipantList\u003e readParticipantList() throws DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #getParticipantListFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cParticipantList\u003e readParticipantList(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves the given {@link ParticipantList} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param participantList cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveParticipantList(ParticipantList participantList) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #saveParticipantList(ParticipantList)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveParticipantList(ParticipantList participantList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 41,
      "hcwong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TeamListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Represents a storage for {@link seedu.address.model.entitylist.TeamList}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface TeamListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getTeamListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns TeamList data as a {@link TeamList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cTeamList\u003e readTeamList() throws DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #getTeamListFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cTeamList\u003e readTeamList(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves the given {@link TeamList} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param teamList cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveTeamList(TeamList teamList) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #saveTeamList(TeamList)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveTeamList(TeamList teamList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 42,
      "hcwong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/exceptions/LoadException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.storage.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an error in loading from JSON file or Storage file into AddressBook when the app is reopened."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class LoadException extends AlfredException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public LoadException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 13,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelHistoryException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        } catch (CommandException | ParseException | AlfredModelHistoryException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, AlfredModelHistoryException;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "Joanna-YJA": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.CommandRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Panel containing the list of Commands entered by User."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class CommandListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String FXML \u003d \"ListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private ListView\u003cCommandRecord\u003e listView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private VBox panelContainer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public CommandListPanel(ArrayList\u003cCommandRecord\u003e commandRecords) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        listView.setItems(FXCollections.observableArrayList(commandRecords));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        listView.setCellFactory(listView -\u003e new CommandListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code CommandRecord} using a {@code CommandRecordCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    class CommandListViewCell extends ListCell\u003cCommandRecord\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        protected void updateItem(CommandRecord commandRecord, boolean isEmpty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            super.updateItem(commandRecord, isEmpty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            if (isEmpty || commandRecord \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                setGraphic(new CommandRecordCard(commandRecord).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandRecordCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.CommandRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represent"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class CommandRecordCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String FXML \u003d \"CommandRecordCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public final CommandRecord commandRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private VBox labels;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private Label commandString; //can be team name, mentor name or participant name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs a new instance of Command Record Card."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param CommandRecord CommandRecord to make the Card out of"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public CommandRecordCard(CommandRecord commandRecord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.commandRecord \u003d commandRecord;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        commandString.setText(commandRecord.getCommandString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        CommandRecord.CommandType commandType \u003d commandRecord.getCommandType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!((commandType.equals(CommandRecord.CommandType.END))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                || (commandType.equals(CommandRecord.CommandType.CURR)))) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            index.setText(commandRecord.getIndex().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        case UNDO:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            cardPane.setStyle(\"-fx-background-color: #17202a\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        case CURR:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            labels.getChildren().add(new javafx.scene.control.Label(\"You are here\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            cardPane.setStyle(\"-fx-background-color: #17202a\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        case REDO:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            cardPane.setStyle(\"-fx-background-color: #17202b\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        case END:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            cardPane.setStyle(\"-fx-background-color: #17202c\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            logger.severe(\"CommandRecord has incorrect CommandType\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (!(other instanceof EntityCard)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        // state check(if two EntityCard are equal)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        CommandRecordCard card \u003d (CommandRecordCard) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return index.getText().equals(card.index.getText())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u0026\u0026 commandRecord.equals(card.commandRecord)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u0026\u0026 commandString.getText().equals(card.commandString.getText());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 4,
      "Joanna-YJA": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EntityCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static seedu.address.Paths.MENTOR_ICON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static seedu.address.Paths.STUDENT_ICON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static seedu.address.Paths.TEAM_ICON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class EntityCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String FXML \u003d \"EntityCard.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public final Entity entity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private PrefixType type;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private VBox labels;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private Label name; //can be team name, mentor name or participant name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private ImageView idIcon;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs a new instance of Entity Card."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param entity Entity to make a card out of."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param displayedIndex the index of the card."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public EntityCard(Entity entity, int displayedIndex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.entity \u003d entity;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        index.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        id.setText(entity.getId().toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        name.setText(entity.getName().toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (entity instanceof Participant) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            this.generateParticipantCard(entity);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        } else if (entity instanceof Mentor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            this.generateMentorCard(entity);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            this.generateTeamCard(entity);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Generates participant Card according to entity type."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param entity type of Entity."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private void generateParticipantCard(Entity entity) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.idIcon.setImage(getImage(STUDENT_ICON));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        logger.info(\"The participant icon has been changed to: \" + idIcon);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        Participant participant \u003d (Participant) entity;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        labels.getChildren().add(new Label(participant.getPhone().value));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        labels.getChildren().add(new Label(participant.getEmail().value));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.type \u003d PrefixType.P;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Generates Mentor Card according to entity type."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param entity type of Entity."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private void generateMentorCard(Entity entity) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.idIcon.setImage(getImage(MENTOR_ICON));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        Mentor mentor \u003d (Mentor) entity;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        labels.getChildren().add(new Label(mentor.getOrganization().toString()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        labels.getChildren().add(new Label(mentor.getSubject().toString()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.type \u003d PrefixType.M;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Generates Team Card according to entity type."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param entity type of Entity."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private void generateTeamCard(Entity entity) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.idIcon.setImage(getImage(TEAM_ICON));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        Team team \u003d (Team) entity;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        FlowPane participantPane \u003d new FlowPane();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        team.getParticipants().stream()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                .sorted(Comparator.comparing(pt -\u003e pt.getName().toString()))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                .forEach(p -\u003e participantPane.getChildren().add(new Label(p.getName().toString())));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        Optional\u003cMentor\u003e teamMentor \u003d team.getMentor();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        labels.getChildren().add("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                new Label(teamMentor.isEmpty() ? \"Mentor not assigned\" : teamMentor.get().getName().toString()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        labels.getChildren().add(new Label(team.getSubject().toString()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        labels.getChildren().add(new Label(team.getProjectName().toString()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        labels.getChildren().add(new Label(team.getLocation().toString()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        labels.getChildren().add(new Label(\"Score: \" + team.getScore().toString()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.type \u003d PrefixType.T;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        logger.info(\"File path of image is: \" + imagePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        logger.info(this.getClass().getResourceAsStream(imagePath).toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return new Image(Objects.requireNonNull(this.getClass().getResourceAsStream(imagePath)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (!(other instanceof EntityCard)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        // state check(if two EntityCard are equal)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        EntityCard card \u003d (EntityCard) other;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u0026\u0026 entity.equals(card.entity)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u0026\u0026 name.getText().equals(card.name.getText());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EntityListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class EntityListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final String FXML \u003d \"ListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private PrefixType prefix;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EntityListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ListView\u003cEntity\u003e listView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private VBox panelContainer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public EntityListPanel(ObservableList\u003c? extends Entity\u003e entityList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        entityList.forEach(item -\u003e listView.getItems().add(item));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.info(\"Size of EntityList is: \" + listView.getItems().size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.info(\"Size of EntityListView is: \" + listView.getItems().size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (!entityList.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            Entity firstItem \u003d entityList.get(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            if (firstItem instanceof Participant) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                prefix \u003d PrefixType.P;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                listView.setCellFactory(listView -\u003e new ParticipantListViewCell());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            } else if (firstItem instanceof Team) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                prefix \u003d PrefixType.T;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                listView.setCellFactory(listView -\u003e new TeamListViewCell());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            } else if (firstItem instanceof Mentor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                prefix \u003d PrefixType.M;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                listView.setCellFactory(listView -\u003e new MentorListViewCell());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            logger.info(\"EntityListView has prefix type: \" + this.prefix);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Mentor} using an {@code EntityCard}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    class MentorListViewCell extends ListCell\u003cEntity\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        protected void updateItem(Entity entity, boolean isEmpty) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            Mentor curr \u003d (Mentor) entity;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            super.updateItem(curr, isEmpty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            if (isEmpty || curr \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                logger.info(\"Item does not exist\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                setGraphic(new EntityCard(curr, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                logger.info(\"Graphic is set to EntityCard of Mentor type\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Participant} using an {@code EntityCard}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    class ParticipantListViewCell extends ListCell\u003cEntity\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        protected void updateItem(Entity entity, boolean isEmpty) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            Participant curr \u003d (Participant) entity;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            super.updateItem(curr, isEmpty);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            if (isEmpty || curr \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                logger.info(\"Item does not exist\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                setGraphic(new EntityCard(curr, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                logger.info(\"Graphic is set to EntityCard of Participant type\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Team} using an {@code EntityCard}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    class TeamListViewCell extends ListCell\u003cEntity\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        protected void updateItem(Entity entity, boolean isEmpty) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            Team curr \u003d (Team) entity;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            super.updateItem(curr, isEmpty);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            if (isEmpty || curr \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                logger.info(\"Item does not exist\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                setGraphic(new EntityCard(curr, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                logger.info(\"Graphic is set to EntityCard of Team type\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 9,
      "Joanna-YJA": 99,
      "john0227": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpCommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Each help instruction is represented as a box."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class HelpCommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String FXML \u003d \"HelpCommandBox.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private VBox card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Label commandTitle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Text commandDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param title which is the name of the command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param description on how to use the command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HelpCommandBox(String title, String description) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        commandTitle.setText(this.title);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        commandDescription.setText(this.description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        commandTitle.setFont(Font.font(\"Verdana\", FontWeight.BOLD, 13));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.logic.commands.CommandUtils;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private ListView\u003cHelpCommandBox\u003e helpCommandsListView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        CommandUtils.ALL_COMMANDS_IN_HELP.stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .map(tuple -\u003e new HelpCommandBox(tuple.getZero(), tuple.getOne()))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .forEach(box -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    helpCommandsListView.getItems().add(box); });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        helpCommandsListView.setCellFactory(box -\u003e new ListCell\u003cHelpCommandBox\u003e() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            protected void updateItem(HelpCommandBox item, boolean isEmpty) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                super.updateItem(item, isEmpty);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                if (isEmpty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    setText(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    setGraphic(new HelpCommandBox(item.getTitle(), item.getDescription()).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 102,
      "hcwong": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import com.jfoenix.controls.JFXButton;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelHistoryException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private EntityListPanel entityListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private CommandListPanel commandListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private JFXButton participantsButton;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private JFXButton teamsButton;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private JFXButton mentorsButton;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private JFXButton historyButton;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        //Displays the list of teams during application start up"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        entityListPanel \u003d new EntityListPanel(logic.getFilteredTeamList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        listPanelPlaceholder.getChildren().add(entityListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        //Displays the file path for team list during start up for application"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTeamListFilePath());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Handles the display of Command History in the GUI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private void handleHistory() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        List\u003cString\u003e undoHistory \u003d logic.getUndoCommandHistory();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        List\u003cString\u003e redoHistory \u003d logic.getRedoCommandHistory();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        System.out.println(\"Inside handleHistory: printing\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (String h: redoHistory) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            System.out.println(h);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003c\u003c Current State \u003e\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (String h: undoHistory) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            System.out.println(h);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Displays the list of Participants in Model and Storage on Graphical User Interface."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private void displayParticipantList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        entityListPanel \u003d new EntityListPanel(logic.getFilteredParticipantList());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        listPanelPlaceholder.getChildren().set(0, entityListPanel.getRoot());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        listPanelPlaceholder.setStyle(\"-fx-background-color: #5d6d7e\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        logger.info(\"Color of entity list placeholder is: \" + listPanelPlaceholder.getStyle());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Displays the list of Teams in Model and Storage on Graphical User Interface."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private void displayTeamList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        entityListPanel \u003d new EntityListPanel(logic.getFilteredTeamList());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        listPanelPlaceholder.getChildren().set(0, entityListPanel.getRoot());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        listPanelPlaceholder.setStyle(\"-fx-background-color:#abb2b9\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        logger.info(\"Color of entity list placeholder is: \" + listPanelPlaceholder.getStyle());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Displays the list of Mentors in Model and Storage on Graphical User Interface."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private void displayMentorList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        entityListPanel \u003d new EntityListPanel(logic.getFilteredMentorList());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        listPanelPlaceholder.getChildren().set(0, entityListPanel.getRoot());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        listPanelPlaceholder.setStyle(\"-fx-background-color: #17202a\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        logger.info(\"Color of entity list placeholder is: \" + listPanelPlaceholder.getStyle());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Displays the Command History on Graphical User Interface."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private void displayHistory() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        commandListPanel \u003d new CommandListPanel(logic.getCommandHistory());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        listPanelPlaceholder.getChildren().set(0, commandListPanel.getRoot());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        listPanelPlaceholder.setStyle(\"-fx-background-color: #17202a\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        logger.info(\"Color of entity list placeholder is: \" + listPanelPlaceholder.getStyle());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public EntityListPanel getEntityListPanel() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return entityListPanel;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Disarms or resets all buttons so that a new command can be carried out."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * The new command will arm a new button."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private void disarmAllButton() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        //TODO: shorten this"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        //Any ideas on how to shorten this method?"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (participantsButton.isArmed()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            participantsButton.disarm();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (teamsButton.isArmed()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            teamsButton.disarm();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (mentorsButton.isArmed()) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            mentorsButton.disarm();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private void fireButton(Button button) throws AlfredModelHistoryException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        disarmAllButton();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        button.arm();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        button.fire();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @SuppressWarnings(\"checkstyle:Regexp\")"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private CommandResult executeCommand(String commandText)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            throws CommandException, ParseException, AlfredModelHistoryException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            handleHistory(); //DEBUG"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            CommandType commandType \u003d commandResult.getCommandType();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            logger.info(\"CommandResult has the prefix: \" + commandType);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            //TODO: if the current panel is the one being changed, do not change the entityListPlaceholder"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            case M:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                this.fireButton(mentorsButton);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            case T:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                this.fireButton(teamsButton);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            case P:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                this.fireButton(participantsButton);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            case H:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                this.fireButton(historyButton);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                logger.info(\"The command does not edit any of the list of Entity\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        } catch (CommandException | ParseException | AlfredModelHistoryException e) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 21,
      "-": 186,
      "Joanna-YJA": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/alfred_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "Joanna-YJA": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "Joanna-YJA": 2
    }
  },
  {
    "path": "src/main/resources/view/Card.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            fx:controller\u003d\"view.Card\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 14
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import de.jensd.fx.glyphs.fontawesome.FontAwesomeIconView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003cHBox styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"What can I do for you?\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "  \u003cButton fx:id\u003d\"sendButton\" alignment\u003d\"BOTTOM_CENTER\" contentDisplay\u003d\"GRAPHIC_ONLY\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "          maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "          minWidth\u003d\"-Infinity\" prefHeight\u003d\"40.0\" prefWidth\u003d\"30.0\" onAction\u003d\"#handleCommandEntered\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "      \u003cFontAwesomeIconView fill\u003d\"#3083cc\" glyphName\u003d\"PAPER_PLANE\" size\u003d\"25\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "  \u003c/Button\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "Joanna-YJA": 13
    }
  },
  {
    "path": "src/main/resources/view/CommandRecordCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"20\" prefWidth\u003d\"200\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        \u003cVBox id\u003d\"labels\" fx:id\u003d\"labels\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003cHBox id\u003d\"details\" spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u003cLabel  fx:id\u003d\"index\" id\u003d\"index\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u003cLabel fx:id\u003d\"commandString\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 32
    }
  },
  {
    "path": "src/main/resources/view/EntityCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"20\" prefWidth\u003d\"200\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        \u003cVBox id\u003d\"labels\" fx:id\u003d\"labels\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" \u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003cHBox id\u003d\"entity_details\" spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u003cLabel id\u003d\"index\" fx:id\u003d\"index\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        \u003cStackPane alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u003cImageView id\u003d\"idIcon\" fx:id\u003d\"idIcon\"  fitHeight\u003d\"70.0\" fitWidth\u003d\"70.0\" opacity\u003d\"0.65\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u003cVBox id\u003d\"idDetails\" prefHeight\u003d\"70.0\" prefWidth\u003d\"70.0\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    \u003cLabel text\u003d\"ID:\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    \u003cLabel id\u003d\"id\" fx:id\u003d\"id\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 43
    }
  },
  {
    "path": "src/main/resources/view/HelpCommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "\u003cVBox id\u003d\"card\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        \u003cInsets topRightBottomLeft\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    \u003cLabel fx:id\u003d\"commandTitle\" style\u003d\"-fx-font-weight: bold;\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    \u003cText fx:id\u003d\"commandDescription\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hcwong": 18
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        \u003cListView fx:id\u003d\"helpCommandsListView\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "hcwong": 5
    }
  },
  {
    "path": "src/main/resources/view/ListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003cVBox fx:id\u003d\"panelContainer\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    \u003cListView fx:id\u003d\"listView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import de.jensd.fx.glyphs.fontawesome.FontAwesomeIconView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXButton?\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "         title\u003d\"Alfred - The Hackathon Butler\" minWidth\u003d\"700\" minHeight\u003d\"700\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        \u003cImage url\u003d\"@/images/alfred_icon.png\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003cAnchorPane prefHeight\u003d\"700.0\" prefWidth\u003d\"700.0\" style\u003d\"-fx-background-color: transparent;\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    \u003cBorderPane prefHeight\u003d\"700.0\" prefWidth\u003d\"700.0\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"  style\u003d\"-fx-background-color: transparent;\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                        \u003cleft\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                            \u003cAnchorPane prefHeight\u003d\"555.0\" prefWidth\u003d\"160.0\" style\u003d\"-fx-background-color: f0f7ff;\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        BorderPane.alignment\u003d\"CENTER\" AnchorPane.topAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cAnchorPane layoutY\u003d\"-2.0\" prefHeight\u003d\"700.0\" prefWidth\u003d\"35.0\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                                style\u003d\"-fx-background-color: #ffff;\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                                AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003ceffect\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                            \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003c/effect\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cJFXButton fx:id\u003d\"participantsButton\" id\u003d\"participantsButton\" alignment\u003d\"BASELINE_LEFT\" graphicTextGap\u003d\"40.0\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               layoutX\u003d\"3.0\" layoutY\u003d\"8.0\" prefHeight\u003d\"60.0\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               prefWidth\u003d\"160.0\" text\u003d\"Participants\" onAction\u003d\"#displayParticipantList\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                            \u003cFontAwesomeIconView fill\u003d\"#3083cc\" glyphName\u003d\"USER\" size\u003d\"17\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cJFXButton  fx:id\u003d\"teamsButton\" id\u003d\"teamsButton\" alignment\u003d\"BASELINE_LEFT\" graphicTextGap\u003d\"40.0\" layoutX\u003d\"3.0\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               layoutY\u003d\"68.0\" prefHeight\u003d\"60.0\" prefWidth\u003d\"160.0\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               text\u003d\"Teams\" onAction\u003d\"#displayTeamList\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                            \u003cFontAwesomeIconView fill\u003d\"#3083cc\" glyphName\u003d\"USERS\" size\u003d\"17\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                                                 textAlignment\u003d\"JUSTIFY\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cJFXButton fx:id\u003d\"mentorsButton\" id\u003d\"mentorsButton\" alignment\u003d\"BASELINE_LEFT\" graphicTextGap\u003d\"40.0\" layoutX\u003d\"3.0\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               layoutY\u003d\"128.0\" prefHeight\u003d\"60.0\" prefWidth\u003d\"160.0\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               text\u003d\"Mentors\" onAction\u003d\"#displayMentorList\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                            \u003cFontAwesomeIconView fill\u003d\"#3083cc\" glyphName\u003d\"USER_SECRET\" size\u003d\"17\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cJFXButton alignment\u003d\"BASELINE_LEFT\" graphicTextGap\u003d\"40.0\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               layoutX\u003d\"3.0\" layoutY\u003d\"230.0\" prefHeight\u003d\"60.0\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               prefWidth\u003d\"160.0\" text\u003d\"Leaderboard\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                            \u003cFontAwesomeIconView fill\u003d\"#3083cc\" glyphName\u003d\"TROPHY\" size\u003d\"17\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cJFXButton fx:id\u003d\"historyButton\" id\u003d\"historyButton\" alignment\u003d\"BASELINE_LEFT\" graphicTextGap\u003d\"40.0\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               layoutX\u003d\"3.0\" layoutY\u003d\"290.0\" prefHeight\u003d\"60.0\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               prefWidth\u003d\"160.0\" text\u003d\"History\" onAction\u003d\"#displayHistory\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                            \u003cFontAwesomeIconView fill\u003d\"#3083cc\" glyphName\u003d\"CLONE\" size\u003d\"17\"/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cJFXButton alignment\u003d\"BASELINE_LEFT\" graphicTextGap\u003d\"40.0\" layoutX\u003d\"5.0\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               layoutY\u003d\"322.0\" prefHeight\u003d\"60.0\" prefWidth\u003d\"160.0\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               text\u003d\"Food\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                            \u003cFontAwesomeIconView fill\u003d\"#3083cc\" glyphName\u003d\"CUTLERY\" size\u003d\"17\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cJFXButton alignment\u003d\"BASELINE_LEFT\" graphicTextGap\u003d\"40.0\" layoutX\u003d\"3.0\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               layoutY\u003d\"382.0\" prefHeight\u003d\"60.0\" prefWidth\u003d\"160.0\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               text\u003d\"Swag\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                            \u003cFontAwesomeIconView fill\u003d\"#3083cc\" glyphName\u003d\"SHOPPING_BASKET\" size\u003d\"17\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cJFXButton alignment\u003d\"BASELINE_LEFT\" graphicTextGap\u003d\"40.0\" layoutX\u003d\"3.0\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               layoutY\u003d\"442.0\" prefHeight\u003d\"60.0\" prefWidth\u003d\"160.0\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               text\u003d\"Inventory\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                            \u003cFontAwesomeIconView fill\u003d\"#3083cc\" glyphName\u003d\"ARCHIVE\" size\u003d\"17\" text\u003d\"\"/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003ceffect\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003c/effect\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                        \u003c/left\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                        \u003ccenter\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                            \u003cAnchorPane prefHeight\u003d\"555.0\" prefWidth\u003d\"520.0\" BorderPane.alignment\u003d\"CENTER\" style \u003d \"-fx-background-color: transparent;\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                           AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                           AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" style \u003d \"-fx-background-color: transparent;\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                        \u003c/center\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                        \u003cbottom\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                            \u003cVBox prefHeight\u003d\"120.0\" prefWidth\u003d\"700.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               styleClass\u003d\"pane-with-border\" prefHeight\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                               styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                                               minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                        \u003c/bottom\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                        \u003ctop\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                            \u003cMenuBar fx:id\u003d\"menuBar\" minHeight\u003d\"25.0\"\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                              text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cInsets/\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003ceffect\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                    \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                                \u003c/effect\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                            \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                        \u003c/top\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "Joanna-YJA": 132
    }
  },
  {
    "path": "src/main/resources/view/TeamListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    \u003cListView fx:id\u003d\"teamListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void capitalize_validInputs_correctOutputs() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(StringUtil.capitalize(\"\"), \"\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(StringUtil.capitalize(\"HellO WoRLd\"), \"Hello world\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(StringUtil.capitalize(\"AlFreD\"), \"Alfred\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 143,
      "john0227": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelHistoryException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "@Disabled"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException, AlfredModelHistoryException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // TODO: Reinstate this test later"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 2,
      "-": 61,
      "Joanna-YJA": 3,
      "hcwong": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANISATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditMentorCommand.EditMentorDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditParticipantCommand.EditParticipantDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditTeamCommand.EditTeamDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.EditMentorDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.EditParticipantDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.EditTeamDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // Amy Bee used as a Participant and Mentor"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"+611111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String VALID_ORGANIZATION_AMY \u003d \"Amy Org\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String VALID_SUBJECT_AMY \u003d \"Environmental\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // Bob Choo used as a Participant and Mentor"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"+622222222\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String VALID_ORGANIZATION_BOB \u003d \"Bob Org\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String VALID_SUBJECT_BOB \u003d \"Social\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // Alfred used as a Team"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String VALID_NAME_ALFRED \u003d \"Alfred\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String VALID_SUBJECT_ALFRED \u003d \"Health\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final int VALID_SCORE_ALFRED \u003d 100;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String VALID_PROJECT_NAME_ALFRED \u003d \"Hackathon Butler\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final int VALID_LOCATION_ALFRED \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    //Bruce used as a Team"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String VALID_NAME_BRUCE \u003d \"Bruce\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String VALID_SUBJECT_BRUCE \u003d \"Education\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final int VALID_SCORE_BRUCE \u003d 99;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String VALID_PROJECT_NAME_BRUCE \u003d \"Hackathon Batman\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final int VALID_LOCATION_BRUCE \u003d 2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final EditMentorDescriptor MENTOR_DESC_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final EditMentorDescriptor MENTOR_DESC_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final EditParticipantDescriptor PARTICIPANT_DESC_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final EditParticipantDescriptor PARTICIPANT_DESC_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final EditTeamDescriptor TEAM_DESC_ALFRED;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final EditTeamDescriptor TEAM_DESC_BRUCE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        MENTOR_DESC_AMY \u003d new EditMentorDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withOrganization(VALID_ORGANIZATION_AMY).withSubject(VALID_SUBJECT_AMY).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        MENTOR_DESC_BOB \u003d new EditMentorDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withOrganization(VALID_ORGANIZATION_BOB).withSubject(VALID_SUBJECT_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        PARTICIPANT_DESC_AMY \u003d new EditParticipantDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        PARTICIPANT_DESC_BOB \u003d new EditParticipantDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "        TEAM_DESC_ALFRED \u003d new EditTeamDescriptorBuilder().withName(VALID_NAME_ALFRED)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withSubject(VALID_SUBJECT_ALFRED).withScore(VALID_SCORE_ALFRED)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withProjectName(VALID_PROJECT_NAME_ALFRED).withLocation(VALID_LOCATION_ALFRED).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        TEAM_DESC_BRUCE \u003d new EditTeamDescriptorBuilder().withName(VALID_NAME_BRUCE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withSubject(VALID_SUBJECT_BRUCE).withScore(VALID_SCORE_BRUCE)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withProjectName(VALID_PROJECT_NAME_BRUCE).withLocation(VALID_LOCATION_BRUCE).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // Redundant and can be deleted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // Participant and Mentor formatted data"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String ORGANIZATION_DESC_AMY \u003d \" \" + PREFIX_ORGANISATION + VALID_ORGANIZATION_AMY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String ORGANIZATION_DESC_BOB \u003d \" \" + PREFIX_ORGANISATION + VALID_ORGANIZATION_BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String SUBJECT_DESC_AMY \u003d \" \" + PREFIX_SUBJECT_NAME + VALID_SUBJECT_AMY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String SUBJECT_DESC_BOB \u003d \" \" + PREFIX_SUBJECT_NAME + VALID_SUBJECT_BOB;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // Team formatted data"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String NAME_DESC_ALFRED \u003d \" \" + PREFIX_NAME + VALID_NAME_ALFRED;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String NAME_DESC_BRUCE \u003d \" \" + PREFIX_NAME + VALID_NAME_BRUCE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String LOCATION_DESC_ALFRED \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_ALFRED;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String LOCATION_DESC_BRUCE \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_BRUCE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String PROJECT_NAME_DESC_ALFRED \u003d \" \" + PREFIX_PROJECT_NAME + VALID_PROJECT_NAME_ALFRED;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String PROJECT_NAME_DESC_BRUCE \u003d \" \" + PREFIX_PROJECT_NAME + VALID_PROJECT_NAME_BRUCE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String SUBJECT_DESC_ALFRED \u003d \" \" + PREFIX_SUBJECT_NAME + VALID_SUBJECT_ALFRED;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String SUBJECT_DESC_BRUCE \u003d \" \" + PREFIX_SUBJECT_NAME + VALID_SUBJECT_BRUCE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // Redundant and can be deleted"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // Invalid data for tests"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String INVALID_PROJECT_NAME_DESC \u003d \" \" + PREFIX_PROJECT_NAME"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String INVALID_ORGANISATION_DESC \u003d \" \" + PREFIX_ORGANISATION + \"Y@hoo\"; // invalid \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String INVALID_SUBJECT_DESC \u003d \" \" + PREFIX_SUBJECT_NAME + \"Dance\"; // invalid Subject Name"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String INVALID_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION + \"room5\"; // Should be a number"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // Redundant and can be deleted"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // TODO: uncomment this later when everything is deprecated"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // List\u003cParticipant\u003e expectedFilteredParticipantList"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //     \u003d new ArrayList\u003c\u003e(actualModel.getFilteredParticipantList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // List\u003cTeam\u003e expectedFilteredTeamList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTeamList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // List\u003cMentor\u003e expectedFilteredMentorList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredMentorList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // assertEquals(expectedFilteredParticipantList, actualModel.getFilteredParticipantList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // assertEquals(expectedFilteredTeamList, actualModel.getFilteredTeamList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // assertEquals(expectedFilteredMentorList, actualModel.getFilteredMentorList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 39,
      "-": 87,
      "john0227": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addcommand/AddMentorCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_MENTOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.MentorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddMentorCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void constructor_nullMentor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddMentorCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_mentorAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ModelManagerStub modelStub \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor validMentor \u003d new MentorBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        CommandResult commandResult \u003d new AddMentorCommand(validMentor).execute(modelStub);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(String.format(AddMentorCommand.MESSAGE_SUCCESS, validMentor),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(validMentor, modelStub.getMentor(ID_FIRST_MENTOR));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_duplicateMentor_throwsCommandException() throws AlfredException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor validMentor \u003d new MentorBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        AddMentorCommand addMentorCommand \u003d new AddMentorCommand(validMentor);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ModelManagerStub modelStub \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        addMentorCommand.execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Assert.assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "                AddMentorCommand.MESSAGE_DUPLICATE_MENTOR, () -\u003e addMentorCommand.execute(modelStub));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addcommand/AddParticipantCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_PARTICIPANT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.ParticipantBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "// TODO: Test adding to Team (later)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddParticipantCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void constructor_nullParticipant_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddParticipantCommand(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_participantAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ModelManagerStub modelStub \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant validParticipant \u003d new ParticipantBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        CommandResult commandResult \u003d new AddParticipantCommand(validParticipant).execute(modelStub);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(String.format(AddParticipantCommand.MESSAGE_SUCCESS, validParticipant),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(validParticipant, modelStub.getParticipant(ID_FIRST_PARTICIPANT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_duplicateParticipant_throwsCommandException() throws AlfredException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant validParticipant \u003d new ParticipantBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        AddParticipantCommand addParticipantCommand \u003d new AddParticipantCommand(validParticipant);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ModelManagerStub modelStub \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        addParticipantCommand.execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Assert.assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "                AddParticipantCommand.MESSAGE_DUPLICATE_PARTICIPANT, () -\u003e addParticipantCommand.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addcommand/AddTeamCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_TEAM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TeamBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddTeamCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void constructor_nullTeam_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTeamCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_teamAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ModelManagerStub modelStub \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team validTeam \u003d new TeamBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        CommandResult commandResult \u003d new AddTeamCommand(validTeam).execute(modelStub);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(String.format(AddTeamCommand.MESSAGE_SUCCESS, validTeam),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(validTeam, modelStub.getTeam(ID_FIRST_TEAM));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_duplicateTeam_throwsCommandException() throws AlfredException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team validTeam \u003d new TeamBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        AddTeamCommand addTeamCommand \u003d new AddTeamCommand(validTeam);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ModelManagerStub modelStub \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        addTeamCommand.execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Assert.assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "                AddTeamCommand.MESSAGE_DUPLICATE_TEAM, () -\u003e addTeamCommand.execute(modelStub));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/csvcommand/ExportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.csvcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.FileUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalMentors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalParticipants;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalTeams;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes mentor list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private void initializeMentors(Model model) throws AlfredException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addMentor(TypicalMentors.A);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addMentor(TypicalMentors.B);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addMentor(TypicalMentors.C);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes participant list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private void initializeParticipants(Model model) throws AlfredException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addParticipant(TypicalParticipants.A);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addParticipant(TypicalParticipants.B);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addParticipant(TypicalParticipants.C);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes team list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private void initializeTeams(Model model) throws AlfredException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addTeam(TypicalTeams.A);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addTeam(TypicalTeams.B);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addTeam(TypicalTeams.C);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void equals_sameCommands_returnTrue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Same command returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportCommand command1 \u003d new ExportCommand(\"src/main/test/Alfred.csv\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(command1, command1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Same parameter returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportCommand command2 \u003d new ExportCommand(\"src/main/test/Alfred.csv\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(command1, command2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Empty strings result in default names"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        command1 \u003d new ExportCommand(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        command2 \u003d new ExportCommand(ExportCommand.DEFAULT_FILE_PATH.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(command1, command2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void equals_differentCommands_returnFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Different class returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportCommand command1 \u003d new ExportCommand(\"src/main/test/Alfred.csv\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ImportCommand loadCommand \u003d new ImportCommand(\"Alfred.csv\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertNotEquals(command1, loadCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Different parameters returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportCommand command2 \u003d new ExportCommand(\"src/main/test/Alfred1.csv\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertNotEquals(command1, command2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void constructor_nonCsvFilePassed_assertionErrorThrown() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d \"Alfred.txt\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new ExportCommand(filePath));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_emptyModelPassed_successWithNoFileCreated() throws AlfredException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model emptyModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String fileName \u003d \"Alfred.csv\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d TestUtil.getFilePathInCsvUtilTestFolder(fileName).toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ExportCommand.MESSAGE_EMPTY_DATA,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ExportCommand(filePath).execute(emptyModel).getFeedbackToUser()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(TestUtil.getFilePathInCsvUtilTestFolder(fileName).toFile().exists());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_validParametersPassed_success() throws AlfredException, IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "        initializeMentors(model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "        initializeParticipants(model);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        initializeTeams(model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File expectedFile \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"ExpectedEntities.csv\").toFile();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String fileName \u003d \"Alfred.csv\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d TestUtil.getFilePathInSandboxFolder(fileName).toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_SUCCESS, filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expectedMessage, new ExportCommand(filePath).execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File outcomeFile \u003d TestUtil.getFilePathInSandboxFolder(fileName).toFile();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "        outcomeFile.deleteOnExit();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(FileUtil.hasEqualContents(expectedFile, outcomeFile));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/csvcommand/ExportMentorCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.csvcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.FileUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalMentors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ExportMentorCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes mentor list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private void initializeMentors(Model model) throws AlfredException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addMentor(TypicalMentors.A);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addMentor(TypicalMentors.B);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addMentor(TypicalMentors.C);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void equals_sameCommands_returnTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d \"src/main/test/Alfred.csv\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Same command returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportMentorCommand command1 \u003d new ExportMentorCommand(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(command1, command1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Same parameter returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportMentorCommand command2 \u003d new ExportMentorCommand(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(command1, command2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Empty strings result in default names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        command1 \u003d new ExportMentorCommand(\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        command2 \u003d new ExportMentorCommand(ExportMentorCommand.DEFAULT_FILE_PATH.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(command1, command2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void equals_differentCommands_returnFalse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Different class returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d \"src/main/test/Alfred.csv\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportMentorCommand command1 \u003d new ExportMentorCommand(filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportParticipantCommand exportParticipantCommand \u003d new ExportParticipantCommand(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertNotEquals(command1, exportParticipantCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Different parameters returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportMentorCommand command2 \u003d new ExportMentorCommand(\"src/main/test/Alfred1.csv\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertNotEquals(command1, command2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void constructor_nonCsvFilePassed_assertionErrorThrown() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d \"Alfred.txt\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new ExportMentorCommand(filePath));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_emptyModelPassed_successWithNoFileCreated() throws AlfredException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model emptyModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String fileName \u003d \"Alfred.csv\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d TestUtil.getFilePathInCsvUtilTestFolder(fileName).toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ExportMentorCommand.MESSAGE_EMPTY_DATA,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ExportMentorCommand(filePath).execute(emptyModel).getFeedbackToUser()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(TestUtil.getFilePathInCsvUtilTestFolder(fileName).toFile().exists());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_validParametersPassed_success() throws AlfredException, IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        initializeMentors(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File expectedFile \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"ExpectedMentors.csv\").toFile();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String fileName \u003d \"Alfred.csv\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d TestUtil.getFilePathInSandboxFolder(fileName).toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format(ExportMentorCommand.MESSAGE_SUCCESS, filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expectedMessage, new ExportMentorCommand(filePath).execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File outcomeFile \u003d TestUtil.getFilePathInSandboxFolder(fileName).toFile();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        outcomeFile.deleteOnExit();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(FileUtil.hasEqualContents(expectedFile, outcomeFile));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/csvcommand/ExportParticipantCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.csvcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.FileUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalParticipants;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ExportParticipantCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes participant list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private void initializeParticipants(Model model) throws AlfredException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addParticipant(TypicalParticipants.A);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addParticipant(TypicalParticipants.B);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addParticipant(TypicalParticipants.C);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void equals_sameCommands_returnTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d \"src/main/test/Alfred.csv\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Same command returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportParticipantCommand command1 \u003d new ExportParticipantCommand(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(command1, command1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Same parameter returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportParticipantCommand command2 \u003d new ExportParticipantCommand(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(command1, command2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Empty strings result in default names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        command1 \u003d new ExportParticipantCommand(\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        command2 \u003d new ExportParticipantCommand(ExportParticipantCommand.DEFAULT_FILE_PATH.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(command1, command2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void equals_differentCommands_returnFalse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d \"src/main/test/Alfred.csv\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Different class returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportParticipantCommand command1 \u003d new ExportParticipantCommand(filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportTeamCommand exportTeamCommand \u003d new ExportTeamCommand(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertNotEquals(command1, exportTeamCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Different parameters returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportParticipantCommand command2 \u003d new ExportParticipantCommand(\"src/main/test/Alfred1.csv\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertNotEquals(command1, command2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void constructor_nonCsvFilePassed_assertionErrorThrown() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d \"Alfred.txt\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new ExportParticipantCommand(filePath));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_emptyModelPassed_successWithNoFileCreated() throws AlfredException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model emptyModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String fileName \u003d \"Alfred.csv\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d TestUtil.getFilePathInCsvUtilTestFolder(fileName).toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ExportParticipantCommand.MESSAGE_EMPTY_DATA,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ExportParticipantCommand(filePath).execute(emptyModel).getFeedbackToUser()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(TestUtil.getFilePathInCsvUtilTestFolder(fileName).toFile().exists());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_validParametersPassed_success() throws AlfredException, IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        initializeParticipants(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File expectedFile \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"ExpectedParticipants.csv\").toFile();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String fileName \u003d \"Alfred.csv\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d TestUtil.getFilePathInSandboxFolder(fileName).toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format(ExportParticipantCommand.MESSAGE_SUCCESS, filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expectedMessage, new ExportParticipantCommand(filePath).execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File outcomeFile \u003d TestUtil.getFilePathInSandboxFolder(fileName).toFile();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        outcomeFile.deleteOnExit();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(FileUtil.hasEqualContents(expectedFile, outcomeFile));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/csvcommand/ExportTeamCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.csvcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.FileUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalTeams;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ExportTeamCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes team list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private void initializeTeams(Model model) throws AlfredException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addTeam(TypicalTeams.A);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addTeam(TypicalTeams.B);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addTeam(TypicalTeams.C);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void equals_sameCommands_returnTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d \"src/main/test/Alfred.csv\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Same command returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportTeamCommand command1 \u003d new ExportTeamCommand(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(command1, command1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Same parameter returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportTeamCommand command2 \u003d new ExportTeamCommand(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(command1, command2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Empty strings result in default names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        command1 \u003d new ExportTeamCommand(\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        command2 \u003d new ExportTeamCommand(ExportTeamCommand.DEFAULT_FILE_PATH.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(command1, command2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void equals_differentCommands_returnFalse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d \"src/main/test/Alfred.csv\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Different class returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportTeamCommand command1 \u003d new ExportTeamCommand(filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportMentorCommand exportMentorCommand \u003d new ExportMentorCommand(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertNotEquals(command1, exportMentorCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Different parameters returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ExportTeamCommand command2 \u003d new ExportTeamCommand(\"src/main/test/Alfred1.csv\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertNotEquals(command1, command2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void constructor_nonCsvFilePassed_assertionErrorThrown() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d \"Alfred.txt\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new ExportTeamCommand(filePath));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_emptyModelPassed_successWithNoFileCreated() throws AlfredException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model emptyModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String fileName \u003d \"Alfred.csv\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d TestUtil.getFilePathInCsvUtilTestFolder(fileName).toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ExportTeamCommand.MESSAGE_EMPTY_DATA,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ExportTeamCommand(filePath).execute(emptyModel).getFeedbackToUser()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(TestUtil.getFilePathInCsvUtilTestFolder(fileName).toFile().exists());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_validParametersPassed_success() throws AlfredException, IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        initializeTeams(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File expectedFile \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"ExpectedTeams.csv\").toFile();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String fileName \u003d \"Alfred.csv\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d TestUtil.getFilePathInSandboxFolder(fileName).toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format(ExportTeamCommand.MESSAGE_SUCCESS, filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expectedMessage, new ExportTeamCommand(filePath).execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File outcomeFile \u003d TestUtil.getFilePathInSandboxFolder(fileName).toFile();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        outcomeFile.deleteOnExit();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(FileUtil.hasEqualContents(expectedFile, outcomeFile));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/csvcommand/ImportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.csvcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.csvutil.CsvUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.csvutil.ErrorTracker.Error;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalMentors;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalParticipants;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalTeams;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final File entityCsv \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"ImportEntities.csv\").toFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_validFilePassedIn_success() throws AlfredException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Initialize fields"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        MentorList mentorList \u003d new MentorList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        mentorList.add(TypicalMentors.A);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        mentorList.add(TypicalMentors.B);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        mentorList.add(TypicalMentors.C);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ParticipantList participantList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        participantList.add(TypicalParticipants.A);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        participantList.add(TypicalParticipants.B);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        participantList.add(TypicalParticipants.C);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        TeamList teamList \u003d new TeamList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        teamList.add(TypicalTeams.A);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        teamList.add(TypicalTeams.B);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        teamList.add(TypicalTeams.C);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ImportCommand(entityCsv.getAbsolutePath()).execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(mentorList, model.getMentorList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(participantList, model.getParticipantList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(teamList, model.getTeamList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_nonCsvFilePassedIn_assertionErrorThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File tempFile \u003d TestUtil.getFilePathInSandboxFolder(\"temp.txt\").toFile();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        tempFile.deleteOnExit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new ImportCommand(tempFile.getAbsolutePath()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ImportCommand.ASSERTION_FAILED_NOT_CSV);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_nonexistentFilePassedIn_commandExceptionThrown() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File tempFile \u003d TestUtil.getFilePathInSandboxFolder(\"nonexistent.csv\").toFile();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        tempFile.deleteOnExit();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ImportCommand(tempFile.getAbsolutePath()).execute(model),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ImportCommand.MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_invalidFormattingOfFile_commandExceptionThrownWithErrorTrackerMessage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File tempFile \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"InvalidFormat.csv\").toFile();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expected \u003d String.join("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \"\\n\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ImportCommand.MESSAGE_PARTIAL_SUCCESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new Error(2, \"M,,Alfred^^,+65 12345678,,org,Health\", ImportCommand.CAUSE_INVALID_DATA).toString(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new Error(3, \"P,,,,,,,,,,\", ImportCommand.CAUSE_INVALID_DATA).toString(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new Error(4, \"T,,\", ImportCommand.CAUSE_INVALID_DATA).toString(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new Error(6, \"M,,Alfred,+65 1234,A@mail.com,o1,Health\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "                        ImportCommand.CAUSE_DUPLICATE_ENTITY).toString(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new Error(7, \"IN,,,,,,\", ImportCommand.CAUSE_INVALID_DATA).toString(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ImportCommand.MESSAGE_INVALID_FORMAT"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ImportCommand(tempFile.getAbsolutePath()).execute(model),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "                expected);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_csvFileWithTeamsListedFirst_noExceptionThrown() throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File expectedFile \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"ImportEntities.csv\").toFile();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model actualModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File teamFirstFile \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"TeamFirstValid.csv\").toFile();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expected \u003d new ImportCommand(expectedFile.toString()).execute(expectedModel).getFeedbackToUser();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String actual \u003d new ImportCommand(teamFirstFile.toString()).execute(actualModel).getFeedbackToUser();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_missingEntities_throwsCommandExceptionAndCorrectCauseGiven() throws CommandException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File missingEntity \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"MissingEntity.csv\").toFile();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expected \u003d String.join("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \"\\n\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ImportCommand.MESSAGE_PARTIAL_SUCCESS,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new Error(2, \"T,1,Team A,[P-1],,ENVIRONMENTAL,1,Project Alpha,1\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "                        String.format(CsvUtil.MESSAGE_MISSING_PARTICIPANT, \"P-1\")).toString(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new Error(3, \"T,2,Team B,,M-3,ENVIRONMENTAL,1,Project Alpha,1\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "                        String.format(CsvUtil.MESSAGE_MISSING_MENTOR, \"M-3\")).toString(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ImportCommand.MESSAGE_INVALID_FORMAT"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Executable command \u003d () -\u003e new ImportCommand(missingEntity.toString()).execute(model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(CommandException.class, command, expected);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(new ModelManagerStub(), model);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/csvcommand/csvutil/CsvUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.csvcommand.csvutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.FileUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalMentors;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalParticipants;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalTeams;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class CsvUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private MentorList mentorList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private ParticipantList participantList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private TeamList teamList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes mentor list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private void initializeMentors() throws AlfredException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        mentorList \u003d new MentorList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        mentorList.add(TypicalMentors.A);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        mentorList.add(TypicalMentors.B);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        mentorList.add(TypicalMentors.C);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes participant list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private void initializeParticipants() throws AlfredException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        participantList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        participantList.add(TypicalParticipants.A);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        participantList.add(TypicalParticipants.B);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        participantList.add(TypicalParticipants.C);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes team list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private void initializeTeams() throws AlfredException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        teamList \u003d new TeamList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        teamList.add(TypicalTeams.A);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        teamList.add(TypicalTeams.B);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        teamList.add(TypicalTeams.C);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseToMentor_validParameters_noExceptionThrown() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // EntityType (M), ID (may be blank), Name, Phone, Email, Organization, SubjectName"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] mentorData \u003d new String[] {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"M\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Alfred the Mentor\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"+6512345678\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"alfred@batcave.com\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Bruce Ent.\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Environmental\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertDoesNotThrow(() -\u003e CsvUtil.parseToMentor(mentorData));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseToMentor_invalidParameters_illegalArgumentExceptionThrown() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // EntityType (M), ID (may be blank), Name, Phone, Email, Organization, SubjectName"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidEntityType \u003d new String[] {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"P\", // Should be \"M\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Alfred the Mentor\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"+6512345678\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"alfred@batcave.com\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Bruce Ent.\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Environmental\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToMentor(invalidEntityType));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // If ID is invalid, CsvUtil will generate a valid one"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidName \u003d new String[] {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"M\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Alfred the Mentor^^\", // Name cannot contain special characters other than \",.-\u0027\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"+6512345678\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"alfred@batcave.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Bruce Ent.\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Environmental\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToMentor(invalidName));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidPhone \u003d new String[] {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"M\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Alfred the Mentor\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"+6512345678^^\", // Phone number cannot contain special characters other than \"-. \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"alfred@batcave.com\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Bruce Ent.\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Environmental\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToMentor(invalidPhone));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidEmail \u003d new String[] {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"M\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Alfred the Mentor\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"+6512345678\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"alfred\", // Emails must contain a domain"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Bruce Ent.\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Environmental\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToMentor(invalidEmail));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Organization is skipped because it is a Name object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidSubject \u003d new String[] {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"M\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Alfred the Mentor\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"+6512345678\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"alfred\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Bruce Ent.\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Healthy\" // Should be \"Health\" (or \"HEALTH\"...)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToMentor(invalidSubject));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseToParticipant_validParameters_noExceptionThrown() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // EntityType (P), ID, Name, Phone, Email"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] participantData \u003d new String[] {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"P\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Bruce the Participant\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"+6523456789\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"batman@batcave.com\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertDoesNotThrow(() -\u003e CsvUtil.parseToParticipant(participantData));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseToParticipant_invalidParameters_illegalArgumentExceptionThrown() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // EntityType (P), ID, Name, Phone, Email"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidEntityType \u003d new String[] {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"T\", // Should be \"P\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Bruce the Participant\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"+6523456789\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"batman@batcave.com\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToParticipant(invalidEntityType));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // If ID is invalid, CsvUtil will generate a valid one"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidName \u003d new String[] {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"P\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Bruce the Participant^^\", // Name cannot contain special characters other than \",.-\u0027\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"+6523456789\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"batman@batcave.com\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToParticipant(invalidName));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidPhone \u003d new String[] {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"P\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Bruce the Participant\","
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"+6523456789^^\", // Phone number cannot contain special characters other than \"-. \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"batman@batcave.com\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToParticipant(invalidPhone));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidEmail \u003d new String[] {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"P\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Bruce the Participant\","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"+6523456789\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"batman\" // Emails must contain a domain"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToParticipant(invalidEmail));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseToTeam_validParameters_noExceptionThrown() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // EntityType (T), ID, Name, Participants, Mentor, SubjectName, Score, ProjectName, Location"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] teamData \u003d new String[] {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"T\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Team Batman\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Social\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"100\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Project Cleanup Gotham\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"1\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertDoesNotThrow(() -\u003e CsvUtil.parseToTeam(teamData, model));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseToTeam_invalidParameters_illegalArgumentExceptionThrown() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // EntityType (T), ID, Name, Participants, Mentor, SubjectName, Score, ProjectName, Location"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidEntityType \u003d new String[] {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"M\", // Should be \"T\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Team Batman\","
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Social\","
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"100\","
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Project Cleanup Gotham\","
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"1\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToTeam(invalidEntityType, model));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // If ID is invalid, CsvUtil will generate a valid one"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidName \u003d new String[] {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"T\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Team Batman^^\", // Name cannot contain special characters other than \",.-\u0027\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Social\","
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"100\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Project Cleanup Gotham\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"1\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToTeam(invalidName, model));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidParticipants \u003d new String[] {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"T\","
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Team Batman^^\","
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"[P-1]\", // Participant with ID P-1 does not exist in model"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Social\","
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"100\","
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Project Cleanup Gotham\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"1\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToTeam(invalidParticipants, model));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidMentor \u003d new String[] {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"T\","
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Team Batman^^\","
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"M-1\", // Mentor with ID M-1 does not exist in model"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Social\","
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"100\","
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Project Cleanup Gotham\","
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"1\""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidSubject \u003d new String[] {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"T\","
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Team Batman\","
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Socially\", // Should be one of the enum values"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"100\","
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Project Cleanup Gotham\","
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"1\""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToTeam(invalidSubject, model));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidScore \u003d new String[] {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"T\","
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Team Batman\","
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Social\","
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"1000\", // Should be an integer between 0 and 100"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Project Cleanup Gotham\","
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"1\""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToTeam(invalidScore, model));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // ProjectName is skipped because it is a Name object"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] invalidLocation \u003d new String[] {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"T\","
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Team Batman\","
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Social\","
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"100\","
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"Project Cleanup Gotham\","
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"10000\" // Should be an integer between 0 and 1000"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "john0227"
        },
        "content": "        };"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e CsvUtil.parseToTeam(invalidLocation, model));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void writeToCsv_entityListPassed_correctContentWrittenToFile() throws IOException, AlfredException {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Initialize EntityLists and create a temporary file (to be deleted upon exit)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "john0227"
        },
        "content": "        initializeMentors();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "john0227"
        },
        "content": "        initializeParticipants();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "john0227"
        },
        "content": "        initializeTeams();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File csvFile \u003d new File(TestUtil.getFilePathInSandboxFolder(\"Alfred.csv\").toString());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "john0227"
        },
        "content": "        csvFile.deleteOnExit();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test Mentors"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "john0227"
        },
        "content": "        CsvUtil.writeToCsv(csvFile, this.mentorList, false);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File expectedFile \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"ExpectedMentors.csv\").toFile();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(FileUtil.hasEqualContents(csvFile, expectedFile));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test Participants"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "john0227"
        },
        "content": "        CsvUtil.writeToCsv(csvFile, this.participantList, false);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedFile \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"ExpectedParticipants.csv\").toFile();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(FileUtil.hasEqualContents(csvFile, expectedFile));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test Teams"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "john0227"
        },
        "content": "        CsvUtil.writeToCsv(csvFile, this.teamList, false);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedFile \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"ExpectedTeams.csv\").toFile();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(FileUtil.hasEqualContents(csvFile, expectedFile));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void writeToCsv_shouldAppend_contentAppendedToFile() throws IOException, AlfredException {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Initialize EntityLists and create a temporary file (to be deleted upon exit)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "john0227"
        },
        "content": "        initializeMentors();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "john0227"
        },
        "content": "        initializeParticipants();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "john0227"
        },
        "content": "        initializeTeams();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File csvFile \u003d new File(TestUtil.getFilePathInSandboxFolder(\"Alfred.csv\").toString());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "john0227"
        },
        "content": "        csvFile.deleteOnExit();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test Mentors"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "john0227"
        },
        "content": "        CsvUtil.writeToCsv(csvFile, this.mentorList, false);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "john0227"
        },
        "content": "        CsvUtil.writeToCsv(csvFile, this.mentorList, true);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "john0227"
        },
        "content": "        File expectedFile \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"ExpectedMentorsAppended.csv\").toFile();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(FileUtil.hasEqualContents(csvFile, expectedFile));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test Participants"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "john0227"
        },
        "content": "        CsvUtil.writeToCsv(csvFile, this.participantList, false);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "john0227"
        },
        "content": "        CsvUtil.writeToCsv(csvFile, this.participantList, true);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedFile \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"ExpectedParticipantsAppended.csv\").toFile();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(FileUtil.hasEqualContents(csvFile, expectedFile));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test Teams"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "john0227"
        },
        "content": "        CsvUtil.writeToCsv(csvFile, this.teamList, false);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "john0227"
        },
        "content": "        CsvUtil.writeToCsv(csvFile, this.teamList, true);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedFile \u003d TestUtil.getFilePathInCsvUtilTestFolder(\"ExpectedTeamsAppended.csv\").toFile();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(FileUtil.hasEqualContents(csvFile, expectedFile));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void isCsvHeader_validHeaderPassed_returnTrue() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String validHeader \u003d \"EntityType,ID,Name,Phone,Email,Organization,SubjectName\";"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(CsvUtil.isCsvHeader(validHeader));"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "john0227"
        },
        "content": "        validHeader \u003d \"EntityType, ID ,  Name   , Phone, Email, Organization,SubjectName\";"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(CsvUtil.isCsvHeader(validHeader));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "john0227"
        },
        "content": "        validHeader \u003d \"EntityType, ID ,  NaME   , Phone, EMAil, ORGANIZATION,SubjectName\";"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(CsvUtil.isCsvHeader(validHeader));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "john0227"
        },
        "content": "        validHeader \u003d \"EntityTyPE, ID, Name , Phone,Email\";"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(CsvUtil.isCsvHeader(validHeader));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "john0227"
        },
        "content": "        validHeader \u003d \"EntityType,ID,Name , Participants, MeNTOr,SubjectName,Score,  ProjectName,Location\";"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(CsvUtil.isCsvHeader(validHeader));"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 383
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/csvcommand/csvutil/ErrorTrackerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.csvcommand.csvutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.csvutil.ErrorTracker.Error;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ErrorTrackerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void toString_convertErrorToString_correctStringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Error error \u003d new Error(1, \"What\u0027s wrong?\", \"Alfred is sick\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expected \u003d \"\\tLine 1: What\u0027s wrong? (Cause: Alfred is sick)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expected, error.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void toString_convertErrorTrackerToString_correctStringReturned() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Error error1 \u003d new Error(1, \"What\u0027s wrong?\", \"Alfred is sick\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Error error2 \u003d new Error(2, \"What\u0027s wrong?\", \"Batman is sick\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Error error3 \u003d new Error(3, \"What\u0027s wrong?\", \"Joker is here\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ErrorTracker errorTracker \u003d new ErrorTracker(error1, error2, error3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expected \u003d String.join(\"\\n\", error1.toString(), error2.toString(), error3.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expected, errorTracker.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void toString_differentOrderingOfErrors_sameStringReturned() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Error error1 \u003d new Error(1, \"What\u0027s wrong?\", \"Alfred is sick\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Error error2 \u003d new Error(2, \"What\u0027s wrong?\", \"Batman is sick\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Error error3 \u003d new Error(3, \"What\u0027s wrong?\", \"Joker is here\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ErrorTracker errorTracker \u003d new ErrorTracker(error2, error1, error3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expected \u003d String.join(\"\\n\", error1.toString(), error2.toString(), error3.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expected, errorTracker.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        errorTracker \u003d new ErrorTracker();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        errorTracker.add(error3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        errorTracker.add(error2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        errorTracker.add(error1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expected, errorTracker.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deletecommand/DeleteMentorCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_MENTOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.MentorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DeleteMentorCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_validIndexMentorList_success() throws AlfredException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor mentorToDelete \u003d new MentorBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addMentor(mentorToDelete);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DeleteMentorCommand deleteCommand \u003d new DeleteMentorCommand(mentorToDelete.getId());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "                DeleteMentorCommand.MESSAGE_DELETE_MENTOR_SUCCESS,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "                mentorToDelete"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.addMentor(mentorToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.deleteMentor(mentorToDelete.getId());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_invalidIndexMentorList_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model model \u003d new ModelManagerStub(); // empty model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id outOfBoundId \u003d ID_FIRST_MENTOR;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DeleteMentorCommand deleteCommand \u003d new DeleteMentorCommand(outOfBoundId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "                deleteCommand,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "                DeleteMentorCommand.MESSAGE_INVALID_MENTOR_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deletecommand/DeleteParticipantCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_PARTICIPANT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.ParticipantBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "// TODO: test deleting from Team (later)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DeleteParticipantCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_validIndexParticipantList_success() throws AlfredException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant participantToDelete \u003d new ParticipantBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addParticipant(participantToDelete);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DeleteParticipantCommand deleteCommand \u003d new DeleteParticipantCommand(participantToDelete.getId());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "                DeleteParticipantCommand.MESSAGE_DELETE_PARTICIPANT_SUCCESS,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "                participantToDelete"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.addParticipant(participantToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.deleteParticipant(participantToDelete.getId());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_invalidIndexParticipantList_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model model \u003d new ModelManagerStub(); // empty model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id outOfBoundId \u003d ID_FIRST_PARTICIPANT;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DeleteParticipantCommand deleteCommand \u003d new DeleteParticipantCommand(outOfBoundId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "                deleteCommand,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "                DeleteParticipantCommand.MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deletecommand/DeleteTeamCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_TEAM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TeamBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DeleteTeamCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_validIndexTeamList_success() throws AlfredException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team teamToDelete \u003d new TeamBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addTeam(teamToDelete);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DeleteTeamCommand deleteCommand \u003d new DeleteTeamCommand(teamToDelete.getId());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "                DeleteTeamCommand.MESSAGE_DELETE_TEAM_SUCCESS,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "                teamToDelete"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.addTeam(teamToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.deleteTeam(teamToDelete.getId());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_invalidIndexTeamList_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model model \u003d new ModelManagerStub(); // empty model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id outOfBoundId \u003d ID_FIRST_TEAM;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DeleteTeamCommand deleteCommand \u003d new DeleteTeamCommand(outOfBoundId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "                deleteCommand,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "                DeleteTeamCommand.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/editcommand/EditMentorCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_SECOND_MENTOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditMentorCommand.EditMentorDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.EditMentorDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.MentorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalMentors;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditMentorCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model \u003d new ModelManagerStub(); // create an empty model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_allFieldsSpecifiedMentorList_success() throws AlfredException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor mentorToEdit \u003d new MentorBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addMentor(mentorToEdit);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorDescriptor descriptor \u003d new EditMentorDescriptorBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorCommand editMentorCommand \u003d new EditMentorCommand("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "                mentorToEdit.getId(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "                descriptor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "                EditMentorCommand.MESSAGE_EDIT_MENTOR_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "                mentorToEdit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.addMentor(mentorToEdit);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandSuccess(editMentorCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_someFieldsSpecifiedMentorList_success() throws AlfredException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor mentorToEdit \u003d new MentorBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addMentor(mentorToEdit);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        MentorBuilder mentorInList \u003d new MentorBuilder(mentorToEdit);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor editedMentor \u003d mentorInList.withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorDescriptor descriptor \u003d new EditMentorDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorCommand editMentorCommand \u003d new EditMentorCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "                mentorToEdit.getId(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "                descriptor"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "                EditMentorCommand.MESSAGE_EDIT_MENTOR_SUCCESS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "                editedMentor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.addMentor(editedMentor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandSuccess(editMentorCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_noFieldSpecifiedMentorList_success() throws AlfredException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor editedMentor \u003d new MentorBuilder().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addMentor(editedMentor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorCommand editMentorCommand \u003d new EditMentorCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "                editedMentor.getId(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new EditMentorDescriptor()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "                EditMentorCommand.MESSAGE_EDIT_MENTOR_SUCCESS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "                editedMentor"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.addMentor(editedMentor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandSuccess(editMentorCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_duplicateMentor_failure() throws AlfredException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor firstPerson \u003d TypicalMentors.A;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor secondPerson \u003d TypicalMentors.B;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addMentor(firstPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addMentor(secondPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorDescriptor descriptor \u003d new EditMentorDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorCommand editMentorCommand \u003d new EditMentorCommand(secondPerson.getId(), descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandFailure(editMentorCommand, model, MentorList.SIMILAR_MENTOR_MSG);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() throws AlfredException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor validMentor \u003d new MentorBuilder().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addMentor(validMentor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorDescriptor descriptor \u003d new EditMentorDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorCommand editMentorCommand \u003d new EditMentorCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ID_SECOND_MENTOR,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "                descriptor"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "                editMentorCommand,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "                EditMentorCommand.MESSAGE_INVALID_MENTOR_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/editcommand/EditMentorDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MENTOR_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MENTOR_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORGANIZATION_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditMentorCommand.EditMentorDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.EditMentorDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditMentorDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorDescriptor descriptorWithSameValues \u003d new EditMentorDescriptor(MENTOR_DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(MENTOR_DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(MENTOR_DESC_AMY.equals(MENTOR_DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(MENTOR_DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(MENTOR_DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(MENTOR_DESC_AMY.equals(MENTOR_DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorDescriptor editedAmy \u003d new EditMentorDescriptorBuilder(MENTOR_DESC_AMY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(MENTOR_DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        editedAmy \u003d new EditMentorDescriptorBuilder(MENTOR_DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(MENTOR_DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        editedAmy \u003d new EditMentorDescriptorBuilder(MENTOR_DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(MENTOR_DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different organization -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        editedAmy \u003d new EditMentorDescriptorBuilder(MENTOR_DESC_AMY).withOrganization(VALID_ORGANIZATION_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(MENTOR_DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different subject name -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        editedAmy \u003d new EditMentorDescriptorBuilder(MENTOR_DESC_AMY).withSubject(VALID_SUBJECT_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(MENTOR_DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/editcommand/EditParticipantCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_SECOND_PARTICIPANT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditParticipantCommand.EditParticipantDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.EditParticipantDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.ParticipantBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalParticipants;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditParticipantCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model \u003d new ModelManagerStub(); // create an empty model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_allFieldsSpecifiedParticipantList_success() throws AlfredException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant participantToEdit \u003d new ParticipantBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addParticipant(participantToEdit);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantDescriptor descriptor \u003d new EditParticipantDescriptorBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantCommand editParticipantCommand \u003d new EditParticipantCommand("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "                participantToEdit.getId(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "                descriptor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "                EditParticipantCommand.MESSAGE_EDIT_PARTICIPANT_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "                participantToEdit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.addParticipant(participantToEdit);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandSuccess(editParticipantCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_someFieldsSpecifiedParticipantList_success() throws AlfredException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant participantToEdit \u003d new ParticipantBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addParticipant(participantToEdit);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ParticipantBuilder participantInList \u003d new ParticipantBuilder(participantToEdit);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant editedParticipant \u003d participantInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantDescriptor descriptor \u003d new EditParticipantDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantCommand editParticipantCommand \u003d new EditParticipantCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "                participantToEdit.getId(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "                descriptor"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "                EditParticipantCommand.MESSAGE_EDIT_PARTICIPANT_SUCCESS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "                editedParticipant"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.addParticipant(editedParticipant);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandSuccess(editParticipantCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_noFieldSpecifiedParticipantList_success() throws AlfredException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant editedParticipant \u003d new ParticipantBuilder().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addParticipant(editedParticipant);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantCommand editParticipantCommand \u003d new EditParticipantCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "                editedParticipant.getId(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new EditParticipantDescriptor()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "                EditParticipantCommand.MESSAGE_EDIT_PARTICIPANT_SUCCESS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "                editedParticipant"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.addParticipant(editedParticipant);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandSuccess(editParticipantCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_duplicateParticipant_failure() throws AlfredException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant firstPerson \u003d TypicalParticipants.A;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant secondPerson \u003d TypicalParticipants.B;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addParticipant(firstPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addParticipant(secondPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantDescriptor descriptor \u003d new EditParticipantDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantCommand editParticipantCommand \u003d new EditParticipantCommand(secondPerson.getId(), descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandFailure(editParticipantCommand, model, ParticipantList.SIMILAR_PARTICIPANT_MSG);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() throws AlfredException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant validParticipant \u003d new ParticipantBuilder().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addParticipant(validParticipant);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantDescriptor descriptor \u003d new EditParticipantDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantCommand editParticipantCommand \u003d new EditParticipantCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ID_SECOND_PARTICIPANT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "                descriptor"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "                editParticipantCommand,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "                EditParticipantCommand.MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/editcommand/EditParticipantDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARTICIPANT_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARTICIPANT_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditParticipantCommand.EditParticipantDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.EditParticipantDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditParticipantDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantDescriptor descriptorWithSameValues \u003d new EditParticipantDescriptor(PARTICIPANT_DESC_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(PARTICIPANT_DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(PARTICIPANT_DESC_AMY.equals(PARTICIPANT_DESC_AMY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(PARTICIPANT_DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(PARTICIPANT_DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(PARTICIPANT_DESC_AMY.equals(PARTICIPANT_DESC_BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantDescriptor editedAmy \u003d new EditParticipantDescriptorBuilder(PARTICIPANT_DESC_AMY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(PARTICIPANT_DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        editedAmy \u003d new EditParticipantDescriptorBuilder(PARTICIPANT_DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(PARTICIPANT_DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        editedAmy \u003d new EditParticipantDescriptorBuilder(PARTICIPANT_DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(PARTICIPANT_DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/editcommand/EditTeamCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BRUCE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_BRUCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_SECOND_TEAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditTeamCommand.EditTeamDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.EditTeamDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TeamBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalTeams;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditTeamCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model \u003d new ModelManagerStub(); // create an empty model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_allFieldsSpecifiedTeamList_success() throws AlfredException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team teamToEdit \u003d new TeamBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addTeam(teamToEdit);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamDescriptor descriptor \u003d new EditTeamDescriptorBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamCommand editTeamCommand \u003d new EditTeamCommand("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "                teamToEdit.getId(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "                descriptor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "                EditTeamCommand.MESSAGE_EDIT_TEAM_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "                teamToEdit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.addTeam(teamToEdit);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandSuccess(editTeamCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_someFieldsSpecifiedTeamList_success() throws AlfredException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team teamToEdit \u003d new TeamBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addTeam(teamToEdit);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        TeamBuilder teamInList \u003d new TeamBuilder(teamToEdit);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team editedTeam \u003d teamInList.withName(VALID_NAME_BRUCE).withProjectName(VALID_PROJECT_NAME_BRUCE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamDescriptor descriptor \u003d new EditTeamDescriptorBuilder().withName(VALID_NAME_BRUCE)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withProjectName(VALID_PROJECT_NAME_BRUCE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamCommand editTeamCommand \u003d new EditTeamCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "                teamToEdit.getId(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "                descriptor"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "                EditTeamCommand.MESSAGE_EDIT_TEAM_SUCCESS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "                editedTeam"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.addTeam(editedTeam);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandSuccess(editTeamCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_noFieldSpecifiedTeamList_success() throws AlfredException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team editedTeam \u003d new TeamBuilder().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addTeam(editedTeam);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamCommand editTeamCommand \u003d new EditTeamCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "                editedTeam.getId(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new EditTeamDescriptor()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "                EditTeamCommand.MESSAGE_EDIT_TEAM_SUCCESS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "                editedTeam"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel.addTeam(editedTeam);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandSuccess(editTeamCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_duplicateTeam_failure() throws AlfredException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team firstPerson \u003d TypicalTeams.A;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team secondPerson \u003d TypicalTeams.B;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addTeam(firstPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addTeam(secondPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamDescriptor descriptor \u003d new EditTeamDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamCommand editTeamCommand \u003d new EditTeamCommand(secondPerson.getId(), descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandFailure(editTeamCommand, model, TeamList.SIMILAR_TEAM_MSG);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() throws AlfredException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team validTeam \u003d new TeamBuilder().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.addTeam(validTeam);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamDescriptor descriptor \u003d new EditTeamDescriptorBuilder().withName(VALID_NAME_BRUCE).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamCommand editTeamCommand \u003d new EditTeamCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ID_SECOND_TEAM,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "                descriptor"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "                editTeamCommand,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "                EditTeamCommand.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/editcommand/EditTeamDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TEAM_DESC_ALFRED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TEAM_DESC_BRUCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BRUCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BRUCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_BRUCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCORE_BRUCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BRUCE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditTeamCommand.EditTeamDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.EditTeamDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TYPE_BRUCE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditTeamDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamDescriptor descriptorWithSameValues \u003d new EditTeamDescriptor(TEAM_DESC_ALFRED);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(TEAM_DESC_ALFRED.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(TEAM_DESC_ALFRED.equals(TEAM_DESC_ALFRED));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(TEAM_DESC_ALFRED.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(TEAM_DESC_ALFRED.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(TEAM_DESC_ALFRED.equals(TEAM_DESC_BRUCE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamDescriptor editedAlfred \u003d new EditTeamDescriptorBuilder(TEAM_DESC_ALFRED)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withName(VALID_NAME_BRUCE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(TEAM_DESC_ALFRED.equals(editedAlfred));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different subject -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        editedAlfred \u003d new EditTeamDescriptorBuilder(TEAM_DESC_ALFRED).withSubject(VALID_SUBJECT_BRUCE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(TEAM_DESC_ALFRED.equals(editedAlfred));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different score -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        editedAlfred \u003d new EditTeamDescriptorBuilder(TEAM_DESC_ALFRED).withScore(VALID_SCORE_BRUCE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(TEAM_DESC_ALFRED.equals(editedAlfred));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different project name -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        editedAlfred \u003d new EditTeamDescriptorBuilder(TEAM_DESC_ALFRED)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withProjectName(VALID_PROJECT_NAME_BRUCE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(TEAM_DESC_ALFRED.equals(editedAlfred));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        editedAlfred \u003d new EditTeamDescriptorBuilder(TEAM_DESC_ALFRED)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withLocation(VALID_LOCATION_BRUCE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertFalse(TEAM_DESC_ALFRED.equals(editedAlfred));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/historycommand/HistoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.logic.commands.historycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class HistoryCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ModelManagerStub modelStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        modelStub \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void execute_success() throws AlfredException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        CommandResult commandResult \u003d new HistoryCommand().execute(modelStub);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(HistoryCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(CommandType.H, commandResult.getCommandType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/historycommand/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.logic.commands.historycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class RedoCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ModelManagerStub modelStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        modelStub \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void execute_success() throws AlfredException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        CommandResult commandResult \u003d new RedoCommand().execute(modelStub);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(RedoCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(CommandType.H, commandResult.getCommandType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/historycommand/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.logic.commands.historycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.CommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class UndoCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ModelManagerStub modelStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        modelStub \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void execute_success() throws AlfredException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        CommandResult commandResult \u003d new UndoCommand().execute(modelStub);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(UndoCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(CommandType.H, commandResult.getCommandType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/listcommand/ListMentorCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalMentors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListMentorCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String NEW_LINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final ByteArrayOutputStream modelOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final ByteArrayOutputStream expectedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final PrintStream modelPrintStream \u003d new PrintStream(modelOut);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final PrintStream expectedPrintStream \u003d new PrintStream(expectedOut);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void setUp() throws AlfredException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (Mentor p : TypicalMentors.getTypicalMentors()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "            model.addMentor(p);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "            expectedModel.addMentor(p);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_emptyMentorList_displayDefaultMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model emptyModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ListMentorCommand of emptyModel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(modelPrintStream);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ListMentorCommand().execute(emptyModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output \u003d modelOut.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedOutput \u003d ListMentorCommand.MESSAGE_NO_MENTOR + NEW_LINE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test and reset OutStream"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOut.reset();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_twoEqualModelsToBeListed_showsSameList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ListMentorCommand of model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(modelPrintStream);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ListMentorCommand().execute(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output1 \u003d modelOut.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ListMentorCommand of expectedModel"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(expectedPrintStream);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ListMentorCommand().execute(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output2 \u003d expectedOut.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test and reset OutStream"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(output1, output2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOut.reset();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedOut.reset();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/listcommand/ListParticipantCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalParticipants;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListParticipantCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String NEW_LINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final ByteArrayOutputStream modelOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final ByteArrayOutputStream expectedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final PrintStream modelPrintStream \u003d new PrintStream(modelOut);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final PrintStream expectedPrintStream \u003d new PrintStream(expectedOut);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void setUp() throws AlfredException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (Participant p : TypicalParticipants.getTypicalParticipants()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "            model.addParticipant(p);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "            expectedModel.addParticipant(p);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_emptyParticipantList_displayDefaultMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model emptyModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ListParticipantCommand of emptyModel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(modelPrintStream);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ListParticipantCommand().execute(emptyModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output \u003d modelOut.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedOutput \u003d ListParticipantCommand.MESSAGE_NO_PARTICIPANT + NEW_LINE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test and reset OutStream"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOut.reset();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_twoEqualModelsToBeListed_showsSameList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ListParticipantCommand of model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(modelPrintStream);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ListParticipantCommand().execute(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output1 \u003d modelOut.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ListParticipantCommand of expectedModel"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(expectedPrintStream);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ListParticipantCommand().execute(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output2 \u003d expectedOut.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test and reset OutStream"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(output1, output2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOut.reset();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedOut.reset();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/listcommand/ListTeamCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalTeams;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListTeamCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String NEW_LINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final ByteArrayOutputStream modelOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final ByteArrayOutputStream expectedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final PrintStream modelPrintStream \u003d new PrintStream(modelOut);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final PrintStream expectedPrintStream \u003d new PrintStream(expectedOut);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void setUp() throws AlfredException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (Team p : TypicalTeams.getTypicalTeams()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "            model.addTeam(p);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "            expectedModel.addTeam(p);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_emptyTeamList_displayDefaultMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model emptyModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ListTeamCommand of emptyModel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(modelPrintStream);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ListTeamCommand().execute(emptyModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output \u003d modelOut.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedOutput \u003d ListTeamCommand.MESSAGE_NO_TEAM + NEW_LINE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test and reset OutStream"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOut.reset();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_twoEqualModelsToBeListed_showsSameList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ListTeamCommand of model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(modelPrintStream);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ListTeamCommand().execute(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output1 \u003d modelOut.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ListTeamCommand of expectedModel"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(expectedPrintStream);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ListTeamCommand().execute(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output2 \u003d expectedOut.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test and reset OutStream"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(output1, output2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOut.reset();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedOut.reset();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/viewcommand/ViewMentorCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_MENTOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_SECOND_MENTOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.MentorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ViewMentorCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String NEW_LINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model modelOneMentor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model expectedOneMentor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Mentor mentorToView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final ByteArrayOutputStream modelOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final ByteArrayOutputStream expectedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final PrintStream modelPrintStream \u003d new PrintStream(modelOut);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final PrintStream expectedPrintStream \u003d new PrintStream(expectedOut);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void setup() throws AlfredException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.mentorToView \u003d new MentorBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOneMentor \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOneMentor.addMentor(mentorToView);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedOneMentor \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedOneMentor.addMentor(mentorToView);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_emptyModel_throwCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model emptyModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Executable viewMentorCommand \u003d () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ViewMentorCommand(ID_FIRST_MENTOR).execute(emptyModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "                CommandException.class,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "                viewMentorCommand,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ViewMentorCommand.MESSAGE_INVALID_MENTOR_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_invalidId_throwCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Executable viewMentorCommand \u003d () -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ViewMentorCommand(ID_SECOND_MENTOR).execute(modelOneMentor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "                CommandException.class,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "                viewMentorCommand,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ViewMentorCommand.MESSAGE_INVALID_MENTOR_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_validParameters_success() throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ViewMentorCommand of modelOneMentor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(modelPrintStream);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ViewMentorCommand(this.mentorToView.getId()).execute(modelOneMentor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output \u003d modelOut.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Configure correct output"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedOutput \u003d new StringBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(String.format(\"Viewing %s%s\", this.mentorToView.getName(), NEW_LINE))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(String.format(\"\\t%s%s\", this.mentorToView.toString(), NEW_LINE))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test and reset OutputStream"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOut.reset();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_modelWithSameMentor_sameOutput() throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ViewMentorCommand of modelOneMentor"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(modelPrintStream);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ViewMentorCommand(this.mentorToView.getId()).execute(modelOneMentor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output1 \u003d modelOut.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ViewMentorCommand of expectedOneMentor"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(expectedPrintStream);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ViewMentorCommand(this.mentorToView.getId()).execute(expectedOneMentor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output2 \u003d expectedOut.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test and reset OutputStreams"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(output1, output2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOut.reset();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedOut.reset();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/viewcommand/ViewParticipantCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_PARTICIPANT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_SECOND_PARTICIPANT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.ParticipantBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ViewParticipantCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String NEW_LINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model modelOneParticipant;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model expectedOneParticipant;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Participant participantToView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final ByteArrayOutputStream modelOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final ByteArrayOutputStream expectedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final PrintStream modelPrintStream \u003d new PrintStream(modelOut);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final PrintStream expectedPrintStream \u003d new PrintStream(expectedOut);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void setup() throws AlfredException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.participantToView \u003d new ParticipantBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOneParticipant \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOneParticipant.addParticipant(participantToView);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedOneParticipant \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedOneParticipant.addParticipant(participantToView);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_emptyModel_throwCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model emptyModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Executable viewParticipantCommand \u003d () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ViewParticipantCommand(ID_FIRST_PARTICIPANT).execute(emptyModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "                CommandException.class,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "                viewParticipantCommand,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ViewParticipantCommand.MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_invalidId_throwCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Executable viewParticipantCommand \u003d () -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ViewParticipantCommand(ID_SECOND_PARTICIPANT).execute(modelOneParticipant);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "                CommandException.class,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "                viewParticipantCommand,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ViewParticipantCommand.MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_validParameters_success() throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ViewParticipantCommand of modelOneParticipant"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(modelPrintStream);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ViewParticipantCommand(this.participantToView.getId()).execute(modelOneParticipant);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output \u003d modelOut.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Configure correct output"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedOutput \u003d new StringBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(String.format(\"Viewing %s%s\", this.participantToView.getName(), NEW_LINE))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(String.format(\"\\t%s%s\", this.participantToView.toString(), NEW_LINE))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test and reset OutputStream"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOut.reset();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_modelWithSameParticipant_sameOutput() throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ViewParticipantCommand of modelOneParticipant"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(modelPrintStream);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ViewParticipantCommand(this.participantToView.getId()).execute(modelOneParticipant);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output1 \u003d modelOut.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ViewParticipantCommand of expectedOneParticipant"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(expectedPrintStream);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ViewParticipantCommand(this.participantToView.getId()).execute(expectedOneParticipant);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output2 \u003d expectedOut.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test and reset OutputStreams"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(output1, output2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOut.reset();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedOut.reset();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/viewcommand/ViewTeamCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_TEAM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_SECOND_TEAM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.stub.ModelManagerStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TeamBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ViewTeamCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String NEW_LINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model modelOneTeam;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Model expectedOneTeam;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Team teamToView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final ByteArrayOutputStream modelOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final ByteArrayOutputStream expectedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final PrintStream modelPrintStream \u003d new PrintStream(modelOut);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final PrintStream expectedPrintStream \u003d new PrintStream(expectedOut);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void setup() throws AlfredException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.teamToView \u003d new TeamBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOneTeam \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOneTeam.addTeam(teamToView);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedOneTeam \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedOneTeam.addTeam(teamToView);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_emptyModel_throwCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Model emptyModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Executable viewTeamCommand \u003d () -\u003e new ViewTeamCommand(ID_FIRST_TEAM).execute(emptyModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "                CommandException.class,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "                viewTeamCommand,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ViewTeamCommand.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_invalidId_throwCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Executable viewTeamCommand \u003d () -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ViewTeamCommand(ID_SECOND_TEAM).execute(modelOneTeam);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "                CommandException.class,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "                viewTeamCommand,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "                ViewTeamCommand.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_validParameters_success() throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ViewTeamCommand of modelOneTeam"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(modelPrintStream);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ViewTeamCommand(this.teamToView.getId()).execute(modelOneTeam);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output \u003d modelOut.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Configure correct output"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String expectedOutput \u003d new StringBuilder()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(String.format(\"Viewing %s%s\", this.teamToView.getName(), NEW_LINE))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .append(String.format(\"\\t%s%s\", this.teamToView.toString(), NEW_LINE))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test and reset OutputStream"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOut.reset();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void execute_modelWithSameTeam_sameOutput() throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ViewTeamCommand of modelOneTeam"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(modelPrintStream);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ViewTeamCommand(this.teamToView.getId()).execute(modelOneTeam);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output1 \u003d modelOut.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Collect console output of ViewTeamCommand of expectedOneTeam"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.setOut(expectedPrintStream);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "        new ViewTeamCommand(this.teamToView.getId()).execute(expectedOneTeam);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String output2 \u003d expectedOut.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Test and reset OutputStreams"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(output1, output2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        modelOut.reset();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedOut.reset();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AlfredParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_MENTOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MENTOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TEAM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PARTICIPANT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddTeamCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteMentorCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteParticipantCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteTeamCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditMentorCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditMentorCommand.EditMentorDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListMentorCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListParticipantCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListTeamCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewMentorCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewParticipantCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewTeamCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.EditMentorDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.MentorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.MentorUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TeamBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TeamUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AlfredParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String LIST_MENTOR_KEYWORD \u003d \"mentors\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String LIST_PARTICIPANT_KEYWORD \u003d \"participants\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String LIST_TEAM_KEYWORD \u003d \"teams\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final AlfredParser parser \u003d new AlfredParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        TeamList.setLastUsedId(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Testing adding a new team."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team team \u003d new TeamBuilder().withScore(0).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        AddTeamCommand addTeamCommand \u003d (AddTeamCommand) parser.parseCommand(TeamUtil.getAddCommand(team));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(new AddTeamCommand(team), addTeamCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Checking if delete team is called appropriately."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DeleteTeamCommand deleteTeamCommand \u003d (DeleteTeamCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "                DeleteTeamCommand.COMMAND_WORD + \" team \" + INDEX_FIRST_TEAM.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(new DeleteTeamCommand(INDEX_FIRST_TEAM), deleteTeamCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Checking if delete participant is called appropriately."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DeleteParticipantCommand deleteParticipantCommand \u003d (DeleteParticipantCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "                DeleteParticipantCommand.COMMAND_WORD + \" participant \" + INDEX_THIRD_PARTICIPANT.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(new DeleteParticipantCommand(INDEX_THIRD_PARTICIPANT), deleteParticipantCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Checking if delete mentor is called appropriately."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "        DeleteMentorCommand deleteMentorCommand \u003d (DeleteMentorCommand) parser.parseCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "                DeleteMentorCommand.COMMAND_WORD + \" mentor \" + INDEX_FIRST_MENTOR.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(new DeleteMentorCommand(INDEX_FIRST_MENTOR), deleteMentorCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Checking if parse mentor command is called appropriately."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor mentor \u003d new MentorBuilder().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorDescriptor mentorDescriptor \u003d new EditMentorDescriptorBuilder(mentor).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorCommand command \u003d (EditMentorCommand) parser"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .parseCommand(EditMentorCommand.COMMAND_WORD + \" mentor \" + mentor.getId().toString()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + \" \" + MentorUtil.getEditMentorDescriptorDetails(mentorDescriptor));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(new EditMentorCommand(ID_FIRST_MENTOR, mentorDescriptor), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(parser.parseCommand(ListMentorCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + LIST_MENTOR_KEYWORD) instanceof ListMentorCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(parser.parseCommand(ListTeamCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + LIST_TEAM_KEYWORD) instanceof ListTeamCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(parser.parseCommand(ListParticipantCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + LIST_PARTICIPANT_KEYWORD) instanceof ListParticipantCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseCommand_view() throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ViewTeamCommand viewTeam \u003d new ViewTeamCommand(INDEX_FIRST_TEAM);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ViewMentorCommand viewMentor \u003d new ViewMentorCommand(INDEX_FIRST_MENTOR);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ViewParticipantCommand viewParticipant \u003d new ViewParticipantCommand(INDEX_THIRD_PARTICIPANT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(viewTeam, parser.parseCommand(ViewTeamCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + \" \" + INDEX_FIRST_TEAM.toString()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(viewMentor, parser.parseCommand(ViewMentorCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + \" \" + INDEX_FIRST_MENTOR.toString()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(viewParticipant, parser.parseCommand(ViewParticipantCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + \" \" + INDEX_THIRD_PARTICIPANT.toString()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AlfredParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AlfredParserUtilTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"xxx1234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String VALID_PHONE \u003d \"98123456\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String VALID_LOCATION_STRING \u003d \"20\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String INVALID_LOCATION_STRING \u003d \"Table 20\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final int VALID_LOCATION_INT \u003d 20;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String VALID_SUBJECT_1 \u003d \"Social\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String VALID_SUBJECT_2 \u003d \"Environmental\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String INVALID_SUBJECT \u003d \"Cat\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String SAMPLE_VALID_COMMAND1 \u003d \"participant P-1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String SAMPLE_VALID_COMMAND1_SPECIFIER \u003d \"participant\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String SAMPLE_VALID_COMMAND1_ARGUMENT \u003d \" P-1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String SAMPLE_INVALID_COMMAND \u003d \" \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Index is just a number without a prefix."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parseIndex(\"10\", PrefixType.M));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Prefix without index."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parseIndex(\"M\", PrefixType.M));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Empty Index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parseIndex(\" \", PrefixType.M));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // The index has a valid format and prefix, but is out of the range of integer."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(ParseException.class, Messages.MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "            -\u003e AlfredParserUtil.parseIndex(\"M\" + Long.toString(Integer.MAX_VALUE + 1), PrefixType.M));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id indexToTest \u003d new Id(PrefixType.M, 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(indexToTest, AlfredParserUtil.parseIndex(\"M-1\", PrefixType.M));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(indexToTest, AlfredParserUtil.parseIndex(\"  M-1  \", PrefixType.M));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void parseIndex_correctIndexFormat_noExceptionThrown() throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id id1 \u003d new Id(PrefixType.P, 2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id id2 \u003d new Id(PrefixType.M, 9);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id id3 \u003d new Id(PrefixType.T, 24);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(id1, AlfredParserUtil.parseIndex(\"P-2\", PrefixType.P));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(id2, AlfredParserUtil.parseIndex(\"M-9\", PrefixType.M));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(id3, AlfredParserUtil.parseIndex(\"T-24\", PrefixType.T));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void parseIndex_incorrectIndexFormat_parseExceptionThrown() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(ParseException.class, Messages.MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "            -\u003e AlfredParserUtil.parseIndex(\"P2\", PrefixType.P));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AlfredParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(expectedName, AlfredParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(expectedName, AlfredParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AlfredParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(expectedPhone, AlfredParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(expectedPhone, AlfredParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AlfredParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(expectedEmail, AlfredParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(expectedEmail, AlfredParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseLocation_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AlfredParserUtil.parseLocation((String) null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void parseLocation_validLocationWithoutWhiteSpace_returnsLocation() throws ParseException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Location expectedLocation \u003d new Location(VALID_LOCATION_INT);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expectedLocation, AlfredParserUtil.parseLocation(VALID_LOCATION_STRING));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void parseLocation_validLocationWithWhiteSpace_returnsLocation() throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Location expectedLocation \u003d new Location(VALID_LOCATION_INT);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String locationWithSpace \u003d WHITESPACE + VALID_LOCATION_STRING + WHITESPACE;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(expectedLocation, AlfredParserUtil.parseLocation(locationWithSpace));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void parseLocation_invalidLocation_throwsParseException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Input string does not represent an integer - word table included."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parseLocation(INVALID_LOCATION_STRING));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Table number above valid range"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parseLocation(\"1001\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Table number below valid range"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parseLocation(\"-1\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parseSubject_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AlfredParserUtil.parseSubject((String) null));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void parseSubjectName_validSubjectName_subjectEnumReturned() throws ParseException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(SubjectName.SOCIAL, AlfredParserUtil.parseSubject(VALID_SUBJECT_1));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(SubjectName.ENVIRONMENTAL, AlfredParserUtil.parseSubject(VALID_SUBJECT_2));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void parseSubjectName_validSubjectNameWithWhiteSpace_subjectEnumReturned() throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(SubjectName.SOCIAL, AlfredParserUtil.parseSubject(WHITESPACE + VALID_SUBJECT_1 + WHITESPACE));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(SubjectName.ENVIRONMENTAL,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "john0227"
        },
        "content": "                AlfredParserUtil.parseSubject(WHITESPACE + VALID_SUBJECT_2 + WHITESPACE));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void parseSubject_invalidSubject_throwsParseException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parseSubject(INVALID_SUBJECT));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void getSpecifierFromCommand_validCommand_specifierReturned() throws ParseException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(SAMPLE_VALID_COMMAND1_SPECIFIER, AlfredParserUtil.getSpecifierFromCommand(SAMPLE_VALID_COMMAND1));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void getSpecifierFromCommand_invalidCommand_parseExceptionThrown() throws ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.getSpecifierFromCommand(SAMPLE_INVALID_COMMAND));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void getArgumentsFromCommand_validCommand_argumentsReturned() throws ParseException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertEquals(SAMPLE_VALID_COMMAND1_ARGUMENT, AlfredParserUtil.getArgumentsFromCommand(SAMPLE_VALID_COMMAND1));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "john0227"
        },
        "content": "    void getArgumentFromCommand_invalidCommand_parseExceptionThrown() throws ParseException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.getArgumentsFromCommand(SAMPLE_INVALID_COMMAND));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 130,
      "john0227": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandAllocatorTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Contains helper methods for testing command allocators."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class CommandAllocatorTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Asserts that the allocation of {@code userInput} by the {@code CommandAllocator} is successful and the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * right parser is called and the command created equals to {@code expectedCommand}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void assertAllocatorSuccess(CommandAllocator commandAllocator, String userInput,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                                              Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            Command command \u003d commandAllocator.allocate(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Asserts that the allocation of {@code userInput} by the {@code CommandAllocator} is unsuccessful"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and the error message equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void assertAllocatorFailure(CommandAllocator commandAllocator, String userInput,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                                              String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            commandAllocator.allocate(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/addcommandparser/AddCommandAllocatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_BRUCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BRUCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORGANIZATION_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_NAME_DESC_BRUCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BRUCE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandAllocatorTestUtil.assertAllocatorFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandAllocatorTestUtil.assertAllocatorSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.testutil.TypicalMentors.BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.testutil.TypicalTeams.BRUCE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddMentorCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddParticipantCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddTeamCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.testutil.MentorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.testutil.ParticipantBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.testutil.TeamBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.testutil.TypicalParticipants;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "class AddCommandAllocatorTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private AddCommandAllocator addCommandAllocator \u003d new AddCommandAllocator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void allocate_correctUserInput_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Mentor expectedMentor \u003d new MentorBuilder(BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Participant expectedParticipant \u003d new ParticipantBuilder(TypicalParticipants.BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Team expectedTeam \u003d new TeamBuilder(BRUCE).withScore(0).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorSuccess(addCommandAllocator, \"mentor \" + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + EMAIL_DESC_BOB + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB, new AddMentorCommand(expectedMentor));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorSuccess(addCommandAllocator, \"participant \" + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + EMAIL_DESC_BOB, new AddParticipantCommand(expectedParticipant));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorSuccess(addCommandAllocator, \"team \" + NAME_DESC_BRUCE + LOCATION_DESC_BRUCE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + PROJECT_NAME_DESC_BRUCE + SUBJECT_DESC_BRUCE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                new AddTeamCommand(expectedTeam));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void allocate_missingUserArgument_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Entity name not mentioned"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorFailure(addCommandAllocator, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + EMAIL_DESC_BOB + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Entity description fields not mentioned"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorFailure(addCommandAllocator, \"team\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTeamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // User input is empty - entity nor its fields mentioned"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorFailure(addCommandAllocator, \"\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 71,
      "john0227": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/addcommandparser/AddMentorCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORGANISATION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORGANIZATION_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORGANIZATION_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORGANIZATION_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.testutil.TypicalMentors.BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddMentorCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.testutil.MentorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "class AddMentorCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private AddMentorCommandParser parser \u003d new AddMentorCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        MentorList.setLastUsedId(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor expectedMentor \u003d new MentorBuilder(BOB).withId(1).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor expectedMentor2 \u003d new MentorBuilder(BOB).withId(2).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor expectedMentor3 \u003d new MentorBuilder(BOB).withId(3).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor expectedMentor4 \u003d new MentorBuilder(BOB).withId(4).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor expectedMentor5 \u003d new MentorBuilder(BOB).withId(5).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor expectedMentor6 \u003d new MentorBuilder(BOB).withId(6).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB, new AddMentorCommand(expectedMentor));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB, new AddMentorCommand(expectedMentor2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB, new AddMentorCommand(expectedMentor3));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB, new AddMentorCommand(expectedMentor4));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // multiple subjects - last subject accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + SUBJECT_DESC_AMY"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB, new AddMentorCommand(expectedMentor5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // multiple organizations - last organization accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ORGANIZATION_DESC_AMY"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB, new AddMentorCommand(expectedMentor6));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void parse_compulsoryFieldsMissing_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMentorCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Missing Name prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Missing Phone Number prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Missing Email Prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Missing Subject prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + VALID_SUBJECT_BOB + ORGANIZATION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Missing  Organization prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + SUBJECT_DESC_BOB + VALID_ORGANIZATION_BOB, expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // All prefixes missing"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + VALID_SUBJECT_BOB + VALID_ORGANIZATION_BOB, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid Name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid Phone Number"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid Email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid Subject"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + INVALID_SUBJECT_DESC + ORGANIZATION_DESC_BOB, SubjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid Organization"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + SUBJECT_DESC_BOB + INVALID_ORGANISATION_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + SUBJECT_DESC_BOB + ORGANIZATION_DESC_BOB,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMentorCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 129,
      "john0227": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/addcommandparser/AddParticipantCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.testutil.TypicalParticipants.BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddParticipantCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.testutil.ParticipantBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "class AddParticipantCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private AddParticipantCommandParser parser \u003d new AddParticipantCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ParticipantList.setLastUsedId(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Expected participants with different IDs as IDs increment with each added participant."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant expectedParticipant1 \u003d new ParticipantBuilder(BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant expectedParticipant2 \u003d new ParticipantBuilder(BOB).withId(2).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant expectedParticipant3 \u003d new ParticipantBuilder(BOB).withId(3).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant expectedParticipant4 \u003d new ParticipantBuilder(BOB).withId(4).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new AddParticipantCommand(expectedParticipant1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new AddParticipantCommand(expectedParticipant2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new AddParticipantCommand(expectedParticipant3));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new AddParticipantCommand(expectedParticipant4));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void parse_compulsoryFieldsMissing_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddParticipantCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Missing Name prefix"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Missing Phone Number prefix"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Missing Email Prefix"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // All prefixes missing"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB, expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid Name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid Phone Number"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid Email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_PHONE_DESC + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddParticipantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 92,
      "john0227": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/addcommandparser/AddTeamCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROJECT_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_ALFRED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_BRUCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALFRED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BRUCE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_NAME_DESC_ALFRED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_NAME_DESC_BRUCE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_ALFRED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BRUCE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BRUCE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BRUCE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_BRUCE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BRUCE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.testutil.TypicalTeams.BRUCE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddTeamCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.testutil.TeamBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "class AddTeamCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private AddTeamCommandParser parser \u003d new AddTeamCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        TeamList.setLastUsedId(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Team expectedTeam \u003d new TeamBuilder(BRUCE).withScore(0).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team expectedTeam2 \u003d new TeamBuilder(BRUCE).withScore(0).withId(2).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team expectedTeam3 \u003d new TeamBuilder(BRUCE).withScore(0).withId(3).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team expectedTeam4 \u003d new TeamBuilder(BRUCE).withScore(0).withId(4).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team expectedTeam5 \u003d new TeamBuilder(BRUCE).withScore(0).withId(5).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BRUCE + LOCATION_DESC_BRUCE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + PROJECT_NAME_DESC_BRUCE + SUBJECT_DESC_BRUCE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                new AddTeamCommand(expectedTeam));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_ALFRED + NAME_DESC_BRUCE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + LOCATION_DESC_BRUCE + PROJECT_NAME_DESC_BRUCE + SUBJECT_DESC_BRUCE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new AddTeamCommand(expectedTeam2));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // multiple locations - last location accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + LOCATION_DESC_ALFRED + NAME_DESC_BRUCE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + LOCATION_DESC_BRUCE + PROJECT_NAME_DESC_BRUCE + SUBJECT_DESC_BRUCE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new AddTeamCommand(expectedTeam3));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // multiple project names - last project name accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + PROJECT_NAME_DESC_ALFRED + NAME_DESC_BRUCE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + LOCATION_DESC_BRUCE + PROJECT_NAME_DESC_BRUCE + SUBJECT_DESC_BRUCE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new AddTeamCommand(expectedTeam4));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // multiple subjects - last subject accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + SUBJECT_DESC_ALFRED + NAME_DESC_BRUCE"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + LOCATION_DESC_BRUCE + PROJECT_NAME_DESC_BRUCE + SUBJECT_DESC_BRUCE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new AddTeamCommand(expectedTeam5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void parse_compulsoryFieldsMissing_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTeamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Missing name prefix"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, LOCATION_DESC_BRUCE + PROJECT_NAME_DESC_BRUCE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + SUBJECT_DESC_BRUCE + VALID_NAME_BRUCE, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Missing location prefix"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BRUCE + VALID_LOCATION_BRUCE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + PROJECT_NAME_DESC_BRUCE + SUBJECT_DESC_BRUCE, expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Missing project name prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BRUCE + VALID_PROJECT_NAME_BRUCE"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + LOCATION_DESC_BRUCE + SUBJECT_DESC_BRUCE, expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Missing subject prefix"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BRUCE + VALID_SUBJECT_BRUCE"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + LOCATION_DESC_BRUCE + PROJECT_NAME_DESC_BRUCE, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Missing all prefixes"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BRUCE + VALID_PROJECT_NAME_BRUCE"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + VALID_LOCATION_BRUCE + VALID_SUBJECT_BRUCE, expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid name"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, LOCATION_DESC_BRUCE + PROJECT_NAME_DESC_BRUCE"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + SUBJECT_DESC_BRUCE + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid location"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BRUCE + INVALID_LOCATION_DESC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + PROJECT_NAME_DESC_BRUCE + SUBJECT_DESC_BRUCE,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                Location.MESSAGE_CONSTRAINTS_INVALID_TABLE_NUMBER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid project name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BRUCE + INVALID_PROJECT_NAME_DESC"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + LOCATION_DESC_BRUCE + SUBJECT_DESC_BRUCE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Missing subject"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BRUCE + INVALID_SUBJECT_DESC"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + LOCATION_DESC_BRUCE + PROJECT_NAME_DESC_BRUCE,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                SubjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Two invalid fields - first one reported"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_LOCATION_DESC"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + PROJECT_NAME_DESC_BRUCE + SUBJECT_DESC_BRUCE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Non-empty preamble"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BRUCE"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + LOCATION_DESC_BRUCE + PROJECT_NAME_DESC_BRUCE + SUBJECT_DESC_BRUCE,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTeamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 105,
      "john0227": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cvscommandparser/ExportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.cvscommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.ExportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.ExportMentorCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.ExportParticipantCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.ExportTeamCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.csvcommandparser.ExportCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String PREFIX_FILE_PATH \u003d \" \" + CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String PREAMBLE_MENTOR \u003d \"mentor\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String PREAMBLE_PARTICIPANT \u003d \"participant\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String PREAMBLE_TEAM \u003d \"team\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final Parser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_validParametersPassedIn_exportCommandReturned() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Empty file path -\u003e default file path"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ExportCommand(filePath)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Pass in file path"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        filePath \u003d \"Alfred.csv\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "                PREFIX_FILE_PATH + filePath,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ExportCommand(filePath)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_validParametersPassedIn_exportMentorCommandReturned() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Empty file path -\u003e default file path"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "                PREAMBLE_MENTOR,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ExportMentorCommand(filePath)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Pass in file path"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        filePath \u003d \"Alfred.csv\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "                PREAMBLE_MENTOR + PREFIX_FILE_PATH + filePath,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ExportMentorCommand(filePath)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_validParametersPassedIn_exportParticipantCommandReturned() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Empty file path -\u003e default file path"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "                PREAMBLE_PARTICIPANT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ExportParticipantCommand(filePath)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Pass in file path"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "        filePath \u003d \"Alfred.csv\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "                PREAMBLE_PARTICIPANT + PREFIX_FILE_PATH + filePath,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ExportParticipantCommand(filePath)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_validParametersPassedIn_exportTeamCommandReturned() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String filePath \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Empty file path -\u003e default file path"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "                PREAMBLE_TEAM,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ExportTeamCommand(filePath)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Pass in file path"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        filePath \u003d \"Alfred.csv\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "                PREAMBLE_TEAM + PREFIX_FILE_PATH + filePath,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new ExportTeamCommand(filePath)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_invalidParametersPassedIn_parseExceptionThrown() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Non-csv file passed"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String invalidFileName \u003d \"Alfred.txt\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "                PREFIX_FILE_PATH + invalidFileName,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Invalid preamble/entity"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String invalidPreamble \u003d \"Participants\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String validFileName \u003d \"Alfred.csv\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "                invalidPreamble + PREFIX_FILE_PATH + validFileName,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "        );"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cvscommandparser/ImportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.cvscommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.csvcommand.ImportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.csvcommandparser.ImportCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final Parser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_validParameterPassedIn_validCommandReturned() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String path \u003d TestUtil.getFilePathInSandboxFolder(\"Alfred.csv\").toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_FILE_PATH + path, new ImportCommand(path));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_invalidParametersPassedIn_exceptionThrown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Only csv files should be passed in"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String path \u003d \" \" + PREFIX_FILE_PATH + TestUtil.getFilePathInSandboxFolder(\"Alfred.txt\").toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, path, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Preamble must be blank"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        path \u003d \"mentor\" + PREFIX_FILE_PATH + \"Alfred.csv\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, path, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // PREFIX_FILE_PATH is not present"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        path \u003d \" \" + TestUtil.getFilePathInSandboxFolder(\"Alfred.csv\").toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, path, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // File name is blank"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        path \u003d \" \" + PREFIX_FILE_PATH.getPrefix();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, path, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deletecommandparser/DeleteCommandAllocatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandAllocatorTestUtil.assertAllocatorFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandAllocatorTestUtil.assertAllocatorSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteMentorCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteParticipantCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteTeamCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "class DeleteCommandAllocatorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Id mentorId \u003d new Id(PrefixType.M, 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Id participantId \u003d new Id(PrefixType.P, 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Id teamId \u003d new Id(PrefixType.T, 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private DeleteCommandAllocator deleteCommandAllocator \u003d new DeleteCommandAllocator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void allocate_correctUserInput_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorSuccess(deleteCommandAllocator, \"mentor M-1\", new DeleteMentorCommand(mentorId));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorSuccess(deleteCommandAllocator, \"participant P-2\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                new DeleteParticipantCommand(participantId));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorSuccess(deleteCommandAllocator, \"team T-2\", new DeleteTeamCommand(teamId));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void allocate_missingUserArgument_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Entity name not mentioned - M-1 is the ID inputted by user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorFailure(deleteCommandAllocator, \"M-1\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Entity description fields not mentioned - Team is the entity but ID isn\u0027t mentioned"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorFailure(deleteCommandAllocator, \"team\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTeamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // User input is empty - entity nor its fields mentioned"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorFailure(deleteCommandAllocator, \"\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deletecommandparser/DeleteMentorCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteMentorCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "class DeleteMentorCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private DeleteMentorCommandParser parser \u003d new DeleteMentorCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Id mentorId \u003d new Id(PrefixType.M, 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, \"M-1\", new DeleteMentorCommand(mentorId));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid index provided"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(DeleteMentorCommand.MESSAGE_INVALID_MENTOR_DISPLAYED_INDEX));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // No argument provided"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMentorCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deletecommandparser/DeleteParticipantCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteParticipantCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "class DeleteParticipantCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private DeleteParticipantCommandParser parser \u003d new DeleteParticipantCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Id participantId \u003d new Id(PrefixType.P, 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, \"P-1\", new DeleteParticipantCommand(participantId));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid index provided"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(DeleteParticipantCommand.MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // No argument provided"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteParticipantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deletecommandparser/DeleteTeamCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteTeamCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "class DeleteTeamCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private DeleteTeamCommandParser parser \u003d new DeleteTeamCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Id teamId \u003d new Id(PrefixType.T, 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, \"T-1\", new DeleteTeamCommand(teamId));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid index provided"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(DeleteTeamCommand.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // No argument provided"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTeamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/editcommandparser/EditMentorCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.editcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORGANISATION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORGANIZATION_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORGANIZATION_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORGANIZATION_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORGANIZATION_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditMentorCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditMentorCommand.EditMentorDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.EditMentorDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalIds;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "class EditMentorCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditMentorCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditMentorCommandParser parser \u003d new EditMentorCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"M-1\", EditMentorCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"M--5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"M-0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"M-1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"M-1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"M-1\" + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"M-1\" + INVALID_SUBJECT_DESC,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "                SubjectName.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"M-1\" + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS); // invalid subject"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"M-1\" + INVALID_ORGANISATION_DESC,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"M-1\" + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"M-1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // valid phone followed by invalid phone."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"M-1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"M-1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + VALID_PHONE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_FIRST_MENTOR;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + ORGANIZATION_DESC_AMY + SUBJECT_DESC_AMY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorDescriptor descriptor \u003d new EditMentorDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withOrganization(VALID_ORGANIZATION_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withSubject(VALID_SUBJECT_AMY).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorCommand expectedCommand \u003d new EditMentorCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_FIRST_MENTOR;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorDescriptor descriptor \u003d new EditMentorDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorCommand expectedCommand \u003d new EditMentorCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_FIRST_MENTOR;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorDescriptor descriptor \u003d new EditMentorDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorCommand expectedCommand \u003d new EditMentorCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": "        userInput \u003d targetId.toString() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditMentorDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedCommand \u003d new EditMentorCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "john0227"
        },
        "content": "        userInput \u003d targetId.toString() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditMentorDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedCommand \u003d new EditMentorCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Organization"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": "        userInput \u003d targetId.toString() + ORGANIZATION_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditMentorDescriptorBuilder().withOrganization(VALID_ORGANIZATION_AMY).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedCommand \u003d new EditMentorCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Subject"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "        userInput \u003d targetId.toString() + SUBJECT_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditMentorDescriptorBuilder().withSubject(VALID_SUBJECT_AMY).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedCommand \u003d new EditMentorCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_FIRST_MENTOR;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB + SUBJECT_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + SUBJECT_DESC_BOB;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorDescriptor descriptor \u003d new EditMentorDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withSubject(VALID_SUBJECT_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorCommand expectedCommand \u003d new EditMentorCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_FIRST_MENTOR;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorDescriptor descriptor \u003d new EditMentorDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditMentorCommand expectedCommand \u003d new EditMentorCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "john0227"
        },
        "content": "        userInput \u003d targetId.toString() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + INVALID_ORGANISATION_DESC + ORGANIZATION_DESC_BOB + INVALID_SUBJECT_DESC + SUBJECT_DESC_BOB;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditMentorDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withOrganization(VALID_ORGANIZATION_BOB).withSubject(VALID_SUBJECT_BOB).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedCommand \u003d new EditMentorCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 208
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/editcommandparser/EditParticipantCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.editcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditParticipantCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditParticipantCommand.EditParticipantDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.EditParticipantDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalIds;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "class EditParticipantCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditParticipantCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditParticipantCommandParser parser \u003d new EditParticipantCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"P-1\", EditParticipantCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"P--5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"P-0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"P-1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"P-1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"P-1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"P-1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"P-1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"P-1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // valid phone followed by invalid phone."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"P-1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"P-1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + VALID_PHONE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_FIRST_PARTICIPANT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantDescriptor descriptor \u003d new EditParticipantDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantCommand expectedCommand \u003d new EditParticipantCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_FIRST_PARTICIPANT;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantDescriptor descriptor \u003d new EditParticipantDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantCommand expectedCommand \u003d new EditParticipantCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_THIRD_PARTICIPANT;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantDescriptor descriptor \u003d new EditParticipantDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantCommand expectedCommand \u003d new EditParticipantCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "        userInput \u003d targetId.toString() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditParticipantDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedCommand \u003d new EditParticipantCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "        userInput \u003d targetId.toString() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditParticipantDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedCommand \u003d new EditParticipantCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_THIRD_PARTICIPANT;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantDescriptor descriptor \u003d new EditParticipantDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantCommand expectedCommand \u003d new EditParticipantCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_THIRD_PARTICIPANT;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantDescriptor descriptor \u003d new EditParticipantDescriptorBuilder()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditParticipantCommand expectedCommand \u003d new EditParticipantCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": "        userInput \u003d targetId.toString() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditParticipantDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedCommand \u003d new EditParticipantCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/editcommandparser/EditTeamCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.editcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROJECT_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_ALFRED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_BRUCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALFRED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_NAME_DESC_ALFRED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_ALFRED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_ALFRED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BRUCE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ALFRED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_ALFRED;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_ALFRED;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditTeamCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditTeamCommand.EditTeamDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.EditTeamDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.testutil.TypicalIds;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "class EditTeamCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTeamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditTeamCommandParser parser \u003d new EditTeamCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ALFRED, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"T-1\", EditTeamCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"T--5\" + NAME_DESC_ALFRED, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"T-0\" + NAME_DESC_ALFRED, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"T-1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"T-1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"T-1\" + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"T-1\" + INVALID_SUBJECT_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "                SubjectName.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"T-1\" + INVALID_PROJECT_NAME_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS); // invalid project name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"T-1\" + INVALID_LOCATION_DESC,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "                Location.MESSAGE_CONSTRAINTS_INVALID_TABLE_NUMBER); // invalid location"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // invalid location followed by valid name"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"T-1\" + INVALID_LOCATION_DESC + NAME_DESC_ALFRED,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "                Location.MESSAGE_CONSTRAINTS_INVALID_TABLE_NUMBER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // valid name followed by invalid name."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"T-1\" + NAME_DESC_ALFRED + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseFailure(parser, \"T-1\" + INVALID_NAME_DESC + INVALID_LOCATION_DESC + INVALID_SUBJECT_DESC"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + INVALID_PROJECT_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_FIRST_TEAM;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + NAME_DESC_ALFRED"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + SUBJECT_DESC_ALFRED + LOCATION_DESC_ALFRED + PROJECT_NAME_DESC_ALFRED;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamDescriptor descriptor \u003d new EditTeamDescriptorBuilder().withName(VALID_NAME_ALFRED)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withSubject(VALID_SUBJECT_ALFRED).withLocation(VALID_LOCATION_ALFRED)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withProjectName(VALID_PROJECT_NAME_ALFRED).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamCommand expectedCommand \u003d new EditTeamCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_FIRST_TEAM;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + NAME_DESC_ALFRED + LOCATION_DESC_ALFRED;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamDescriptor descriptor \u003d new EditTeamDescriptorBuilder().withLocation(VALID_LOCATION_ALFRED)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withName(VALID_NAME_ALFRED).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamCommand expectedCommand \u003d new EditTeamCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_FIRST_TEAM;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamDescriptor descriptor \u003d new EditTeamDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamCommand expectedCommand \u003d new EditTeamCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // project name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "john0227"
        },
        "content": "        userInput \u003d targetId.toString() + \" pn/NewName\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditTeamDescriptorBuilder().withProjectName(\"NewName\").build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedCommand \u003d new EditTeamCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // location"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "        userInput \u003d targetId.toString() + LOCATION_DESC_ALFRED;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditTeamDescriptorBuilder().withLocation(VALID_LOCATION_ALFRED).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedCommand \u003d new EditTeamCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Subject"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "john0227"
        },
        "content": "        userInput \u003d targetId.toString() + SUBJECT_DESC_AMY;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditTeamDescriptorBuilder().withSubject(VALID_SUBJECT_AMY).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedCommand \u003d new EditTeamCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_FIRST_TEAM;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + LOCATION_DESC_ALFRED + LOCATION_DESC_BRUCE + SUBJECT_DESC_AMY"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + SUBJECT_DESC_BOB;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamDescriptor descriptor \u003d new EditTeamDescriptorBuilder().withLocation(VALID_LOCATION_BRUCE)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withSubject(VALID_SUBJECT_BOB).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamCommand expectedCommand \u003d new EditTeamCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id targetId \u003d TypicalIds.ID_FIRST_TEAM;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String userInput \u003d targetId.toString() + INVALID_LOCATION_DESC + LOCATION_DESC_ALFRED;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamDescriptor descriptor \u003d new EditTeamDescriptorBuilder().withLocation(VALID_LOCATION_ALFRED).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "john0227"
        },
        "content": "        EditTeamCommand expectedCommand \u003d new EditTeamCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "john0227"
        },
        "content": "        userInput \u003d targetId.toString() + NAME_DESC_ALFRED + INVALID_LOCATION_DESC + LOCATION_DESC_ALFRED"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "john0227"
        },
        "content": "                + INVALID_SUBJECT_DESC + SUBJECT_DESC_BOB;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditTeamDescriptorBuilder().withName(VALID_NAME_ALFRED).withSubject(VALID_SUBJECT_BOB)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "john0227"
        },
        "content": "                .withLocation(VALID_LOCATION_ALFRED).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "john0227"
        },
        "content": "        expectedCommand \u003d new EditTeamCommand(targetId, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 197
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/listcommandparser/ListCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.listcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListMentorCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListParticipantCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListTeamCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "class ListCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String LIST_MENTOR_KEYWORD \u003d \"mentors\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String LIST_PARTICIPANT_KEYWORD \u003d \"participants\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String LIST_TEAM_KEYWORD \u003d \"teams\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String INCORRECT_INPUT \u003d \"wrong\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String EMPTY_INPUT \u003d \"wrong\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private final ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_correctUserInput_appropriateCommandReturned() throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(parser.parse(LIST_MENTOR_KEYWORD) instanceof ListMentorCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(parser.parse(LIST_TEAM_KEYWORD) instanceof ListTeamCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertTrue(parser.parse(LIST_PARTICIPANT_KEYWORD) instanceof ListParticipantCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void parse_incorrectUserInput_parseExceptionThrown() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(INCORRECT_INPUT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(EMPTY_INPUT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/viewcommandparser/ViewCommandAllocatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.viewcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandAllocatorTestUtil.assertAllocatorFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandAllocatorTestUtil.assertAllocatorSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewMentorCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewParticipantCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewTeamCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "class ViewCommandAllocatorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Id mentorId \u003d new Id(PrefixType.M, 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Id participantId \u003d new Id(PrefixType.P, 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Id teamId \u003d new Id(PrefixType.T, 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private ViewCommandAllocator viewCommandAllocator \u003d new ViewCommandAllocator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void allocate_correctUserInput_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorSuccess(viewCommandAllocator, \"mentor M-1\", new ViewMentorCommand(mentorId));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorSuccess(viewCommandAllocator, \"participant P-2\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                new ViewParticipantCommand(participantId));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorSuccess(viewCommandAllocator, \"team T-2\", new ViewTeamCommand(teamId));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    void allocate_missingUserArgument_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Entity name not mentioned - M-1 is the ID inputted by user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorFailure(viewCommandAllocator, \"M-1\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Entity description fields not mentioned - Team is the entity but ID isn\u0027t mentioned"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorFailure(viewCommandAllocator, \"team\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewTeamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // User input is empty - entity nor its fields mentioned"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertAllocatorFailure(viewCommandAllocator, \"\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/viewcommandparser/ViewMentorCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.viewcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewMentorCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "class ViewMentorCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private ViewMentorCommandParser parser \u003d new ViewMentorCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Id mentorId \u003d new Id(PrefixType.M, 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, \"M-1\", new ViewMentorCommand(mentorId));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid index provided"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(ViewMentorCommand.MESSAGE_INVALID_MENTOR_DISPLAYED_INDEX));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // No argument provided"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewMentorCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/viewcommandparser/ViewParticipantCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.viewcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewParticipantCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "class ViewParticipantCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private ViewParticipantCommandParser parser \u003d new ViewParticipantCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Id participantId \u003d new Id(PrefixType.P, 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, \"P-1\", new ViewParticipantCommand(participantId));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid index provided"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(ViewParticipantCommand.MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // No argument provided"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewParticipantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/viewcommandparser/ViewTeamCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser.viewcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.viewcommand.ViewTeamCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "class ViewTeamCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private ViewTeamCommandParser parser \u003d new ViewTeamCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Id teamId \u003d new Id(PrefixType.T, 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseSuccess(parser, \"T-1\", new ViewTeamCommand(teamId));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // Invalid index provided"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(ViewTeamCommand.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // No argument provided"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewTeamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateEntityException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicateEntityException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(DuplicateEntityException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 3,
      "Abhiman2211": 10,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelHistoryManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelHistoryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddMentorCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddParticipantCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListParticipantCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.testutil.TypicalMentors;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.testutil.TypicalParticipants;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.testutil.TypicalTeams;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class ModelHistoryManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ParticipantList pList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private MentorList mList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private TeamList tList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ModelHistoryManager hm;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Participant newP;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Mentor newM;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void beforeEach() throws AlfredException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        pList \u003d TypicalParticipants.getTypicalParticipantList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList.setLastUsedId(10);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mList \u003d TypicalMentors.getTypicalMentorList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        MentorList.setLastUsedId(10);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        tList \u003d TypicalTeams.getTypicalTeamList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        TeamList.setLastUsedId(10);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        hm \u003d new ModelHistoryManager(pList, ParticipantList.getLastUsedId(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                     mList, MentorList.getLastUsedId(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                     tList, TeamList.getLastUsedId());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        newP \u003d new Participant(new Name(\"Test Person\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                               new Id(PrefixType.P, 11),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                               new Email(\"testperson@gmail.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                               new Phone(\"93200000\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        newM \u003d new Mentor(new Name(\"Test Mentor\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                          new Id(PrefixType.M, 11),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                          new Phone(\"+6592222222\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                          new Email(\"testmentor@gmail.com\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                          new Name(\"Test Organization\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                          SubjectName.SOCIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Helper method to simulate the execution of an AddParticipantCommand."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private void executeAddParticipantCommandAndUpdateModelHistory() throws AlfredException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        pList.add(newP);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        hm.updateHistory(pList, ParticipantList.getLastUsedId(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                mList, MentorList.getLastUsedId(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                tList, TeamList.getLastUsedId(), new AddParticipantCommand(newP));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void updateHistory_isTrackableStateCommand() throws AlfredException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        executeAddParticipantCommandAndUpdateModelHistory();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(2, hm.getLengthOfHistory()); //ModelHistoryRecord with TrackableState Command added successfully."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertTrue(hm.canUndo());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void updateHistory_notTrackableStateCommand() throws AlfredException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        hm.updateHistory(pList, ParticipantList.getLastUsedId(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                         mList, MentorList.getLastUsedId(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                         tList, TeamList.getLastUsedId(), new ListParticipantCommand());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(1, hm.getLengthOfHistory());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertFalse(hm.canUndo());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void undo_testEqualityOfLists_success() throws AlfredException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList origPList \u003d pList.copy();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        executeAddParticipantCommandAndUpdateModelHistory();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertTrue(hm.canUndo());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ModelHistoryRecord hr \u003d hm.undo();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList historyPList \u003d hr.getParticipantList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(origPList.getSpecificTypedList(), historyPList.getSpecificTypedList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void undo_testLastUsedIdSetting_success() throws AlfredModelHistoryException, AlfredException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        int origPListLastUsedId \u003d ParticipantList.getLastUsedId();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        executeAddParticipantCommandAndUpdateModelHistory();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ModelHistoryRecord hr \u003d hm.undo();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(origPListLastUsedId, hr.getParticipantListLastUsedId());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void canUndo_testUndoEndPoint() throws AlfredException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        executeAddParticipantCommandAndUpdateModelHistory();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertTrue(hm.canUndo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ModelHistoryRecord hr \u003d hm.undo();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertFalse(hm.canUndo());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void canUndo_initialModelHistoryManager_false() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertFalse(hm.canUndo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void canRedo_testRedoEndPoint() throws AlfredException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertFalse(hm.canRedo());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        executeAddParticipantCommandAndUpdateModelHistory();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertFalse(hm.canRedo());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        hm.undo();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertTrue(hm.canRedo());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mList.add(newM);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Overwrites the valid redo-able commands, so canRedo() should return false."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        hm.updateHistory(pList, ParticipantList.getLastUsedId(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                         mList, MentorList.getLastUsedId(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                         tList, TeamList.getLastUsedId(), new AddMentorCommand(newM));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertFalse(hm.canRedo());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void redo_testEqualityOfLists_success() throws AlfredException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        executeAddParticipantCommandAndUpdateModelHistory();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ModelHistoryRecord hr \u003d hm.undo();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        hr \u003d hm.redo();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(pList.getSpecificTypedList(), hr.getParticipantList().getSpecificTypedList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void redo_testLastUsedIdSetting_success() throws AlfredException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        executeAddParticipantCommandAndUpdateModelHistory();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ModelHistoryRecord hr \u003d hm.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        hr \u003d hm.redo();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(pList.getLastUsedId(), hr.getParticipantListLastUsedId());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void canRedo_initialModelHistoryManager_false() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertFalse(hm.canRedo());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void getCommandHistory_initial() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(hm.getCommandHistory().size(), 3);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(hm.getCommandHistory().get(0).getCommandType(), CommandRecord.CommandType.END);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(hm.getCommandHistory().get(1).getCommandType(), CommandRecord.CommandType.CURR);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(hm.getCommandHistory().get(2).getCommandType(), CommandRecord.CommandType.END);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void getCommandHistory_withUndoRedo() throws AlfredException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        executeAddParticipantCommandAndUpdateModelHistory();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mList.add(newM);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        hm.updateHistory(pList, ParticipantList.getLastUsedId(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                         mList, MentorList.getLastUsedId(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                         tList, TeamList.getLastUsedId(), new AddMentorCommand(newM));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        hm.undo();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(hm.getCommandHistory().size(), 5);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(hm.getCommandHistory().get(0).getCommandType(), CommandRecord.CommandType.END);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(hm.getCommandHistory().get(1).getCommandType(), CommandRecord.CommandType.REDO);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(hm.getCommandHistory().get(2).getCommandType(), CommandRecord.CommandType.CURR);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(hm.getCommandHistory().get(3).getCommandType(), CommandRecord.CommandType.UNDO);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(hm.getCommandHistory().get(4).getCommandType(), CommandRecord.CommandType.END);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void getLengthOfHistory() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(1, hm.getLengthOfHistory());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 184
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelHistoryRecordTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddParticipantCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.testutil.TypicalMentors;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.testutil.TypicalParticipants;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.testutil.TypicalTeams;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class ModelHistoryRecordTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ModelHistoryRecord hr;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ParticipantList pList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private int pListId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private MentorList mList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private int mListId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private TeamList tList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private int tListId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Participant newP;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Command c;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void setUp() throws AlfredException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        pListId \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        pList \u003d TypicalParticipants.getTypicalParticipantList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList.setLastUsedId(pListId);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mListId \u003d 2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mList \u003d TypicalMentors.getTypicalMentorList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        MentorList.setLastUsedId(mListId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        tListId \u003d 3;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        tList \u003d TypicalTeams.getTypicalTeamList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        TeamList.setLastUsedId(tListId);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        newP \u003d new Participant(new Name(\"Test Person\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                               new Id(PrefixType.P, 123),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                               new Email(\"testperson@gmail.com\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                               new Phone(\"93200000\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Command c \u003d new AddParticipantCommand(newP);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        hr \u003d new ModelHistoryRecord(pList, pListId,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                    mList, mListId,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                    tList, tListId,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                    c);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void getParticipantList_checkDeepCopy() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertTrue(hr.getParticipantList() !\u003d pList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        List\u003cParticipant\u003e copiedPList \u003d hr.getParticipantList().getSpecificTypedList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        List\u003cParticipant\u003e origPList \u003d pList.getSpecificTypedList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (int i \u003d 0; i \u003c copiedPList.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Participant copiedParticipant \u003d copiedPList.get(i);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Participant origParticipant \u003d origPList.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedParticipant !\u003d origParticipant);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedParticipant.getEmail() !\u003d origParticipant.getEmail());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedParticipant.getPhone() !\u003d origParticipant.getPhone());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedParticipant.getId() !\u003d origParticipant.getId());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedParticipant.getName() !\u003d origParticipant.getName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void getMentorList_checkDeepCopy() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertTrue(hr.getMentorList() !\u003d mList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        List\u003cMentor\u003e copiedMList \u003d hr.getMentorList().getSpecificTypedList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        List\u003cMentor\u003e origMList \u003d mList.getSpecificTypedList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (int i \u003d 0; i \u003c copiedMList.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Mentor copiedMentor \u003d copiedMList.get(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Mentor origMentor \u003d origMList.get(i);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedMentor !\u003d origMentor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedMentor.getName() !\u003d origMentor.getName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedMentor.getId() !\u003d origMentor.getId());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedMentor.getPhone() !\u003d origMentor.getPhone());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedMentor.getEmail() !\u003d origMentor.getEmail());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedMentor.getOrganization() !\u003d origMentor.getOrganization());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedMentor.getSubject() \u003d\u003d origMentor.getSubject()); //Subject is an Enum"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void getTeamList_checkDeepCopy() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertTrue(hr.getTeamList() !\u003d tList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        List\u003cTeam\u003e copiedTList \u003d hr.getTeamList().getSpecificTypedList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        List\u003cTeam\u003e origTList \u003d tList.getSpecificTypedList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (int i \u003d 0; i \u003c copiedTList.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Team copiedTeam \u003d copiedTList.get(i);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Team origTeam \u003d origTList.get(i);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedTeam !\u003d origTeam);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedTeam.getId() !\u003d origTeam.getId());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedTeam.getName() !\u003d origTeam.getName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedTeam.getParticipants() !\u003d origTeam.getParticipants());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedTeam.getMentor() !\u003d origTeam.getMentor());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedTeam.getSubject() \u003d\u003d origTeam.getSubject()); //Subject is an Enum"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedTeam.getScore() !\u003d origTeam.getScore());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedTeam.getProjectName() !\u003d origTeam.getProjectName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertTrue(copiedTeam.getLocation() !\u003d origTeam.getLocation());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.mockito.Mockito.any;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.mockito.Mockito.mock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.mockito.Mockito.spy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.TestInstance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.mockito.Mockito;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.Predicates;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.storage.AlfredStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.testutil.TypicalMentors;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.testutil.TypicalParticipants;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.testutil.TypicalTeams;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "@Disabled"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "@TestInstance(TestInstance.Lifecycle.PER_CLASS)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private AlfredStorage storage \u003d mock(AlfredStorage.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager(storage, new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void clearTeamA() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        modelManager \u003d spy(new ModelManager(storage, new UserPrefs()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        TypicalTeams.clearTeamA();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void addAndGetParticipant_validId_returnsParticipant() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveParticipantList(any());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveTeamList(any());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveMentorList(any());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addParticipant(TypicalParticipants.A);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Participant participant \u003d modelManager.getParticipant(new Id(PrefixType.P, 1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertTrue(participant.equals(TypicalParticipants.A));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (AlfredException | IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void deleteParticipant_validId_returnsParticipant() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveParticipantList(any());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveTeamList(any());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveMentorList(any());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addParticipant(TypicalParticipants.A);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addTeam(TypicalTeams.A);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Participant participant \u003d modelManager.deleteParticipant(new Id(PrefixType.P, 1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertTrue(participant.equals(TypicalParticipants.A));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (AlfredException | IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void updateParticipant_validId_returnsTrue() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveParticipantList(any());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveTeamList(any());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveMentorList(any());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addParticipant(TypicalParticipants.A);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addTeam(TypicalTeams.A);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.updateParticipant(new Id(PrefixType.P, 1),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    TypicalParticipants.A_UPDATED);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertTrue(TypicalTeams.A.getParticipants().get(0)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    .equals(TypicalParticipants.A_UPDATED));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (AlfredException | IOException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void getTeamByParticipantId_validId_returnsTeam() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveParticipantList(any());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveTeamList(any());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveMentorList(any());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addTeam(TypicalTeams.A);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertTrue(TypicalTeams.A"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    .equals(modelManager.getTeamByParticipantId(new Id(PrefixType.P, 1))));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (AlfredException | IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void getTeamByMentorId_validId_returnsMentor() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveParticipantList(any());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveTeamList(any());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveMentorList(any());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addTeam(TypicalTeams.A);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertTrue(TypicalTeams.A"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    .equals(modelManager.getTeamByMentorId(new Id(PrefixType.M, 3))));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (AlfredException | IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void updateMentor_validMentor_updatesMentor() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveParticipantList(any());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveTeamList(any());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveMentorList(any());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addTeam(TypicalTeams.A);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addMentor(TypicalMentors.A);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.updateMentor(new Id(PrefixType.M, 3),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    TypicalMentors.A_UPDATED);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertTrue(modelManager.getTeamByMentorId(new Id(PrefixType.M, 3))"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    .equals(TypicalTeams.A));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (AlfredException | IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void addParticipantToTeam_validParticipant_addsParticipant() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveParticipantList(any());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveTeamList(any());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveMentorList(any());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addTeam(TypicalTeams.A);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addParticipantToTeam(new Id(PrefixType.T, 1),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    TypicalParticipants.B);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertTrue(modelManager.getTeam(new Id(PrefixType.T, 1))"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    .getParticipants().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (AlfredException | IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void findParticipantByName_validName_correctResult() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveParticipantList(any());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveTeamList(any());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveMentorList(any());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addParticipant(TypicalParticipants.A);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addParticipant(TypicalParticipants.B);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertEquals(modelManager.getParticipantList().list().size(), 2);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertEquals(modelManager.findParticipant("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    Predicates.getPredicateFindParticipantByName(\"A\")).size(), 1);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertEquals(modelManager.findParticipant("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    Predicates.getPredicateFindParticipantByName(\"Part B\")).size(), 1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (AlfredException | IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void findTeamByName_validName_correctResult() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveParticipantList(any());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveTeamList(any());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveMentorList(any());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addParticipant(TypicalParticipants.A);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addMentor(TypicalMentors.A);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addTeam(TypicalTeams.A);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (AlfredException | IOException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        assertEquals(modelManager.getTeamList().list().size(), 1);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        assertEquals(modelManager.findTeam("
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                Predicates.getPredicateFindTeamByName(\"A\")).size(), 1);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void findMentorByName_validName_correctResult() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveParticipantList(any());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveTeamList(any());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mockito.doNothing().when(storage).saveMentorList(any());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addMentor(TypicalMentors.A);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            modelManager.addMentor(TypicalMentors.B);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (AlfredException | IOException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        assertEquals(modelManager.getMentorList().list().size(), 2);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        assertEquals(modelManager.findMentor("
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                Predicates.getPredicateFindMentorByName(\"B\")).size(), 2);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 1,
      "-": 108,
      "hcwong": 165,
      "Joanna-YJA": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entity/IdTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class IdTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void equals_sameId_returnsTrue() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        assertEquals(new Id(PrefixType.T, 1), new Id(PrefixType.T, 1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void toId_validParameters_returnsValidId() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String validMentorId1 \u003d \"M-1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(new Id(PrefixType.M, 1), Id.toId(validMentorId1)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String validMentorId2 \u003d \"m-1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(new Id(PrefixType.M, 1), Id.toId(validMentorId2)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String validMentorId3 \u003d \"M-1234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(new Id(PrefixType.M, 1234), Id.toId(validMentorId3)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String validParticipantId1 \u003d \"P-1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(new Id(PrefixType.P, 1), Id.toId(validParticipantId1)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String validParticipantId2 \u003d \"p-1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(new Id(PrefixType.P, 1), Id.toId(validParticipantId2)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String validParticipantId3 \u003d \"P-1234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(new Id(PrefixType.P, 1234), Id.toId(validParticipantId3)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String validTeamId1 \u003d \"T-1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(new Id(PrefixType.T, 1), Id.toId(validTeamId1)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String validTeamId2 \u003d \"t-1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(new Id(PrefixType.T, 1), Id.toId(validTeamId2)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String validTeamId3 \u003d \"T-1234\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(new Id(PrefixType.T, 1234), Id.toId(validTeamId3)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void toId_invalidParameters_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String invalidId1 \u003d \"PTM-1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e Id.toId(invalidId1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String invalidId2 \u003d \"PP-1\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e Id.toId(invalidId2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String invalidId3 \u003d \"P-T-M-1\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e Id.toId(invalidId3));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 12,
      "john0227": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entitylist/MentorListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.TestInstance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.testutil.TypicalMentors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "@TestInstance(TestInstance.Lifecycle.PER_CLASS)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class MentorListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private MentorList mList \u003d new MentorList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Resets the mentor list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private void reset() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mList \u003d new MentorList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add_validMentor_successful() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.mList.add(TypicalMentors.A);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        assertEquals(this.mList.list().size(), 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add_similarMentor_fail() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.mList.add(TypicalMentors.A);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        assertThrows(AlfredModelException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.mList.add(TypicalMentors.A_UPDATED)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void get_validMentor_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.mList.add(TypicalMentors.A);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Mentor get \u003d this.mList.get(new Id(PrefixType.M, 3));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertEquals(get, TypicalMentors.A);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void get_invalidMentor_fail() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.mList.add(TypicalMentors.A);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertThrows(AlfredModelException.class, () -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    this.mList.get(new Id(PrefixType.M, 2)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void update_validMentor_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.mList.add(TypicalMentors.A);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.mList.update(new Id(PrefixType.P, 1),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    TypicalMentors.A_UPDATED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertTrue(mList.getSpecificTypedList().get(0)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    .getOrganization().equals(new Name(\"Organization Updated\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void update_similarMentor_fail() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.mList.add(TypicalMentors.A);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.mList.add(TypicalMentors.B);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertThrows(AlfredModelException.class, () -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.mList.update(new Id(PrefixType.M, 31), TypicalMentors.A_SIMILAR);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void delete_validMentor_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.mList.add(TypicalMentors.A);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.mList.delete(new Id(PrefixType.P, 3));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertTrue(this.mList.list().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entitylist/ParticipantListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.TestInstance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.testutil.TypicalParticipants;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "@TestInstance(TestInstance.Lifecycle.PER_CLASS)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class ParticipantListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private ParticipantList participantList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Resets the participant list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private void reset() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participantList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add_validParticipant_successful() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.participantList.add(TypicalParticipants.A);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "           // Silence error"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        assertEquals(this.participantList.list().size(), 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add_similarParticipant_fail() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.participantList.add(TypicalParticipants.A);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        assertThrows(AlfredModelException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.participantList.add(TypicalParticipants.A_UPDATED)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void get_validParticipant_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.participantList.add(TypicalParticipants.A);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Participant get \u003d this.participantList.get(new Id(PrefixType.P, 1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertEquals(get, TypicalParticipants.A);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void get_invalidParticipant_fail() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.participantList.add(TypicalParticipants.A);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertThrows(AlfredModelException.class, () -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    this.participantList.get(new Id(PrefixType.P, 2)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void update_validParticipant_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.participantList.add(TypicalParticipants.A);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.participantList.update(new Id(PrefixType.P, 1),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    TypicalParticipants.A_UPDATED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertTrue(participantList.getSpecificTypedList().get(0)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .getEmail().equals(new Email(\"updated@gmail.com\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void update_similarParticipant_fail() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.participantList.add(TypicalParticipants.A);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.participantList.add(TypicalParticipants.B);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertThrows(AlfredModelException.class, () -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.participantList.update(new Id(PrefixType.P, 2), TypicalParticipants.A_SIMILAR);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void delete_validParticipant_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.participantList.add(TypicalParticipants.A);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.participantList.delete(new Id(PrefixType.P, 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertTrue(this.participantList.list().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entitylist/TeamListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.TestInstance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.testutil.TypicalTeams;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "@TestInstance(TestInstance.Lifecycle.PER_CLASS)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class TeamListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private TeamList teamList \u003d new TeamList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Resets the participant list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private void reset() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.teamList \u003d new TeamList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        TypicalTeams.clearTeamA();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add_validTeam_successful() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.teamList.add(TypicalTeams.A);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        assertEquals(this.teamList.list().size(), 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add_similarTeam_fail() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.teamList.add(TypicalTeams.A);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        assertThrows(AlfredModelException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.teamList.add(TypicalTeams.A)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void get_validTeam_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.teamList.add(TypicalTeams.A);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Team get \u003d this.teamList.get(new Id(PrefixType.T, 1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertEquals(get, TypicalTeams.A);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void get_invalidTeam_fail() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.teamList.add(TypicalTeams.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertThrows(AlfredModelException.class, () -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    this.teamList.get(new Id(PrefixType.T, 4)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void update_validTeam_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.teamList.add(TypicalTeams.A);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.teamList.update(new Id(PrefixType.P, 1), TypicalTeams.A_UPDATED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertTrue(teamList.getSpecificTypedList().get(0)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    .getLocation().equals(new Location(2)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void update_similarTeam_fail() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.teamList.add(TypicalTeams.A);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.teamList.add(TypicalTeams.B);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertThrows(AlfredModelException.class, () -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.teamList.update(new Id(PrefixType.T, 2), TypicalTeams.A_SIMILAR);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void delete_validTeam_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.teamList.add(TypicalTeams.A);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            this.teamList.delete(new Id(PrefixType.P, 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            assertTrue(this.teamList.list().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            // Silence error"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/AlfredStorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.testutil.TypicalMentors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.testutil.TypicalParticipants;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.testutil.TypicalTeams;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class AlfredStorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private AlfredStorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonParticipantListStorage pStore \u003d new JsonParticipantListStorage(getTempFilePath(\"pStore\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonMentorListStorage mStore \u003d new JsonMentorListStorage(getTempFilePath(\"mStore\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonTeamListStorage tStore \u003d new JsonTeamListStorage(getTempFilePath(\"tStore\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        storageManager \u003d new AlfredStorageManager(pStore, mStore, tStore, userPrefsStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void participantListReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         * Note: This is an integration test that verifies the AlfredStorage is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         * {@link JsonParticipantListStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         * More extensive testing of ParticipantList saving/reading is done in {@link JsonParticipantListStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList original \u003d TypicalParticipants.getTypicalParticipantList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        storageManager.saveParticipantList(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList retrieved \u003d storageManager.readParticipantList().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(original.getSpecificTypedList(), retrieved.getSpecificTypedList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void mentorListReadSave() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         * Note: This is an integration test that verifies the AlfredStorage is properly wired to the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         * {@link JsonMentorListStorage} class."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         * More extensive testing of MentorList saving/reading is done in {@link JsonMentorListStorage} class."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        MentorList original \u003d TypicalMentors.getTypicalMentorList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        storageManager.saveMentorList(original);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        MentorList retrieved \u003d storageManager.readMentorList().get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(original.getSpecificTypedList(), retrieved.getSpecificTypedList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void teamListReadSave() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         * Note: This is an integration test that verifies the AlfredStorage is properly wired to the"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         * {@link JsonTeamListStorage} class."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         * More extensive testing of TeamList saving/reading is done in {@link JsonTeamListStorage} class."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        TeamList original \u003d TypicalTeams.getTypicalTeamList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        storageManager.saveTeamList(original);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        TeamList retrieved \u003d storageManager.readTeamList().get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(original.getSpecificTypedList(), retrieved.getSpecificTypedList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void getFilePaths() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertNotNull(storageManager.getParticipantListFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertNotNull(storageManager.getMentorListFilePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertNotNull(storageManager.getTeamListFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertNotNull(storageManager.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "@Disabled"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 9,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "@Disabled"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 2,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonMentorListStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.testutil.TypicalMentors;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonMentorListStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMentorListStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void readMentorList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readMentorList(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private java.util.Optional\u003cMentorList\u003e readMentorList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new JsonMentorListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                .readMentorList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertFalse(readMentorList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMentorList(\"notJsonFormatMentorList.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void readMentorList_invalidMentorList_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMentorList(\"invalidMentorList.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void readMentorList_invalidAndValidMentorList_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMentorList(\"invalidAndValidMentorList.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void readAndSaveMentorList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMentorList.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        MentorList original \u003d TypicalMentors.getTypicalMentorList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonMentorListStorage mStorage \u003d new JsonMentorListStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Save and read mentorList to and from JSON"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mStorage.saveMentorList(original);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cMentorList\u003e returnedList \u003d mStorage.readMentorList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (returnedList.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            fail(\"Mentor List read from storage is empty. Optional\u003cMentorList\u003e is empty.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            List\u003cMentor\u003e returnedMentorList \u003d returnedList.get().getSpecificTypedList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertEquals(returnedMentorList, TypicalMentors.getTypicalMentors());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList_nullMentorList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMentorList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves {@code mList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private void saveMentorList(MentorList mList, String filePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            new JsonMentorListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                    .saveMentorList(mList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMentorList(new MentorList(), null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 103,
      "hcwong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonParticipantListStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.testutil.TypicalParticipants;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonParticipantListStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonParticipantListStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void readParticipantList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readParticipantList(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private java.util.Optional\u003cParticipantList\u003e readParticipantList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new JsonParticipantListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                        .readParticipantList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertFalse(readParticipantList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readParticipantList(\"notJsonFormatParticipantList.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void readParticipantList_invalidParticipantList_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readParticipantList(\"invalidParticipantList.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void readParticipantList_invalidAndValidParticipantList_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readParticipantList(\"invalidAndValidParticipantList.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void readAndSaveParticipantList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempParticipantList.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList original \u003d TypicalParticipants.getTypicalParticipantList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonParticipantListStorage pStorage \u003d new JsonParticipantListStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Save and read participantList to and from JSON"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        pStorage.saveParticipantList(original);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cParticipantList\u003e returnedList \u003d pStorage.readParticipantList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (returnedList.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            fail(\"Participant List read from storage is empty. Optional\u003cParticipantList\u003e is empty.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            List\u003cParticipant\u003e returnedParticipantList \u003d returnedList.get().getSpecificTypedList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertEquals(returnedParticipantList, TypicalParticipants.getTypicalParticipants());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList_nullParticipantList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveParticipantList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves {@code pList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private void saveParticipantList(ParticipantList pList, String filePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            new JsonParticipantListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                    .saveParticipantList(pList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveParticipantList(new ParticipantList(), null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 100,
      "hcwong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "@Disabled"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 2,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTeamListStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.testutil.TypicalTeams;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonTeamListStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTeamListStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void readTeamList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTeamList(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private java.util.Optional\u003cTeamList\u003e readTeamList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new JsonTeamListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                .readTeamList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertFalse(readTeamList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTeamList(\"notJsonFormatTeamList.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void readTeamList_invalidTeamList_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTeamList(\"invalidTeamList.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void readTeamList_invalidAndValidTeamList_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTeamList(\"invalidAndValidTeamList.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void readAndSaveTeamList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveAndCompareTeamList(TypicalTeams.getTypicalTeamList(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                               TypicalTeams.getTypicalTeams());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void readAndSaveTeamList_withOptionalMentor_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveAndCompareTeamList(TypicalTeams.getTeamListWithOptionalMentor(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                               TypicalTeams.getTypicalTeamsWithOptionalMentor());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void readAndSaveTeamList_withEmptyParticipantList_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveAndCompareTeamList(TypicalTeams.getTeamListWithEmptyParticipantList(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                               TypicalTeams.getTypicalTeamsWithEmptyParticipantList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Abstracts away the details of saving a TeamList and testing it. Allows for easy execution of"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * different test cases"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param toSave TeamList that you wish to save to and read from Storage."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param toCompare List of type Team that you will compare the TeamList read from Storage to."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private void saveAndCompareTeamList(TeamList toSave, List\u003cTeam\u003e toCompare) throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempTeamList.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonTeamListStorage tStorage \u003d new JsonTeamListStorage(filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Save and read participantList to and from JSON"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        tStorage.saveTeamList(toSave);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cTeamList\u003e returnedList \u003d tStorage.readTeamList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (returnedList.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            fail(\"Team List read from storage is empty. Optional\u003cTeamList\u003e is empty.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            List\u003cTeam\u003e returnedTeamList \u003d returnedList.get().getSpecificTypedList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertEquals(returnedTeamList, toCompare);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList_nullTeamList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTeamList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves {@code tList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private void saveTeamList(TeamList tList, String filePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            new JsonTeamListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                    .saveTeamList(tList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTeamList(new TeamList(), null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "@Disabled"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 2,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/stub/ModelManagerStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.stub;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.MissingEntityException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.exceptions.ModelValidationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Stub for ModelManager in order to avoid saving of Entities created during tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ModelManagerStub extends ModelManager {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // TODO: Update when ModelManager gets updated"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ModelManagerStub() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // TODO: user constructor for Alfred later"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.filteredParticipantList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new FilteredList\u003c\u003e(this.participantList.getSpecificTypedList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.filteredMentorList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new FilteredList\u003c\u003e(this.mentorList.getSpecificTypedList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.filteredTeamList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "                new FilteredList\u003c\u003e(this.teamList.getSpecificTypedList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Entity Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Participant Methods */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Adds the participant into the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void addParticipant(Participant participant) throws AlfredException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.participantList.add(participant);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Updates the participant in the list, if any."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void updateParticipant(Id id, Participant participant) throws AlfredException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team targetTeam;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "            targetTeam \u003d this.getTeamByParticipantId(id);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (MissingEntityException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.participantList.update(id, participant);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.participantList.update(id, participant);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        boolean isSuccessful \u003d targetTeam.updateParticipant(participant);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!isSuccessful) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new ModelValidationException(\"Participant is not in the team provided\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Deletes the participant by id."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Participant deleteParticipant(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team targetTeam;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "            targetTeam \u003d this.getTeamByParticipantId(id);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (MissingEntityException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return this.participantList.delete(id);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant participantToDelete \u003d this.participantList.delete(id);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "        boolean isSuccessful \u003d targetTeam.deleteParticipant(participantToDelete);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!isSuccessful) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new ModelValidationException(\"Participant does not exist\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return participantToDelete;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Team Methods*/"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Updates the team with the given teamID."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void updateTeam(Id teamId, Team updatedTeam) throws AlfredException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.teamList.update(teamId, updatedTeam);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Adds the team."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void addTeam(Team team) throws AlfredException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.teamList.add(team);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Gets the team by participant id."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Team getTeamByParticipantId(Id participantId) throws MissingEntityException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "        List\u003cTeam\u003e teams \u003d this.teamList.getSpecificTypedList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (Team t: teams) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "            for (Participant p: t.getParticipants()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "                if (p.getId().equals(participantId)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    return t;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "        throw new MissingEntityException(\"Team with said participant cannot be found.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Gets the team by mentor id."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Team getTeamByMentorId(Id mentorId) throws MissingEntityException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "        List\u003cTeam\u003e teams \u003d this.teamList.getSpecificTypedList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (Team t: teams) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": "            Optional\u003cMentor\u003e mentor \u003d t.getMentor();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (mentor.isPresent()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "                if (mentor.get().getId().equals(mentorId)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    return t;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "        throw new MissingEntityException(\"Team with said mentor cannot be found.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Adds the participant to the given team."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void addParticipantToTeam(Id teamId, Participant participant) throws AlfredException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!this.participantList.contains(participant.getId())) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new ModelValidationException(\"Participant does not exist in participantList\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team targetTeam;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": "            targetTeam \u003d this.getTeam(teamId);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (MissingEntityException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "john0227"
        },
        "content": "        boolean isSuccessful \u003d targetTeam.addParticipant(participant);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!isSuccessful) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new AlfredModelException(\"Participant is already present in team\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Adds the participant to the given team."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param teamId"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param mentor"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws AlfredException if the team does not exist."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void addMentorToTeam(Id teamId, Mentor mentor) throws AlfredException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!this.mentorList.contains(mentor.getId())) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new ModelValidationException(\"Mentor does not exist in mentorList.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team targetTeam;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "john0227"
        },
        "content": "            targetTeam \u003d this.getTeam(teamId);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (MissingEntityException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "john0227"
        },
        "content": "        boolean isSuccessful \u003d targetTeam.addMentor(mentor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!isSuccessful) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new AlfredModelException(\"Team already has a mentor\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Deletes the team."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Team deleteTeam(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // First delete the Participant objects"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team teamToDelete \u003d this.teamList.delete(id);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (Participant p : teamToDelete.getParticipants()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.participantList.delete(p.getId());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return teamToDelete;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Mentor Methods */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Adds mentor into the list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void addMentor(Mentor mentor) throws AlfredException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.mentorList.add(mentor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Updates the mentor."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public void updateMentor(Id id, Mentor updatedMentor) throws AlfredException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team targetTeam;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "john0227"
        },
        "content": "            targetTeam \u003d this.getTeamByMentorId(id);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (MissingEntityException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.mentorList.update(id, updatedMentor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.mentorList.update(id, updatedMentor);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "john0227"
        },
        "content": "        boolean isSuccessful \u003d targetTeam.updateMentor(updatedMentor);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!isSuccessful) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new ModelValidationException(\"Unable to update the mentor in team as it is not the \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    + \"same id\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Deletes the mentor."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Mentor deleteMentor(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Team targetTeam;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "john0227"
        },
        "content": "            targetTeam \u003d this.getTeamByMentorId(id);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (MissingEntityException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return this.mentorList.delete(id);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Mentor mentorToDelete \u003d this.getMentor(id);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "john0227"
        },
        "content": "        boolean isSuccessful \u003d targetTeam.deleteMentor(mentorToDelete);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!isSuccessful) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new AlfredModelException(\"Update to delete the mentor from the team\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return mentorToDelete;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (!(other instanceof ModelManagerStub)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "john0227"
        },
        "content": "        ModelManagerStub model \u003d (ModelManagerStub) other;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this.participantList.equals(model.participantList)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \u0026\u0026 this.mentorList.equals(model.mentorList)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "john0227"
        },
        "content": "                \u0026\u0026 this.teamList.equals(model.teamList);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Placeholder method simulating the updating of ModelHistory"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void updateHistory(Command c) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Placeholder method simulating the undoing of a command in ModelHistory"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Placeholder method simulating the redoing of a command in ModelHistory"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Placeholder method to simulating reseting of FilteredList"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void resetFilteredLists() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 19,
      "john0227": 259,
      "hcwong": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditMentorDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditMentorCommand.EditMentorDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " * A utility class to help with building {@code EditMentorDescriptor} objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditMentorDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditMentorDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditMentorDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.descriptor \u003d new EditMentorDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditMentorDescriptorBuilder(EditMentorDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.descriptor \u003d new EditMentorDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns an {@code EditMentorDescriptor} with fields containing {@code Mentor}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditMentorDescriptorBuilder(Mentor mentor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditMentorDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setName(mentor.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setPhone(mentor.getPhone());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setEmail(mentor.getEmail());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setOrganization(mentor.getOrganization());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setSubject(mentor.getSubject());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Name} of the {@code EditMentorDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditMentorDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditMentorDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditMentorDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Email} of the {@code EditMentorDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditMentorDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Organization} of the {@code EditMentorDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditMentorDescriptorBuilder withOrganization(String organization) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setOrganization(new Name(organization));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code SubjectName} of the {@code EditMentorDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditMentorDescriptorBuilder withSubject(String subject) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setSubject(SubjectName.valueOf(subject.toUpperCase()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditMentorDescriptor build() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditParticipantDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditParticipantCommand.EditParticipantDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": " * A utility class to help with building {@code EditParticipantDescriptor} objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditParticipantDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditParticipantDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditParticipantDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.descriptor \u003d new EditParticipantDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditParticipantDescriptorBuilder(EditParticipantDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.descriptor \u003d new EditParticipantDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns an {@code EditParticipantDescriptor} with fields containing {@code Participant}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditParticipantDescriptorBuilder(Participant participant) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditParticipantDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setName(participant.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setPhone(participant.getPhone());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setEmail(participant.getEmail());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Name} of the {@code EditParticipantDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditParticipantDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditParticipantDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditParticipantDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Email} of the {@code EditParticipantDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditParticipantDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditParticipantDescriptor build() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTeamDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditTeamCommand.EditTeamDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " * A utility class to help with building {@code EditTeamDescriptor} objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditTeamDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditTeamDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditTeamDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.descriptor \u003d new EditTeamDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditTeamDescriptorBuilder(EditTeamDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.descriptor \u003d new EditTeamDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns an {@code EditTeamDescriptor} with fields containing {@code Team}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditTeamDescriptorBuilder(Team team) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor \u003d new EditTeamDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setName(team.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setSubject(team.getSubject());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setScore(team.getScore());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setProjectName(team.getProjectName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setLocation(team.getLocation());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Name} of the {@code EditTeamDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditTeamDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code SubjectName} of the {@code EditTeamDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditTeamDescriptorBuilder withSubject(String subject) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setSubject(SubjectName.valueOf(subject.toUpperCase()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditTeamDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditTeamDescriptorBuilder withScore(int score) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setScore(new Score(score));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code ProjectName} of the {@code EditTeamDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditTeamDescriptorBuilder withProjectName(String projectName) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setProjectName(new Name(projectName));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Location} of the {@code EditTeamDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditTeamDescriptorBuilder withLocation(int location) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.setLocation(new Location(location));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditTeamDescriptor build() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FileUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Utility class for dealing with {@code File}s."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Checks if given files have the same content."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static boolean hasEqualContents(File file1, File file2) throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        BufferedReader reader1 \u003d new BufferedReader(new FileReader(file1));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "        BufferedReader reader2 \u003d new BufferedReader(new FileReader(file2));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] fileLines1 \u003d reader1.lines().toArray(String[]::new);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        String[] fileLines2 \u003d reader2.lines().toArray(String[]::new);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        reader1.close();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        reader2.close();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return Arrays.equals(fileLines1, fileLines2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MentorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_MENTOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Builds a valid {@link Mentor} to facilitate testing."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class MentorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id DEFAULT_ID \u003d ID_FIRST_MENTOR;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String DEFAULT_ORGANIZATION \u003d \"Alfred Org\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String DEFAULT_SUBJECT \u003d \"ENVIRONMENTAL\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Id id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Name organization;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private SubjectName subject;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public MentorBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        id \u003d DEFAULT_ID;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        organization \u003d new Name(DEFAULT_ORGANIZATION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        subject \u003d SubjectName.valueOf(DEFAULT_SUBJECT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes the MentorBuilder with the data of {@code mentorToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public MentorBuilder(Mentor mentorToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        id \u003d mentorToCopy.getId();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        name \u003d mentorToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        phone \u003d mentorToCopy.getPhone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        email \u003d mentorToCopy.getEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        organization \u003d mentorToCopy.getOrganization();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        subject \u003d mentorToCopy.getSubject();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Id} of the {@code Mentor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public MentorBuilder withId(int id) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.id \u003d new Id(PrefixType.M, id);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Name} of the {@code Mentor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public MentorBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Phone} of the {@code Mentor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public MentorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Email} of the {@code Mentor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public MentorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code organization} of the {@code Mentor} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public MentorBuilder withOrganization(String organization) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.organization \u003d new Name(organization);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code SubjectName} of the {@code Mentor} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public MentorBuilder withSubject(String subject) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.subject \u003d SubjectName.valueOf(subject.toUpperCase());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * This builds a standard {@code Mentor} object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Mentor build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new Mentor(name, id, phone, email, organization, subject);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MentorUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANISATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddMentorCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditMentorCommand.EditMentorDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Utility class for a mentor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class MentorUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns an add command string for adding the {@code mentor}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static String getAddCommand(Mentor mentor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return AddMentorCommand.COMMAND_WORD + \" \" + getMentorDetails(mentor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the part of command string for the given {@code mentor}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static String getMentorDetails(Mentor mentor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        sb.append(PREFIX_NAME + mentor.getName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        sb.append(PREFIX_PHONE + mentor.getPhone().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        sb.append(PREFIX_EMAIL + mentor.getEmail().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        sb.append(PREFIX_ORGANISATION + mentor.getOrganization().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        sb.append(PREFIX_SUBJECT_NAME + mentor.getSubject().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the part of command string for the given {@code EditMentorDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static String getEditMentorDescriptorDetails(EditMentorDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.getOrganization().ifPresent(org -\u003e sb.append(PREFIX_ORGANISATION).append(org.fullName).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.getSubject().ifPresent(sub -\u003e sb.append(PREFIX_SUBJECT_NAME).append(sub.toString()).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ParticipantBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_PARTICIPANT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Builds a valid {@link Participant} to facilitate testing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ParticipantBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id DEFAULT_ID \u003d ID_FIRST_PARTICIPANT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Id id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ParticipantBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        id \u003d DEFAULT_ID;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes the ParticipantBuilder with the data of {@code participantToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ParticipantBuilder(Participant participantToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        id \u003d participantToCopy.getId();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        name \u003d participantToCopy.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        phone \u003d participantToCopy.getPhone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        email \u003d participantToCopy.getEmail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Id} of the {@code Participant} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ParticipantBuilder withId(int id) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.id \u003d new Id(PrefixType.P, id);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Name} of the {@code Participant} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ParticipantBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Phone} of the {@code Participant} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ParticipantBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Email} of the {@code Participant} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ParticipantBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * This builds a standard {@code Participant} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Participant"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Participant build() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new Participant(name, id, email, phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * This builds a standard {@code Person} object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Person"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Person(name, phone, email, tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 3,
      "Abhiman2211": 1,
      "-": 83,
      "hcwong": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TeamBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.testutil.TypicalIds.ID_FIRST_TEAM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Builds a valid {@link Team} to facilitate testing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class TeamBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id DEFAULT_ID \u003d ID_FIRST_TEAM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final List\u003cParticipant\u003e DEFAULT_PARTICIPANTS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Optional\u003cMentor\u003e DEFAULT_MENTOR \u003d Optional.empty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String DEFAULT_SUBJECT \u003d \"ENVIRONMENTAL\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final int DEFAULT_SCORE \u003d 100;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String DEFAULT_PROJECT_NAME \u003d \"Hackathon Manager\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final int DEFAULT_LOCATION \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Id id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private List\u003cParticipant\u003e participants;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Optional\u003cMentor\u003e mentor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private SubjectName subject;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Score score;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Name projectName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public TeamBuilder() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        id \u003d DEFAULT_ID;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        participants \u003d DEFAULT_PARTICIPANTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        mentor \u003d DEFAULT_MENTOR;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        subject \u003d SubjectName.valueOf(DEFAULT_SUBJECT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        score \u003d new Score(DEFAULT_SCORE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        projectName \u003d new Name(DEFAULT_PROJECT_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Initializes the TeamBuilder with the data of {@code teamToCopy}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public TeamBuilder(Team teamToCopy) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        id \u003d teamToCopy.getId();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        name \u003d teamToCopy.getName();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        participants \u003d teamToCopy.getParticipants();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        mentor \u003d teamToCopy.getMentor();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "        subject \u003d teamToCopy.getSubject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        score \u003d teamToCopy.getScore();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        projectName \u003d teamToCopy.getProjectName();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        location \u003d teamToCopy.getLocation();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Id} of the {@code Team} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public TeamBuilder withId(int id) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.id \u003d new Id(PrefixType.T, id);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Name} of the {@code Team} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public TeamBuilder withName(String name) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Participants} of the {@code Team} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public TeamBuilder withParticipants(List\u003cParticipant\u003e participants) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.participants \u003d participants;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Mentor} of the {@code Team} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public TeamBuilder withMentor(Optional\u003cMentor\u003e mentor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Subject} of the {@code Team} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public TeamBuilder withSubject(String subject) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.subject \u003d SubjectName.valueOf(subject.toUpperCase());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Score} of the {@code Team} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public TeamBuilder withScore(int score) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.score \u003d new Score(score);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code ProjectName} of the {@code Team} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public TeamBuilder withProjectName(String projectName) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.projectName \u003d new Name(projectName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Sets the {@code Location} of the {@code Team} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public TeamBuilder withLocation(int location) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * This builds a standard {@code Team} object."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Team build() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new Team(id, name, participants, mentor, subject, score, projectName, location);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TeamUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddTeamCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditTeamCommand.EditTeamDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Utility class for a team."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class TeamUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns an add command string for adding the {@code team}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static String getAddCommand(Team team) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return AddTeamCommand.COMMAND_WORD + \" \" + getTeamDetails(team);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the part of command string for the given {@code team}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static String getTeamDetails(Team team) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        sb.append(PREFIX_NAME + team.getName().fullName + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        sb.append(PREFIX_PROJECT_NAME + team.getProjectName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        sb.append(PREFIX_SUBJECT_NAME + team.getSubject().toString() + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        sb.append(PREFIX_LOCATION + \"\" + team.getLocation().getTableNumber() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns the part of command string for the given {@code EditMentorDescriptor}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static String getEditMentorDescriptorDetails(EditTeamDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.getProjectName().ifPresent(pn -\u003e sb.append(PREFIX_PROJECT_NAME).append(pn.fullName).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.getLocation().ifPresent(loc -\u003e sb.append(PREFIX_LOCATION).append(loc.getTableNumber()).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        descriptor.getSubject().ifPresent(sub -\u003e sb.append(PREFIX_SUBJECT_NAME).append(sub.toString()).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final Path CSV_UTIL_TEST_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvUtilTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Appends {@code fileName} to the CsvUtilTest folder path and returns the resulting path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Creates the CsvUtilTest folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static Path getFilePathInCsvUtilTestFolder(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "            Files.createDirectories(CSV_UTIL_TEST_FOLDER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return CSV_UTIL_TEST_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "john0227": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIds.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": " * A utility class containing a list of {@code Id} objects to be used in tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class TypicalIds {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // Participant Ids"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id ID_FIRST_PARTICIPANT \u003d new Id(PrefixType.P, 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id ID_SECOND_PARTICIPANT \u003d new Id(PrefixType.P, 2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id ID_THIRD_PARTICIPANT \u003d new Id(PrefixType.P, 3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // Mentor Ids"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id ID_FIRST_MENTOR \u003d new Id(PrefixType.M, 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id ID_SECOND_MENTOR \u003d new Id(PrefixType.M, 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id ID_THIRD_MENTOR \u003d new Id(PrefixType.M, 3);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // Team Ids"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id ID_FIRST_TEAM \u003d new Id(PrefixType.T, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id ID_SECOND_TEAM \u003d new Id(PrefixType.T, 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id ID_THIRD_TEAM \u003d new Id(PrefixType.T, 3);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id INDEX_FIRST_TEAM \u003d new Id(PrefixType.T, 1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id INDEX_FIRST_MENTOR \u003d new Id(PrefixType.M, 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final Id INDEX_THIRD_PARTICIPANT \u003d new Id(PrefixType.P, 3);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "john0227": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalMentors.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORGANIZATION_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ORGANIZATION_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A utility class containing a list of {@code Mentor} objects to be used in tests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class TypicalMentors {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // Manually created mentors"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final Mentor A \u003d new Mentor(new Name(\"Mentor A\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Id(PrefixType.M, 3),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                                              new Phone(\"+6591111111\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Email(\"mentorA@gmail.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Name(\"Organization A\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              SubjectName.SOCIAL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final Mentor A_UPDATED \u003d new Mentor(new Name(\"Mentor A\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Id(PrefixType.M, 3),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            new Phone(\"+6591111111\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Email(\"mentorA@gmail.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Name(\"Organization Updated\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            SubjectName.SOCIAL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final Mentor A_SIMILAR \u003d new Mentor(new Name(\"Mentor A\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Id(PrefixType.M, 31),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            new Phone(\"+6591111111\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Email(\"mentorA@gmail.com\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Name(\"Organization B\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            SubjectName.EDUCATION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final Mentor B \u003d new Mentor(new Name(\"Mentor B\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Id(PrefixType.M, 31),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                                              new Phone(\"+6592222222\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Email(\"mentorB@gmail.com\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Name(\"Organization B\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              SubjectName.EDUCATION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final Mentor C \u003d new Mentor(new Name(\"Mentor C\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Id(PrefixType.M, 33),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                                              new Phone(\"+6593333333\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Email(\"mentorC@gmail.com\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Name(\"Organization C\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              SubjectName.ENVIRONMENTAL);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // Manually created mentors - Mentor details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Mentor AMY \u003d new MentorBuilder().withName(VALID_NAME_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            .withOrganization(VALID_ORGANIZATION_AMY).withPhone(VALID_PHONE_AMY).withSubject(VALID_SUBJECT_AMY).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Mentor BOB \u003d new MentorBuilder().withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            .withOrganization(VALID_ORGANIZATION_BOB).withPhone(VALID_PHONE_BOB).withSubject(VALID_SUBJECT_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Gets the Typical Mentors in the form of a List."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return List of Typical Mentors"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static List\u003cMentor\u003e getTypicalMentors() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(A, B, C));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Gets the Typical Mentors in the form of a MentorList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return MentorList containing Typical Mentors"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws AlfredModelException"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static MentorList getTypicalMentorList() throws AlfredModelException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        MentorList mList \u003d new MentorList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (Mentor m: getTypicalMentors()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            mList.add(m);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 57,
      "Abhiman2211": 27,
      "hcwong": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalParticipants.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A utility class containing a list of {@code Participant} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class TypicalParticipants {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final Participant A \u003d new Participant(new Name(\"Participant A\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                        new Id(PrefixType.P, 1),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                        new Email(\"participantA@gmail.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                        new Phone(\"91111111\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final Participant A_UPDATED \u003d new Participant(new Name(\"Participant McParticipantyface\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                                                                new Id(PrefixType.P, 1),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                                                                new Email(\"updated@gmail.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                                                                new Phone(\"92121212\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final Participant A_SIMILAR \u003d new Participant(new Name(\"Participant A\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Id(PrefixType.P, 2),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Email(\"participantA@gmail.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Phone(\"92121212\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final Participant B \u003d new Participant(new Name(\"Part B\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            new Id(PrefixType.P, 2),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                        new Email(\"participantB@hotmail.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                                                        new Phone(\"82222222\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final Participant C \u003d new Participant(new Name(\"Participant C\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                        new Id(PrefixType.P, 3),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                        new Email(\"participantC@yahoo.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                                        new Phone(\"933331231\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // Manually created mentors - Mentor details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Participant AMY \u003d new ParticipantBuilder().withName(VALID_NAME_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Participant BOB \u003d new ParticipantBuilder().withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Gets the Typical Participants in the form of a List."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return List of Typical Participants"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static List\u003cParticipant\u003e getTypicalParticipants() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(A, B, C));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Gets the Typical Participants in the form of a ParticipantList."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return ParticipantList containing Typical Participants"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws AlfredModelException"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static ParticipantList getTypicalParticipantList() throws AlfredModelException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList pList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (Participant p: getTypicalParticipants()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            pList.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return pList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 53,
      "Abhiman2211": 14,
      "hcwong": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michigan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 1,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTeams.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_ALFRED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BRUCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ALFRED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BRUCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_ALFRED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_BRUCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_ALFRED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BRUCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.AlfredModelException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A utility class containing a list of {@code Team} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class TypicalTeams {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final Team A \u003d new Team(new Id(PrefixType.T, 1),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Name(\"Team A\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                                          initializeListA(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          Optional.of(TypicalMentors.A),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          SubjectName.ENVIRONMENTAL,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Score(1),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Name(\"Project Alpha\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Location(1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final Team A_UPDATED \u003d new Team(new Id(PrefixType.T, 1),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Name(\"Team A\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            initializeListA(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional.of(TypicalMentors.A),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            SubjectName.ENVIRONMENTAL,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Score(1),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Name(\"Project Alpha\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Location(2));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final Team A_SIMILAR \u003d new Team(new Id(PrefixType.T, 2),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Name(\"Team B\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            TypicalParticipants.getTypicalParticipants(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional.of(TypicalMentors.B),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            SubjectName.EDUCATION,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Score(2),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Name(\"Project Alpha\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            new Location(2));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final Team B \u003d new Team(new Id(PrefixType.T, 2),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            new Name(\"Team B\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            TypicalParticipants.getTypicalParticipants(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Optional.of(TypicalMentors.B),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          SubjectName.EDUCATION,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Score(2),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Name(\"Project Beta\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                         new Location(2));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final Team C \u003d new Team(new Id(PrefixType.T, 3),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Name(\"Team C\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          TypicalParticipants.getTypicalParticipants(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          Optional.of(TypicalMentors.C),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          SubjectName.HEALTH,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Score(3),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Name(\"Project Gamma\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Location(3));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //With empty Optional\u003cMentor\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final Team D \u003d new Team(new Id(PrefixType.T, 4),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Name(\"Team D\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          TypicalParticipants.getTypicalParticipants(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          Optional.empty(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          SubjectName.HEALTH,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Score(5),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Name(\"Project Delta\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Location(4));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //With empty ParticipantList"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final Team E \u003d new Team(new Id(PrefixType.T, 5),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Name(\"Team E\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new LinkedList\u003cParticipant\u003e(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          Optional.of(TypicalMentors.C),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          SubjectName.HEALTH,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Score(5),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Name(\"Project Epsilon\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                          new Location(5));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Team ALFRED \u003d new TeamBuilder().withName(VALID_NAME_ALFRED).withLocation(VALID_LOCATION_ALFRED)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "            .withProjectName(VALID_PROJECT_NAME_ALFRED).withSubject(VALID_SUBJECT_ALFRED).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Team BRUCE \u003d new TeamBuilder().withName(VALID_NAME_BRUCE).withLocation(VALID_LOCATION_BRUCE)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "            .withProjectName(VALID_PROJECT_NAME_BRUCE).withSubject(VALID_SUBJECT_BRUCE).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Retrieves a List of Typical Teams."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return List of Typical Teams"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static List\u003cTeam\u003e getTypicalTeams() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(A, B, C));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Retrieves a typical TeamList."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return typical TeamList"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static TeamList getTypicalTeamList() throws AlfredModelException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        TeamList tList \u003d new TeamList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (Team t: getTypicalTeams()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            tList.add(t);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return tList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Retrieves a List of Teams with a single Team that contains an Optional Mentor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return List of Teams with a single Team that contains an Optional Mentor"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static List\u003cTeam\u003e getTypicalTeamsWithOptionalMentor() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(A, B, D)); //D contains the Optional Mentor"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Retrieves a TeamList with a single Team that contains an Optional Mentor."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return TeamList with a single Team that contains an Optional Mentor"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static TeamList getTeamListWithOptionalMentor() throws AlfredModelException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        TeamList tList \u003d new TeamList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (Team t: getTypicalTeamsWithOptionalMentor()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            tList.add(t);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return tList;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Retrieves a List of Teams with a single Team that contains an empty ParticipantList."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return List of Teams with a single Team that contains an empty ParticipantList"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static List\u003cTeam\u003e getTypicalTeamsWithEmptyParticipantList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(A, B, E)); //E contains the empty ParticipantList"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Retrieves a TeamList with a single Team that contains an empty ParticipantList."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return TeamList with a single Team that contains an empty ParticipantList"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static TeamList getTeamListWithEmptyParticipantList() throws AlfredModelException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        TeamList tList \u003d new TeamList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (Team t: getTypicalTeamsWithEmptyParticipantList()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            tList.add(t);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return tList;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Initialize the listA with the values needed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return {@code List\u003cParticipant\u003e}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static List\u003cParticipant\u003e initializeListA() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cParticipant\u003e listA \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        listA.add(TypicalParticipants.A);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return listA;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Clears the team as this is a static variable."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static void clearTeamA() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        TypicalTeams.A.setParticipants(initializeListA());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 130,
      "Abhiman2211": 15,
      "hcwong": 37,
      "john0227": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 114,
      "Joanna-YJA": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003cfx:root commandType\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "Joanna-YJA": 1
    }
  }
]
